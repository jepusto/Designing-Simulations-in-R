[["index.html", "Designing Monte Carlo Simulations in R Welcome License About the authors Acknowledgements", " Designing Monte Carlo Simulations in R Luke W. Miratrix and James E. Pustejovsky (Equal authors) 2024-07-01 Welcome Monte Carlo simulations are a computational technique for investigating how well something works, or for investigating what might happen in a given circumstance. When we write a simulation, we are able to control how data are generated, which means we can know what the “right answer” is. Then, by repeatedly generating data and then applying some statistical method that data, we can assess how well a statistical method works in practice. Monte Carlo simulations are an essential tool of inquiry for quantitative methodologists and students of statistics, useful both for small-scale or informal investigations and for formal methodological research. Despite the ubiquity of simulation work, most quantitative researchers get little formal training in the design and implementation of Monte Carlo simulations. As a result, the simulation studies presented in academic journal articles are highly variable in terms of their high-level logic, scope, programming, and presentation. Although there has long been discussion of simulation design and implementation among statisticians and methodologists, the available guidance is scattered across many different disciplines, and much of it is focused on mechanics and computing tools, rather than on principles. In this monograph, we aim to provide an introduction to the logic and mechanics of designing simulation studies, using the R programming language. Our focus is on simulation studies for formal research purposes (i.e., as might appear in a journal article or dissertation) and for informing the design of empirical studies (e.g., power analysis). That being said, the ideas of simulation are used in many different contexts and for many different problems, and we believe the overall concepts illustrated by these “conventional” simulations readily carry over into all sorts of other types of use, even statistical inference! Our focus is on the best practices of simulation design and how to use simulation to be a more informed and effective quantitative analyst. In particular, we try to provide a guide to designing simulation studies to answer questions about statistical methodology. Mainly, this book gives practical tools (i.e., lots of code to simply take and repurpose) along with some thoughts and guidance for writing simulations. We hope you find it to be a useful handbook to help you with your own projects, whatever they happen to be! License This book is licensed to you under Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. The code samples in this book are licensed under Creative Commons CC0 1.0 Universal (CC0 1.0), i.e. public domain. About the authors We wrote this book in full collaboration, because we thought it would be fun to have some reason to talk about how to write simulations, and we wanted more people to be writing high-quality simulations. Our author order is alphabetical, but perhaps imagine it as a circle, or something with no start or end: But anymore, more about us. James E. Pustejovsky is an associate professor at the University of Wisconsin - Madison, where he teaches in the Quantitative Methods Program within the Department of Educational Psychology. He completed a Ph.D. in Statistics at Northwestern University. Luke Miratrix: I am currently an associate professor at Harvard University’s Graduate School of Education. I completed a Ph.D. in Statistics at UC Berkeley after having traveled through three different graduate programs (computer science at MIT, education at UC Berkeley, and then finally statistics at UC Berkeley). I then ended up as an assistant professor in Harvard’s statistics department, and moved (back) to Education a few years later. Over the years, simulation has become a way for me to think. This might be because I am fundamentally lazy, and the idea of sitting down and trying to do a bunch of math to figure something out seems less fun than writing up some code “real quick” so I can see how things operate. Of course, “real quick” rarely is that quick – and before I know it I got sucked into trying to learn some esoteric aspect of how to best program something, and then a few rabbit holes later I may have discovered something interesting! I find simulation quite absorbing, and I also find them reassuring (usually with regards to whether I have correctly implemented some statistical method). This book has been a real pleasure to write, because it’s given me actual license to sit down and think about why I do the various things I do, and also which way I actually prefer to approach a problem. And getting to write this book with my co-author has been a particular pleasure, for talking about the business of writing simulations is rarely done in practice. This has been a real gift, and I have learned so much. Acknowledgements The material in this book was initially developed through courses that we offered at the University of Texas at Austin (James) and Harvard University (Luke) as well as from a series of workshops that we offered through the Society for Research on Educational Effectiveness in June of 2021. We are grateful for feedback, questions, and corrections we have received from many students who participated in these courses. Some parts of this book are based on memos or other writings generated for various purposes, some of which were written by others. This is been attributed throughout. "],["introduction.html", "Chapter 1 Introduction 1.1 Some of simulation’s many uses 1.2 The perils of simulation as evidence 1.3 Simulation-hacking 1.4 Simulating to learn 1.5 Organization of the text", " Chapter 1 Introduction Monte Carlo simulations are computational experiments that involve using random number generators to study the behavior of statistical or mathematical models. Monte Carlo studies are an essential tool in many different fields of science—ranging from climate science to education research—and are used for a variety of different purposes. Simulations are used to model complex stochastic processes such as weather patterns (Jones, Maillardet, and Robinson 2012; Robert and Casella 2010); to generate parameter estimates from complex statistical models, as in Markov Chain Monte Carlo sampling (Gelman et al. 2013); and even to uncertainty in statistical summaries, as in bootstrapping (Davison and Hinkley 1997). Within the fields of statistics and quantitative methodology, simulation studies play a critical role in the development and validation of methods for data analysis. In this book, we will examine the use of simulation for this last purpose of using Monte Carlo simulation methods to understand the properties of data analysis methods. Within quantitatively oriented fields, researchers developing new statistical methods or evaluating the use of existing methods nearly always use Monte Carlo simulations as part of their research process. In this context, researchers use simulations in a way analogous to how a chef would use their test kitchen to develop new recipes before putting them on the menu, how a manufacturer would use a materials testing laboratory to evaluate the safety and durability of a new consumer good before bringing it to market, or how an astronaut would prepare for a spacewalk by practicing the process in an underwater mock-up. Likewise, simulation studies provide a clean and controlled environment for testing out data analysis approaches before putting them to use with real empirical data. At a very high level, Monte Carlo simulation provides a method for understanding the performance of a statistical model or data analysis method under conditions where the truth is known and can be controlled. The basic approach for doing so is as follows: Create artificial data using random number generators based on a specific statistical model, or more generally, a data-generating process. Apply one or more data-analysis procedures, such as estimating a particular statistical model, to the artificial data. (This might be something as simple as calculating a difference in sample means, or it might be an involved, multi-step procedure involving cleansing the data of apparent outliers, imputing missing values, applying a machine-learning algorithm, and carrying out further calculations on the predictions of the algorithm.) Repeat Steps 1 and 2 many times. Summarize the results across these repetitions in order to understand the general trends or patterns in how the method works. This approach is useful because one can control the data-generating process and therefore fully know the truth—something that is almost always uncertain when analyzing real, empirical data. Having full control of the data-generating process makes it possible to assess how well a procedure works by comparing the estimates produced by the data analysis procedure against the true value from the data-generating process. For instance, one can see if estimates from a statistical procedure are consistently too high or too low; in simulations that involve more than one data-analysis procedure, one can compare the degree of error in each set of results and determine which procedure is more accurate. 1.1 Some of simulation’s many uses Monte Carlo simulations allow for rapid exploration of different data analysis procedures and, even more broadly, different approaches to designing studies and collecting measurements. Simulations are especially useful because they provide a means to answer questions that are difficult or impossible to answer by other means. Many statistical models and estimation methods can be analyzed mathematically, but only by using asymptotic approximations that describe how the methods work as the sample sizes increases towards infinity. In contrast, simulation methods provide answers for specific, finite sample sizes. Thus, they allow researchers to study models and estimation methods where relevant algebraic formulas are not available, not easily applied, or not sufficiently accurate. Circumstances where simulations are helpful—or even essential—occur in a range of different situations within quantitative research. To set the stage for our subsequent presentation, consider the following areas where one might find need of simulation. 1.1.1 Comparing statistical approaches Perhaps one of the most common uses of Monte Carlo simulation is to compare alternative statistical approaches to analyzing the same type of data. In the academic literature on statistical methodology, authors frequently report simulation studies comparing a newly proposed method against more traditional approaches, to make a case for the utility of their method. A classic example of such work is Brown and Forsythe (1974), who compared four different procedures for conducting a hypothesis test for equality of means in several populations (i.e., one-way ANOVA) when the population variances are not equal. A subsequent study by Mehrotra (1997) built on Brown and Forsythe’s work, proposing a more refined method and using simulations to demonstrate that it is superior to the existing methods. We revisit the Brown and Forsythe (1974) example in Chapter 5. Comparative simulation can also have a practical application: In many situations, more than one approach or data analysis methods is possible for addressing a given research question (or estimating a specified target parameter). Simulations comparing the costs of multiple approaches can be quite informative and can help to guide the design of analytic plans (such as plans included in pre-registered study protocols). As an example of the type of questions that researchers might encounter in designing analytic plans: what are the practical benefits and costs of using a model that allows for cross-site impact variation for a multi-site trial (Miratrix, Weiss, and Henderson 2021)? In the ideal case, simulations can identify best practices for how to approach analysis of a certain type of data and can surface trade-offs between competing approaches that occur in practice. 1.1.2 Assessing performance of complex pipelines In practice, statistical methods are often used in as part of a multi-step workflow. For instance, in a regression model, one might first use a statistical test for heteroskedasticity (e.g., the White test or the Breusch-Pagan test) and then determine whether to use conventional or heteroskedasticity-robust standard errors depending on the result of the test. This combination of an initial diagnostic test followed by contingent use of different statistical procedures is all but impossible to analyze mathematically, but it is straight-forward to simulate (see, for example, Long and Ervin 2000). In particular, simulations are a straight-foward way to assess whether a proposed workflow is valid—that is, whether the conclusions from a pipeline are correct at a given level of certainty. Beyond just evaluating the performance characteristics of a workflow, simulating a multi-step workflow can actually be used as a technique for conducting statistical inference with real data. Data analysis approaches such as randomization inference or bootstrapping (Davison and Hinkley 1997) involve repeatedly simulating data and putting it through an analytic pipeline, in order to assess the uncertainty of an estimate based on real data. In bootstrapping, the variation in a point estimate across replications of the simulation is used as the standard error for the context being simulated; an argument by analogy (the bootstrap analogy) is what connects this to inference on the original data and point estimate. 1.1.3 Assessing performance under misspecification Many statistical estimation procedures are known to perform well when the assumptions they entail are correct. However, data analysts must also be concerned with the robustness of estimation procedures—that is, their performance when one or more of the assumptions is violated to some degree. For example, in a multilevel model, how important is the assumption that the random effects are normally distributed? What about normality of the individual-level error terms? What about homoskedasticity of the individual-level error terms? Quantitative researchers routinely contend with such questions when analyzing empirical data. Similar concerns arise for researchers considering the trade-offs between methods that make relatively stringent assumptions versus methods that are more flexible or adaptive. When the true data-generating process meets stringent assumptions (e.g., a treatment effect that is constant across the population of participants), what are the potential gain of exploiting such structure in the estimation process? Conversely, what are the costs (in terms of computation time and precision) of using more flexible methods that do not impose strong assumptions? A researcher designing an analytic plan would want to be well-informed of such trade-offs and, ideally, would want to situate their understanding in the context of the empirical phenomena that they study. Simulation allows for such investigation and comparison. 1.1.4 Assessing the finite sample performance of a statistical approach Many statistical estimation procedures can be shown (through mathematical analysis) to work well asymptotically—that is, given an infinite amount of data—but their performance for data of a given, finite size is more difficult to quantify. Although mathematical theory can inform us about “asymptopia,” researchers live in a world of finite sample sizes, where it can be difficult to gauge if one’s real data is large enough that the asymptotic approximations apply. This is of particular concern with hierarchical data structures that include only 20 to 40 clusters—a common circumstance in many randomized field trials in education research. Simulation is a tractable approach for assessing the small-sample performance of such estimation methods or for determining minimum required sample sizes for adequate performance. One example of a simulation investigating questions of finite-sample behavior comes from Long and Ervin (2000), whose evaluated the performance of heteroskedasticity-robust standard errors (HRSE) in linear regression models. Asymptotic analysis indicates that HRSEs work well in sufficiently large samples [that is, it can be shown that they provide correct assessments of uncertainty when \\(N\\) is infinite; see White (1980)], but what about in realistic contexts? Long and Ervin (2000) use extensive simulations to investigate the properties of different versions of HRSEs for linear regression across a range of sample sizes, demonstrating that the most commonly used form of these estimators often does not work well with sample sizes found in typical social science applications. As another example, recent work has developed the Fixed-Intercept, Random Coefficient method for estimating and accounting for cross site treatment variation in multi-site experiments. When there are a moderate number of clusters it appears that the numerical (asymptotic based) estimates of performance are not very accurate. Simulation can unpack these trends and give a more accurate picture of effectiveness in these real contexts. 1.1.5 Conducting Power Analyses During the process of proposing, seeking funding for, and planning an empirical research study, researchers need to justify the design of the study, including the size of the sample that they aim to collect. Part of such justifications may involve a power analysis, or an approximation of the probability that the study will show a statistically significant effect, given assumptions about the magnitude of true effects and other aspects of the data-generating process. Many guidelines and tools are available for conducting power analysis for various research designs, including software such as PowerUp! (Dong and Maynard 2013), the Generalizer (Tipton 2013), and G*Power (Faul et al. 2009). These tools use analytic formulas for power, which are often derived using approximations and simplifying assumptions about a planned design. Simulation provides a very general-purpose alternative for power calculations, which can avoid such approximations and simplifications. By repeatedly simulating data based on a hypothetical process and then analyzing data following a specific protocol, one can computationally approximate the power to detect the an effect of a specified size. Using simulation instead of analytic formulas allows for power analyses that are more nuanced and more tailored to the researcher’s circumstance than what can be obtained from available software. In particular, simulation can be useful for the following: When estimating power in multi-site, block- or cluster-randomized trials, the formulas implemented in available software assume that sites are of equal size and that outcome distributions are unrelated to the size of each site. Small deviations from these assumptions are unlikely to change the results, but in practice, researchers may face situations where sites vary quite widely in size or where site-level outcomes are related to site size. Simulation can estimate power in this case. Available software such as PowerUp! allows investigators to build in assumptions about anticipated rates of attrition in cluster-randomized trials, under the assumption that attrition is completely at random. However, researchers might anticipate that attrition will be related to baseline characteristics, leading to data that is missing at random but not completely at random. Simulation can be used to assess how this affect the power of a planned study. There are some closed-form expressions for power to test mediational relations (i.e., indirect and direct effects) in a variety of different experimental designs, and these formulas are now available in PowerUp!. However, the formulas involve a large number of parameters (including some where it may be difficult to develop credible assumptions) and they apply only to a specific analytic model for the mediating relationships. Researchers planning a study to investigate mediation might therefore find it useful to generate realistic data structures and conduct power analysis via simulation. 1.1.6 Simulating processess Yet another common use for Monte Carlo simulation is as a way to emulate a complex process as a means to better understand it or to evaluate the consequences of modifying it. A famous area of process simulation are climate models, where researchers simulate the process of climate change. These physical simulations mimic very complex systems to try and understand how perturbations (e.g., more carbon release) will impact downstream trends. Another example of process simulation arises in education research. Some large school districts such as New York City have centralized lotteries for school assignment, which entail having families rank schools by order of preference. The central office then assigns students to schools via a lottery procedure where each student gets a lottery number that breaks ties when there are too many students desiring to go to a certain school. Students’ school assignments are therefore based in part on random chance, but the the process is quite complex: each student has some probability of assignment to each school on their list, but the probabilities depend on their choices and the choices of other students. The school lottery process creates a natural experiment, based on which researchers can estimate the causal impact of being assigned to one school vs. another. However, a defensible analysis of the process requires knowing the probabilities of school assignment. Abdulkadiroğlu et al. (2017) conducted such an evaluation using the school lottery process in New York City. They calculated school assignment probabilities via simulation, by running the school lottery over and over, changing only students’ lottery numbers, and recording students’ school assignments in each repetition of the process. Simulating the lottery process a large number of times provided precise estimates of each students’ assignment probabilities, based on which Abdulkadiroğlu et al. (2017) were able to estimate causal impacts of school assignment. For another example, one that possibly illustrates the perils of simulation as taking us away from results that pass face validity, Staiger and Rockoff (2010) simulate the process of firing teachers depending on their estimated value added scores. Using simulation of different levels of draconian policy, they argue that substantial portions of teachers should be fired each year. Here we see a clean example of how the assumptions driving a simulation can be explored, so we can see what the consequences of a system would be, if the assumptions behind the simulation were true. 1.2 The perils of simulation as evidence Simulation has the potential to be a powerful tool for investigating quantitative methods. However, evidence from simulation studies is also fundamentally limited in certain ways, and thus very susceptible to critique. The core advantage of simulation studies is that they allow for evaluation of data analysis methods under specific and exact conditions, avoiding the need for approximation. The core limitation of simulations stems from this same property: they provide information about the performance of data analysis methods under specified conditions, but no guarantee that patterns of performance hold in general. One can partially address questions of generalization by examining a wide range of conditions, looking to see whether a pattern holds consistently or changes depending on features of the data-generating process. Even this strategy has limitations, though. Except for very simple processes, we can seldom consider every possible set of conditions. Critiques of simulation studies often revolve around the realism, relevance, or generality of the data generating process. Are the simulated data realistic, in the sense that they follow similar patterns to what one would see in real empirical data? Was the simulation systematic in exploring a wide variety of scenarios, so that general conclusions are warranted? We see at least three strategies for addressing questions like this. Perhaps most fundamental is to be transparent in one’s methods and reasoning: explicitly state what was done, and provide code so that others can reproduce one’s results or tweak them to test variations of the data-generating process or alternative analysis strategies. Another important component of a robust argument is to systematically vary the conditions under examination. This is faciliated by writing code in a way to make it easy to simulate across a range of different data-generating scenarios. Once that is in place, one can systematically explore myriad scenarios and report all of the results. Finally, one can draw on relevant statistical theory to support the design of a simulation and interpretation of its results. Mathematical analysis might indicate that some features of a data-generating process will have a strong influence on the performance of a method, while other features will not matter at all when sample sizes are sufficiently large. Well designed simulations will choose conditions to examine that are motivated by or complement what is known based on existing statistical theory. 1.3 Simulation-hacking As we will see in later chapters, the design of a simulation study entails myriad choices, often over a very large space of possibilities. This flexibility leaves lots of room for discretion and judgement. Due to this flexibility, simulation findings are held in great skepticism by many. The following motto summarizes the skeptic’s concern: Simulations are doomed to succeed. Simulations are alluring: once a simulation framework is set up, it is easy to tweak and adjust. It is natural for us all to continue to do this until the simulation works “as it should.” If our goal is to show something that we already believe is correct (e.g., that our fancy new estimation procedure is better than existing methods), we will eventually find a way to align our simulation with our intuition.1 This is, simply put, a version of fishing. To counteract this possibility, we believe it is critical to push ourselves to design scenarios where things do not work as expected. An aspiration of simulation studies should be to explore the boundary conditions that separate where preferred methods work and where they break or fail. 1.4 Simulating to learn Thus far, we have focused on using Monte Carlo simulations for methodological research. Readers who do not identify as methodologists may question whether there is any benefit to learning how to do simulations if they are never going to conduct methodological research studies or use simulation to aid in planning an empirical study. We think the answer to this is an emphatic YES, for at least two reasons. First, readers who do any sort of quantitative data analysis need to make decisions about what methods to use in their own practice. Across fields, existing guidance about data analysis practice is almost certainly informed by simulation research of some form, whether well-designed and thorough or haphazard and poorly reasoned. Consequently, having a high-level understanding of the logic and limitations of simulation will help you to be a critical consumer of methods research, even if you do not intend to conduct methods research of your own. Second, conducting simulations deepens one’s understanding of the logic of statistical modeling and statistical inference. Learning a new statistical model (such as generalized linear mixed models) or analytic technique (such as multiple imputation by chained equations) requires taking in a lot of detailed information, from the assumptions of the model to the interpretation of parameter estimates to the best practices for estimation and what to do if some part of the process goes off. To thoroughly digest all these details, we have found it invaluable to simulate data based on the model under consideration. This usually requires translating mathematical notation into computer code, an exercise which makes the components of the model more tangible than just a jumble of Greek letters. The simulated data is then available for inspection, summarizing, graphing, and further calculation, all of which can aid interpretation. Furthermore, the process of simulating yields a dataset which can then be used to practice implementing the analysis procedure and interpreting the results. We have found that following this type of process is a highly effective way to learn new models and methods, worthwhile even if one has no intention of carrying out methodological research. We might even go so far as to argue that whatever you might think, you don’t really understand a statistical model until you’ve done a simulation of it. 1.5 Organization of the text References Abdulkadiroğlu, Atila, Joshua D Angrist, Yusuke Narita, and Parag A Pathak. 2017. “Research Design Meets Market Design: Using Centralized Assignment for Impact Evaluation.” Econometrica 85 (5): 1373–1432. Brown, Morton B., and Alan B. Forsythe. 1974. “The Small Sample Behavior of Some Statistics Which Test the Equality of Several Means.” Technometrics 16 (1): 129–32. https://doi.org/10.1080/00401706.1974.10489158. Davison, A. C., and D. V. Hinkley. 1997. Bootstrap Methods and Their Applications. Cambridge: Cambridge University Press. Dong, Nianbo, and Rebecca Maynard. 2013. “PowerUp! : A Tool for Calculating Minimum Detectable Effect Sizes and Minimum Required Sample Sizes for Experimental and Quasi-Experimental Design Studies.” Journal of Research on Educational Effectiveness 6 (1): 24–67. https://doi.org/10.1080/19345747.2012.673143. Faul, Franz, Edgar Erdfelder, Axel Buchner, and Albert-Georg Lang. 2009. “Statistical Power Analyses Using G*Power 3.1: Tests for Correlation and Regression Analyses.” Behavior Research Methods 41 (4): 1149–60. https://doi.org/10.3758/BRM.41.4.1149. Gelman, Andrew, John B. Carlin, Hal S. Stern, David B. Dunson, Aki Vehtari, and Donald B. Rubin. 2013. Bayesian Data Analysis. 0th ed. Chapman and Hall/CRC. https://doi.org/10.1201/b16018. Jones, Owen, Robert Maillardet, and Andrew Robinson. 2012. Introduction to Scientific Programming and Simulation Using R. New York: Chapman and Hall/CRC. https://doi.org/10.1201/9781420068740. Long, J. Scott, and Laurie H. Ervin. 2000. “Using Heteroscedasticity Consistent Standard Errors in the Linear Regression Model.” The American Statistician 54 (3): 217–24. https://doi.org/10.1080/00031305.2000.10474549. Mehrotra, Devan V. 1997. “Improving the Brown-Forsythe Solution to the Generalized Behrens-Fisher Problem.” Communications in Statistics - Simulation and Computation 26 (3): 1139–45. https://doi.org/10.1080/03610919708813431. Miratrix, Luke W, Michael J Weiss, and Brit Henderson. 2021. “An Applied Researcher’s Guide to Estimating Effects from Multisite Individually Randomized Trials: Estimands, Estimators, and Estimates.” Journal of Research on Educational Effectiveness 14 (1): 270–308. Robert, Christian, and George Casella. 2010. Introducing Monte Carlo Methods with R. New York, NY: Springer. https://doi.org/10.1007/978-1-4419-1576-4. Staiger, Douglas O, and Jonah E Rockoff. 2010. “Searching for Effective Teachers with Imperfect Information.” Journal of Economic Perspectives 24 (3): 97–118. Tipton, Elizabeth. 2013. “Stratified Sampling Using Cluster Analysis: A Sample Selection Strategy for Improved Generalizations from Experiments.” Evaluation Review 37 (2): 109–39. https://doi.org/10.1177/0193841X13516324. White, Halbert. 1980. “A Heteroskedasticity-Consistent Covariance Matrix Estimator and a Direct Test for Heteroskedasticity.” Econometrica 48 (4): 817–38. A comment from James: I recall attending seminars in the statistics department during graduate school, where guest speakers usually presented both some theory and some simulation results. A few years into my graduate studies, I realized that the simulation part of the presentation could nearly always be summarized as “we did some simulations and showed that our new method works better than old methods under conditions that we have cleverly selected to be favorable for our approach.” I fervently hope that my own work is not as boring or predictable as my memory of these seminars.↩︎ "],["programming-preliminaries.html", "Chapter 2 Programming Preliminaries 2.1 Why R? 2.2 Welcome to the tidyverse 2.3 Functions 2.4 %&gt;% (Pipe) dreams 2.5 Recipes versus Patterns", " Chapter 2 Programming Preliminaries Our goal in this book is not only to introduce the conceptual principles of Monte Carlo simulation, but also to provide a practical guide to actually conducting simulation studies (whether for personal learning purposes or for formal methodological research). This will require writing computer code—lots of code! The computational principles and practices that we will describe are very general, not specific to any particular programming language, but for purposes of demonstrating, presenting examples, and practicing the process of developing a simulation, it helps to be specific. To that end, we will be using R, a popular programming language that is widely used among statisticians, quantitative methodologists, and data scientists. Our presentation will assume that readers are comfortable with writing R scripts to carry out tasks such as cleaning variables, summarizing data, creating data-based graphics, and running regression models (or more generally, estimating statistical models). In this chapter, we introduce some essential programming concepts that may be less familiar to readers, but which are central to how we approach programming simulation studies. We also explain some of the rationale and reasoning behind how we present example code throughout the book. 2.1 Why R? We have chosen to focus on R (rather than some other programming language) for designing and running simulations. The main reason for this is that we are both intimately familiar with R and use it extensively in our day-to-day work. Simply put, it’s much easier to write in your native language than in one in which you’re less fluent. But beyond our own habits and preferences, there are several more principled reasons for using R. R is free and open source software, which can be run under many different operating systems (Windows, Mac, Linux, etc.). This is advantageous not only because of the cost, but also because it means that anyone with a computer—anywhere in the world—can access the software and could, if they wanted, re-run our code for themselves. This makes R a good choice for practicing transparent and open science processes. There is a very large, active, and diverse community of people who use, teach, and develop R. It is used widely for applied data analysis and statistical work in such fields as education, psychology, economics, epidemiology, public health, and political science, and widely taught in quantitative methods and applied statistics courses. Integral to the appeal of R is that it includes tens of thousands of contributed packages, which extend the core functionality of the language in myriad ways. New statistical techniques are often made available in R, or can be accessed through R interfaces. Increasingly, R can also be used to interface with other languages and platforms, such as running Python code via the reticulate package, running Stan programs for Bayesian modeling via RStan, or calling the h2o machine learning library using h2o package (Fryda et al. 2014). The huge variety of statistical tools available in R makes it a fascinating place to learn and practice. R does have a persistent reputation as being a challenging and difficult language to use. This reputation might be partly attributable to its early roots, having been developed by highly technical statisticians who did not put great emphasis on accessibility, legibility of code, or ease of use. However, as the R community has grown, the availability of introductory documentation and learning materials has improved drastically, so that it is now much easier to access pedagogical materials and find help. R’s reputation also probably partly stems from being a decentralized, open source project with many, many contributors. Contributed R packages vary hugely in quality and depth of development; there are some amazingly powerful tools available but also much that is half-baked, poorly executed, or flat out wrong. Because there is no central oversight or quality control, the onus is on the user to critically evaluate the packages that they use. For newer users especially, we recommend focusing on more established and widely used packages, seeking input and feedback from more knowledgeable users, and taking time to validate functionality against other packages or software when possible. A final contributor to R’s intimidating reputation might be its extreme flexibility. As both a statistical analysis package and a fully functional programming language, R can do many things that other software packages cannot, but this also means that there are often many different ways to accomplish the same task. In light of this situation, it’s good to keep in mind that knowing a single way to do something is usually adequate—there’s no need to learn six different words for hello, when one is enough to start a conversation. On balance, we think that the many strengths of R make it worthwhile to learn and continue exploring. For simulation, in particular, R’s facility to easily write functions (bundles of commands that you can easily call in different manners), to work with multiple datasets in play at the same time, and to leverage the vast array of other people’s work all make it a very attractive language. 2.2 Welcome to the tidyverse Layered on top of R are a collection of contributed packages that make data wrangling and management much, much easier. This collection is called tidyverse and it includes popular packages such as dplyr, tidyr, and ggplot2. We use methods from the “tidyverse” throughout the book because it facilitates writing clean, concise code. In particular, we make heavy use of the dplyr package for group-wise data manipulation, the purrr package for functional programming, and the ggplot2 package for statistical graphics. The 1st edition and 2nd edition) of the free online textbook R for Data Science provide an excellent, thorough introduction to these packages and much more background on the tidyverse. We will cite portions of this text throughout the book. Loading the tidyverse packages is straightforward: library( tidyverse ) options(list(dplyr.summarise.inform = FALSE)) (The second line is to turn off some of the persistent warnings generated by the dplyr function summarize().) These lines of code appear in the header of nearly every script we use. 2.3 Functions If you are comfortable using R for data analysis tasks, you are likely familiar with many functions that do things like calculate a summary statistic from a list of numbers (e.g., mean(), median(), or sd()), calculate linear regression coefficient estimates from a dataset (lm()), or count the number of rows in a dataset (nrow()). In the abstract, a function is a little machine for transforming ingredients into outputs, like a microwave (put a bag of kernels in and it will return hot, crunchy popcorn) a cheese shredder (put a block of mozzarella in and it transforms it into topping for your pizza), or a washing machine (put in dirty clothes and detergent and it will return clean but damp clothes). A function takes in pieces of information specified by the user (the inputs), follows a set of instructions for transforming or summarizing those inputs, and then returns the result of the calculations (the outputs). R’s built-in functions implement all sorts of calculations, ranging from simple summary calculations to complex algorithms for fitting predictive models. A function can do nearly anything as long as the calculation can be expressed in code—it can even produce output that is random. For example, the rnorm() function takes as input a number n and returns that many random numbers, drawn from a standard normal distribution: rnorm(1) ## [1] -0.7027347 rnorm(4) ## [1] 0.2395787 0.8683946 0.9328410 -0.9253605 Each time the function is called, it returns a different set of numbers: rnorm(7) ## [1] 0.69709871 0.71023210 -0.21779443 ## [4] 0.05142941 0.82310478 -0.35363100 ## [7] 0.16057959 rnorm(7) ## [1] 1.4140201 -0.2326507 1.2104894 -0.2944870 ## [5] 0.4587769 1.7825872 0.1197367 The rnorm() function also has further input arguments that let the user specify the mean and standard deviation of the distribution from which numbers are drawn: rnorm(7, mean = 10, sd = 0.5) ## [1] 10.152906 9.212435 9.363750 9.824076 ## [5] 10.041955 10.356010 9.828463 2.3.1 Rolling your own In R, it is also possible to create your own function by specifying the pieces of input information, the steps to follow in transforming the inputs, and the result to return as output. Learning to write your own functions to carry out calculations is an immensely useful skill, which will greatly enhance your ability to accomplish a range of tasks in R. Writing custom functions is also central to our approach to coding Monte Carlo simulations, and so we highlight some of the key considerations here. Chapter 19 of R for Data Science (1st edition) provides an in-depth discussion of how to write your own functions. Here is an example of a custom function called one_run(): one_run &lt;- function( N, mn ) { vals &lt;- rnorm( N, mean = mn ) tt &lt;- t.test( vals ) pvalue &lt;- tt$p.value return(pvalue) } The first line specifies that we are creating a function that takes inputs N and mn. These are called parameters, inputs, or arguments of the function. The remaining lines inside the curly brackets are called the body of the function. These lines specify the instructions to follow in transforming the inputs into an output: Generate a random sample of N observations from a normal distribution with mean mn and store the result in vals. Use the built-in function t.test() to compute a one-sample t-test for the null hypothesis that the population mean is zero, then store the result in tt. Extract the p-value from the t-test store the result in pvalue. Return pvalue as output. Having created the function, we can then use it with any inputs that we like: one_run( 100, 5 ) ## [1] 1.542161e-72 one_run( 10, 0.3 ) ## [1] 0.02119527 one_run( 10, 0.3 ) ## [1] 0.5401032 In each case, the output of the function is a p-value from a simulated sample of data. The function produces a different answer each time because its instructions involve generating random numbers each time it is called. In essence, our custom function is just a short-cut for carrying out its instructions. Writing it saves us from having to repeatedly write or copy-paste the lines of code inside the body. 2.3.2 A dangerous function Writing custom functions will prove to be crucial for effectively implementing Monte Carlo simulations. However, designing custom functions does take practice to master. It also requires a degree of care above and beyond what is needed just to use R’s built-in functions. One of the common mistakes encountered in writing custom functions is to let the function depend on information that is not part of the input arguments. For example, consider the following script, which includes a nonsensical custom function called funky(): secret_ingredient &lt;- 3 funky &lt;- function(input1, input2, input3) { # do funky stuff ratio &lt;- input1 / (input2 + 4) funky_output &lt;- input3 * ratio + secret_ingredient return(funky_output) } funky(3, 2, 5) ## [1] 5.5 funky takes inputs input1, input2, and input3, but its instructions also depend on the quantity secret_ingredient. What happens if we change the value of secret_ingredient? secret_ingredient &lt;- 100 funky(3, 2, 5) ## [1] 102.5 Even though we give it the same arguments as previous, the output of the function is different. This sort of behavior is quite confusing. Unless the function involves generating random numbers, We would generally expect it to return the exact same output if we give it the same inputs. Even worse, we get a rather cryptic error if the value of secret_ingredient is not compatible with what the function expects: secret_ingredient &lt;- &quot;A&quot; funky(3, 2, 5) ## Error in input3 * ratio + secret_ingredient: non-numeric argument to binary operator If we are not careful, we will end up with very confusing code that can produce unintended results. To avoid this issue, it is important for functions to only use information that is explicitly provided to it through its arguments. This is the principle of isolating the inputs. If the result of a function is supposed to depend on a quantity, then we should include that quantity among the input arguments. We can fix our example function by including secret_ingredient as an argument: secret_ingredient &lt;- 3 funkier &lt;- function(input1, input2, input3, secret_ingredient) { # do funky stuff ratio &lt;- input1 / (input2 + 4) funky_output &lt;- input3 * ratio + secret_ingredient return(funky_output) } funkier(3, 2, 5, 3) ## [1] 5.5 Now the output of the function is always the same, regardless of the value of other objects in R: secret_ingredient &lt;- 100 funkier(3, 2, 5, 3) ## [1] 5.5 funkier(3, 2, 5, 100) ## [1] 102.5 When writing your own functions, it may not be obvious that your function depends on external quantities and does not isolate the inputs. In our experience, one of the best ways to detect this issue is to clear the R environment and start from a fresh palette, run the code to create the function, and call the function (perhaps more than once) to ensure that it works as expected. Here is an illustration of what happens when we follow this process with our problematic custom function: # clear environment rm(list=ls()) # create function funky &lt;- function(input1, input2, input3) { # do funky stuff ratio &lt;- input1 / (input2 + 4) funky_output &lt;- input3 * ratio + secret_ingredient return(funky_output) } # test the function funky(3, 2, 5) ## Error in funky(3, 2, 5): object &#39;secret_ingredient&#39; not found We get an error because the external quantity is not available. Here is the same process using our corrected function: # clear environment rm(list=ls()) # create function funkier &lt;- function(input1, input2, input3, secret_ingredient) { # do funky stuff ratio &lt;- input1 / (input2 + 4) funky_output &lt;- input3 * ratio + secret_ingredient return(funky_output) } # test the function funky(3, 2, 5, secret_ingredient = 3) ## Error in funky(3, 2, 5, secret_ingredient = 3): could not find function &quot;funky&quot; Later chapters will have much more to say about—and many further illustrations of—the process of writing custom functions. 2.3.3 Function skeletons In discussing how to write functions for simulations, we will often present function skeletons. By a skeleton, we mean code that creates a function with a specific set of input arguments, but where the body is left partially or fully unspecified. Here is a cursory example of a function skeleton: run_simulation &lt;- function( N, J, mu, sigma, tau ) { # simulate data # apply estimation procedure # repeat # summarize results return(results) } In subsequent chapters, we will use function skeletons to outline the organization of code for simulation studies. The skeleton headers make clear what the inputs to the function need to be. Sometimes, we will leave comments in the body of the skeleton to sketch out the general flow of calculations that need to happen. Depending on the details of the simulation, the specifics of these steps might be quite different, but the general structure will often be quite consistent. Finally, the last line of the skeleton indicates the value that should be returned as output of the function. Thus, skeletons are kind of like Mad Libs, but with R code instead of parts of speech. 2.4 %&gt;% (Pipe) dreams Many of the functions from tidyverse packages are designed to make it easy to use them in sequence via the %&gt;% symbol, or pipe, provided by the magrittr package. The pipe allows us to compose several functions, meaning to write a chain of several functions as a sequence, where the result of each function becomes the first input to the next function. In code written with the pipe, the order of function calls follows like a story book or cake recipe, making it easier to see what is happening at each step in the sequence. Consider the hypothetical functions f(), g(), and h(), and suppose we want to do a calculation that involves composing all three functions. One way to write this calculation is res1 &lt;- f(my_data, a = 4) res2 &lt;- g(res1, b = FALSE) result &lt;- h(res2, c = &quot;hot sauce&quot;) We have to store the result of each intermediate step in an object, and it takes a careful read of the code to see that we are using res1 as input to g() and res2 as input to h(). Alternately, we could try to write all the calculations as one line: result &lt;- h( g( f( my_data, a = 4 ), b = FALSE ), c = &quot;hot sauce&quot; ) This is a mess. It takes very careful parsing to see that the b argument is called as part of g() and the c argument is part of h()`, and the order in which the functions appear is not the same as the order in which they are calculated. With the pipe we can write the same calculation as result &lt;- my_data %&gt;% # initial dataset f(a = 4) %&gt;% # do f() to it g(b = FALSE) %&gt;% # then do g() h(c = &quot;hot sauce&quot;) # then do h() This addresses the all the issues with our previous attempts: the order in which the functions appear is the same as the order in which they are executed; the additional arguments are clearly associated with the relevant functions; and there is only a single object holding the results of the calculations. Pipes are a very nice technique for writing clear code that is easy for others to follow.2 2.5 Recipes versus Patterns As we will elaborate in subsequent chapters, we follow a modular approach to writing simulations, in which each component of the simulation is represented by its own custom function or its own object in R. This modular approach leads to code that always has the same broad structure and where the process of implementing the simulation follows a set sequence of steps. We start by coding a data-generating process, then write one or more data-analysis methods, then determine how to evaluate the performance of the methods, and finally implement an experimental design to examine the performance of the methods across multiple scenarios. Over the next several chapters, we will walk through this process several times. Although we always follow the same broad process, the case studies that we will present are not intended as a cookbook that must be rigidly followed. In our experience, the specific features of a data-generating model, estimator, or research question sometimes require tweaking the template or switching up how we implement some aspect of the simulation. And sometimes, it might just be a question of style or preference. Because of this, we have purposely constructed the examples presented throughout the book to use different variations of our central theme rather than always following the same style and structure. We hope that presenting these variants and adaptations will both expand your sense of what is possible and also help you to recognize the core design principles—in other words, to distinguish the forest from the trees. Of course, we would welcome and eoncourage you to take any of the code verbatim, tweak and adapt it for your own purposes, and use it however you see fit. After all, we know that adapting a good example is usually much easier than starting from a blank screen. References Fryda, Tomas, Erin LeDell, Navdeep Gill, Spencer Aiello, Anqi Fu, Arno Candel, Cliff Click, et al. 2014. “H2o: R Interface for the ’H2O’ Scalable Machine Learning Platform.” Comprehensive R Archive Network. https://doi.org/10.32614/CRAN.package.h2o. Chapter 18 of R for Data Science (1st edition) provides more discussion and examples of how to use %&gt;%.↩︎ "],["an-initial-simulation.html", "Chapter 3 An initial simulation 3.1 Simulating a single scenario 3.2 A non-normal population distribution 3.3 Simulating across different scenarios 3.4 Extending the simulation design 3.5 Exercises 3.6 Challenges", " Chapter 3 An initial simulation We will begin with a concrete example of a small simulation study. This example illustrates how simulation involves replicating the data-generating and data-analysis processes, followed by aggregating the results across replications. It thus encapsulates the entirety of Monte Carlo simulation, touching on all the main components involved. In subsequent chapters we will look at each of these components in greater detail, layering on further abstractions and complexity. But first, let’s look at a simulation of a very simple statistical problem. The one-sample \\(t\\)-test is one of the most basic methods in the statistics literature. It tests a null hypothesis that a population mean of some variable is equal to a specific value by comparing the hypothesized value to a sample average. If the sample average is discrepant (very different) from the null value, then the hypothesis is rejected. The test can also be used to generate a confidence interval for the population mean. If the sample consists of independent observations and the variable is normally distributed in the population, then the confidence interval will have exact coverage, in the sense that 95% intervals will include the population mean in 95 out of 100 tries. But what if the population variable is not normally distributed, but is instead a frequency count following a geometric distribution? In this example, we will look at the coverage of 95% confidence intervals for the population mean when the method’s normality assumption is violated. Coverage is the chance of a confidence interval capturing the true parameter value. To do this, we will simulate many samples from a non-normal population with a specified mean, calculate a confidence interval based on each sample, and see how many of the confidence intervals cover the population mean. Before getting to the simulation, let’s look at the data-analysis procedure we will be investigating. Here is the result of conducting a \\(t\\)-test on some fake data: # make fake data dat &lt;- rnorm( n = 10, mean = 4, sd = 2 ) # conduct the test tt &lt;- t.test( dat ) tt ## ## One Sample t-test ## ## data: dat ## t = 6.0878, df = 9, p-value = 0.0001819 ## alternative hypothesis: true mean is not equal to 0 ## 95 percent confidence interval: ## 2.164025 4.723248 ## sample estimates: ## mean of x ## 3.443636 # examine the confidence interval tt$conf.int ## [1] 2.164025 4.723248 ## attr(,&quot;conf.level&quot;) ## [1] 0.95 We generated data with a true(population) mean of 4. Did we capture it? To check, we can use the findInterval() function, which checks to see where the first number lies relative to the range given in the second argument. Here is an illustration of the syntax. findInterval( 1, c(20, 30) ) ## [1] 0 findInterval( 25, c(20, 30) ) ## [1] 1 findInterval( 40, c(20, 30) ) ## [1] 2 If findInterval() returns a 1, that means the confidence interval covers the population mean. findInterval( 4, tt$conf.int ) ## [1] 1 In this instance, findInterval() is equal to 1, which means we got it! Here is the full code for simulating data, computing the data-analysis procedure, and evaluating the result: # make fake data dat &lt;- rnorm( n = 10, mean = 4, sd = 2 ) # conduct the test tt &lt;- t.test( dat ) # evaluate the results tt$conf.int ## [1] 1.810723 5.157441 ## attr(,&quot;conf.level&quot;) ## [1] 0.95 findInterval( 4, tt$conf.int ) == 1 ## [1] TRUE This code captures the basic form of a single simulation trial: make the data, analyze the data, decide how well we did. Before jumping into coding a simulation, it is wise to understand the procedure we plan on simulating. Mucking around with one (fake) dataset has left us in good position to start formalizing the simulation. 3.1 Simulating a single scenario Now let’s look at coverage of the confidence interval by repeating the data-generating and data-analysis processes many, many times. R’s replicate() function is a handy way to repeatedly call a line of code. Its first input argument is n, the number of times to repeat the calculation, followed by expr, which is one or more lines of code to be called. We can use replicate to repeat our simulation process 1000 times in a row, each time generating a new sample of 10 observations from a normal distribution with mean of 4 and a standard deviation of 2. For each replication, we store the result of using findInterval() to check whether the confidence interval includes the population mean of 4. rps &lt;- replicate( 1000, { dat &lt;- rnorm( n = 10, mean = 4, sd = 2 ) tt &lt;- t.test( dat ) findInterval( 4, tt$conf.int ) }) head(rps, 20) ## [1] 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 To see how well we did, we can look at a table of the results stored in rps and calculate the proportion of replications that the interval covered the population mean: table( rps ) ## rps ## 0 1 2 ## 27 957 16 mean( rps == 1 ) ## [1] 0.957 We got about 95% coverage, which is good news. In 27 out of the 1000 replications, the interval was too high (so the population mean was below the interval) and in 16 out of the 1000 replications, the interval was too low (so the population mean was above the interval). It is important to recognize that this set of simulations results, and our coverage rate of 95.7%, itself has some uncertainty in it. Because we only repeated the simulation 1000 times, what we really have is a sample of 1000 independent replications, out of an infinite number of possible simulation runs. This source of uncertainty is called Monte Carlo error. We can assess the Monte Carlo error in our simulation results using standard statistical procedures for independent and identically distributed data. Here we use a proportion test to check whether the estimated coverage rate is consistent with a true coverage rate of 95%: covered &lt;- as.numeric( rps == 1 ) prop.test( sum(covered), length(covered), p = 0.95 ) ## ## 1-sample proportions test with continuity ## correction ## ## data: sum(covered) out of length(covered), null probability 0.95 ## X-squared = 0.88947, df = 1, p-value = ## 0.3456 ## alternative hypothesis: true p is not equal to 0.95 ## 95 percent confidence interval: ## 0.9420144 0.9683505 ## sample estimates: ## p ## 0.957 The test indicates that our estimate is consistent with the possibility that the true coverage rate is 95%, just as it should be. Things working out should hardly be surprising. Mathematical theory tells us that the \\(t\\)-test is exact for normally distributed population variables, and we generated data from a normal distribution. In other words, all we have found is that the confidence intervals follow theory when the assumptions of the method are met. 3.2 A non-normal population distribution Now let’s look at a scenario where the population variable follows a geometric distribution to see what happens when the normality assumption is violated. The geometric distribution is usually written in terms of a probability parameter \\(p\\), so that the distribution has a mean of \\((1 - p) / p\\). We will use a geometric distribution with a mean of 4 by setting \\(p = 1/5\\). Here is the population distribution of the variable: The distribution is highly right-skewed, which suggests that the normal confidence interval might not work very well. Now let’s revise our previous simulation code to use the geometric distribution: rps &lt;- replicate( 1000, { dat &lt;- rgeom( n = 10, prob = 1/5) tt &lt;- t.test( dat ) findInterval( 4, tt$conf.int ) }) table( rps ) ## rps ## 0 1 2 ## 8 892 100 Our confidence interval is often entirely too low (such that the population mean is above the interval) and very rarely does our interval fall fully above the population mean. Furthermore, our coverage rate is not 95% as it should be: mean( rps == 1 ) ## [1] 0.892 To take account of Monte Carlo error, we will again do a proportion test. The following test result calculates a confidence interval for the true coverage rate under the scenario we are examining: covered &lt;- as.numeric( rps == 1 ) prop.test( sum(covered), length(covered), p = 0.95) ## ## 1-sample proportions test with continuity ## correction ## ## data: sum(covered) out of length(covered), null probability 0.95 ## X-squared = 69.605, df = 1, p-value &lt; ## 2.2e-16 ## alternative hypothesis: true p is not equal to 0.95 ## 95 percent confidence interval: ## 0.8707042 0.9102180 ## sample estimates: ## p ## 0.892 Our coverage is too low; the confidence interval based on the \\(t\\)-test misses the the true value more often than it should. 3.3 Simulating across different scenarios So far, we have looked at coverage rates of the confidence interval under a single, specific scenario, with a sample size of 10, a population mean of 4, and a geometrically distributed variable. We know from statistical theory (specifically, the central limit theorem) that the confidence interval should work better if the sample size is big enough. But how big does it have to get? One way to examine this question is to expand the simulation to look at several different scenarios involving different sample sizes. We can think of this as a one-factor experiment, where we manipulate sample size and use simulation to estimate how confidence interval coverage rates change. To implement such an experiment, we will write our own function that executes the full simulation process: ttest_CI_experiment = function( n ) { rps &lt;- replicate( 1000, { dat &lt;- rgeom( n = n, prob = 1/5) # simulate data tt &lt;- t.test( dat ) # analyze data findInterval( 4, tt$conf.int ) # evaluate coverage }) coverage &lt;- mean( rps == 1 ) # summarize results return(coverage) } The code inside the body of the function is identical to what we’ve used above, but we’ve turned the sample size into a function argument, called n, because we want to be able to run the code for several different sample sizes. With our function in hand, we can now run the simulation for a single scenario just by calling it: ttest_CI_experiment(n = 10) ## [1] 0.885 Even though the sample size is still n = 10, the simulated coverage rate is a little bit different from what we found previously. That’s because there’s some Monte Carlo error in each simulated coverage rate. Our task is now to use this function for several different values of \\(n\\). We could just do this by copy-pasting and changing the value of n: ttest_CI_experiment(n = 10) ## [1] 0.922 ttest_CI_experiment(n = 20) ## [1] 0.91 ttest_CI_experiment(n = 30) ## [1] 0.914 However, this will quickly get cumbersome if we want to evaluate many different sample sizes. A better approach is to use a mapping function from the purrr package.3 The map_dbl() function takes a list of values and calls a function for each value in the list.4 This accomplishes the same thing as using a for loop to iterate through a list of items, but is more succinct. We’ll first create a list of sample sizes to test out: ns &lt;- c(10, 20, 30, 40, 60, 80, 100, 120, 140, 160, 180, 200) Now we can use map_dbl() to evaluate the coverage rate for each sample size: coverage_est &lt;- map_dbl( ns, ttest_CI_experiment) It’s helpful to depict simulation results graphically. To do so, we will store the simulation results in a dataset and then create a line plot using a log scale for the horizontal axis: res &lt;- data.frame( n = ns, coverage = 100 * coverage_est ) ggplot( res, aes( x = n, y = coverage ) ) + geom_hline( yintercept=95, col=&quot;red&quot; ) + # reference line for nominal coverage rate geom_line() + geom_point( size = 4 ) + scale_x_log10( breaks = ns, minor_breaks = NULL) + labs( title=&quot;Coverage rates for t-test on exponential data&quot;, x = &quot;n (sample size)&quot;, y = &quot;coverage (%)&quot; ) + coord_cartesian(xlim = c(9,240), ylim=c(85,100), expand = FALSE) + theme_minimal() We can see from the graph that the confidence interval’s coverage rate improves as sample size gets larger. For sample sizes over 100, the interval appears to have coverage quite close to the nominal 95% level. Although the general trend is pretty clear, the graph is still a bit messy because each point is an estimated coverage rate, with some Monte Carlo error baked in. 3.4 Extending the simulation design So far, we have executed a simple simulation to assess how well a statistical method works in a given circumstance, then expanded the simulation by running a single-factor experiment in which we varied the sample size to see how the method’s performance changes. In our example, we found that coverage is below what it should be for small sample sizes, but improves for sample sizes in the 100’s. This example captures all the major steps of a simulation study, which we outlined at the start of Chapter 1. We generated some hypothetical data according to a fully-specified data-generating process: either a normal distribution or a geometric distribution with a mean of 4. We applied a defined data-analysis procedure to the simulated data: a confidence interval based on the \\(t\\) distribution. We assessed how well the procedure worked across replications of the data-generating and data-analysis processes, in this case focusing on the coverage rate of the confidence interval. After creating a function to implement this whole process for a single scenario, we investigated how the performance of the confidence interval changed depending on sample size. In simulations of more complex models and data-analysis methods, some or all of the steps in the process might have more moving pieces or entail more complex calculations. For instance, in the confidence interval simulation, we might want to compare the performance of several different approaches to calculating a confidence interval. We might also want to examine how coverage rates are affected by other aspects of the data-generating process, such as looking at different population mean values for the geometric distribution—or even entirely different distributions. With such additional layers of complexity, we will need to think systematically about each of the component parts of the simulation. In the next chapter, we introduce an abstract, general framework for simulations that is helpful for guiding simulation design and managing all the considerations involved. 3.5 Exercises The simulation function we developed in this chapter uses 1000 replications of the data-generating and data-analysis process, which leads to some Monte Carlo error in the simulation results. Modify the ttest_CI_experiment() function to make the number of replications an input argument, then re-run the simulation and re-create the graph of the results. What do your results indicate about when sample size is large enough to obtain nominal coverage? Repeat the one-factor simulation, but using \\(p = 1/10\\) so that the population mean is \\((1 - p) / p = 9\\). How do the coverage rates change? Modify the ttest_CI_experiment() function so that it returns a data.frame with the estimated coverage rate and the lower and upper end-points of a 95% confidence interval for the true coverage rate (you can use prop.test() to obtain this). Re-run the simulations with the modified function and create a graph that depicts the coverage rates and the 95% confidence intervals. (Hint: use the ggplot2 function geom_pointrange() to represent the confidence intervals.) 3.6 Challenges Here is a modified version of the ttest_CI_experiment() function that creates a data frame with lower and upper end-points of the simulated confidence intervals: lotsa_CIs_experiment = function( n ) { lotsa_CIs &lt;- replicate( 1000, { dat &lt;- rgeom( n = n, prob = 1/5) # simulate data tt &lt;- t.test( dat ) # analyze data data.frame(lower = tt$conf.int[1], upper = tt.conf.int[2]) # return CI }) # summarize results # &lt;fill in the rest&gt; return(coverage) } Complete the function by writing code to compute the estimated coverage rate and a 95% confidence interval for the true coverage rate. Modify ttest_CI_experiment() or lotsa_CIs_experiment() so that the user can specify the population mean of the data-generating process. Also let the user specify the number of replications to use. Here is a function skeleton to use as a starting point: ttest_CI_experiment &lt;- function( n, pop_mean, reps) { pop_prob &lt;- 1 / (pop_mean + 1) # &lt;fill in the rest&gt; return(coverage) } Using the modified function from the previous problem, implement a two-factor simulation study for several different values of n and several different population means. Alternately, readers familiar with the *apply() family of functions from Base R might prefer to use lapply() or sapply(), which do essentially the same thing as purrr::map_dbl().↩︎ Section 21.5 of R for Data Science (1st edition) provides an introduction to mapping.↩︎ "],["structure-of-a-simulation-study.html", "Chapter 4 Structure of a simulation study 4.1 General structure of a simulation 4.2 Tidy simulations 4.3 Multiple Scenarios", " Chapter 4 Structure of a simulation study In the prior chapter we saw a simple simulation evaluation of a \\(t\\)-test. We next break that simulation down into components, and then in the subsequent chapters we dig into how to think about each component. When writing simulations in our methodological work, we try to always follow the same workflow that we outline below. We make no claim that this is the only or best way to do things, but it does work for us, and we, at least, like it! 4.1 General structure of a simulation The easiest way to compare two estimation procedures is to generate some data from scratch, generating it in such a way that we know what the “right answer” is, and then to analyze our data using the procedures we wish to study. For each dataset we generate, we can write down how close the each procedure got to the right answer, whether they ended up with an answer that was too high or too low, and so forth. If our procedures include a hypothesis test against some hypothetical null, we can write down whether we rejected or did not reject this null. If we do this once, we have some idea of whether the estimators worked in that specific example, but we do not know if this is due to random chance. To assess general trends, therefore, we repeat this process over and over, keeping track of how well our estimators did each time. We finally aggregate our results, and see if one estimator systematically outperformed the other. But that is not quite enough: we might learn, by doing this, that estimator \\(A\\) is better than estimator \\(B\\) in the one context we have just simulated, but we will not know if it is generally superior. To assess superiority more broadly, we could generate data from a variety of different scenarios, seeing if our estimator is systematically winning across simulation contexts. If we do this in a a structured and thoughtful manner, we can eventually make claims as to the behaviors of our estimators that we are investigating. This is the heart of simulation for methodological evaluation. A simulation study can be thought of as something like a controlled scientific experiment: we want to understand the properties of our estimators, so we test them in a variety of different scenarios to see how they perform. Found general trends across these scenarios help us understand general patterns of behavior. Table 4.1: Steps in the Simulation Process Step Description 1 Generate Generate a sample of data based on a specified statistical model/process. 2 Analyze Analyze data using one or more procedures/workflows. 3 Repeat Repeat steps (1) &amp; (2) \\(R\\) times, recording \\(R\\) sets of results. 4 Summarize Assess the performance of the procedure across our \\(R\\) repetitions. As we saw in our initial example, we can break the the logic of simulation for a specific and specified scenario down into the four steps outlined on Table 4.1. We will then repeat this evaluation across different scenarios, so we can see how performance changes as we chance circumstance. But first, we just focus on a single scenario. 4.2 Tidy simulations We advocate for writing tidy simulations, meaning we keep all the components of a simulation separate, and tend to store all results and intermediate results as data frames (rectangular data sets). The main way to keep things tidy is to follow a modular approach, in which each component of the simulation is implemented as a separate function (or potentially a set of several functions). Writing separate functions for the different components of the simulation makes the code easier to read, test, and debug. Furthermore, it makes it possible to swap components of the simulation in or out, such as by adding additional estimation methods or trying out a data-generating model that involves different distributional assumptions. In particular, we write separate functions for each of the steps given in Table 4.1. We first write code to run a specific simulation for a specific scenario. Once that is working, we re-use the code to systematically explore a variety of scenarios so we can see how things change as scenario changes. In code, we can start with the skeletons of: # Generate generate_data &lt;- function( params ) { # stuff } # Analyze analyze &lt;- function( data ) { # stuff } # Repeat one_run &lt;- function( params ) { dat &lt;- generate_data( params ) analyze(dat) } results &lt;- map_df(1:R, ~ one_run( params )) # Summarize assess_performance &lt;- function( results ) { # stuff } We next briefly describe each piece of the above. The following four chapters then dig into each piece in more detail. 4.2.1 The Data Generating Process (DGP) The data-generating process takes a set of parameter values as input and generates a set of simulated data as output. When we generate data, we control the ground truth! Generating our own data allows us to know what the answer is (e.g., what the real treatment effect is), so we can later know if our methods are doing the right thing. 4.2.2 Estimation procedures The estimation procedures are the statistical procedures under examination. For example, an estimation procedure might be to estimate the average growth rate along with a standard error. Or it might be to conduct a hypothesis test, like we saw earlier. Each estimation procedure we examine should take a dataset and produce a set of estimates or results (e.g., point estimates, standard errors, confidence intervals, p-values, etc.). You often will have different functions for each estimation procedure you are investigating. A well written estimation methods should, in principle, work on real data as well as simulated data; the more we can “black box” our methods into a single function call, the easier it will be to separate out the structure of the simulation from the complexity of the methods being evaluated. 4.2.3 Repetition There are a variety of ways in R to do something over and over. Using map(), as above, might look a bit strange with the ~, but it is currently the most straightforward within the tidyverse. Later on, we will illustrate how to use the simhelpers package to do this step automatically. Making a helper method such as one_run() makes debugging our simulations a lot, lot easier. The one_run() method is like a coordinator or dispatcher of our system: it generates the data, calls all the evaluation methods we want to call, combines all the results, and hands them back for recording. Each iteration of one_run() returns a small data frame of results. We then stack all these returned results into one large dataframe of simulation results to ready it for the next step, which is assessing performance. 4.2.4 Performance summaries Performance summaries are the metrics used to assess the performance of a statistical method. Interest usually centers on understanding the performance of a method over repeated samples from a data-generating process. For example, we might want to know how close our estimator gets to the target parameter, on average. Or we might want to know if a confidence interval captures the truth the right proportion of the time. To estimate these quantities we repeat steps 2 and 3 many times to get a large number of simulated estimates. We then summarize the distribution of the estimates to characterize performance of a method. We generally want our analysis method to give a dataframe back because we are going to eventually stack the results up across different scenarios to make one long dataframe of results. Happily the dplyr package generally gives us dataframes so this will not usually be a problem. But each step of the way, we will be generating data frames to keep things tidy. 4.2.5 Why the tidy approach? To repeat, the tidy approach we propose has several advantages: Easier to check &amp; debug. Easier to modify your code. Easier to make everything run fast. Facilitates creative re-use. To make things even easier, the simhelpers package will build skeletons for each component (along with some other useful code to wire the pieces together) via the create_skeleton() method. simhelpers::create_skeleton() The create_skeleton() function will open up a new R script for you that contains a template for a simulation study, with sections corresponding to each component. Starting with this, you will already be well on the road to writing a tidy simulation. 4.3 Multiple Scenarios We have walked through, at a high level, a modular approach to run a simulation for a single context. In our \\(t\\)-test case study, for example, we might ask how well the \\(t\\)-test works when we have \\(n=100\\) units and an exponential distribution to our data. But we rarely want to examine a single context, but instead want to explore how well a procedure works across a range of contexts. To do this, we again use the principles of modular coding: we take all our above code for a single scenario and wrap that in a function. Once we are sure that function works correctly, we can then call it for all the scenarios we wish. A multiple-scenario simulation is a type of designed experiment, in which factors such as sample size and true parameter values are systematically varied. In fact, simulation studies typically follow a full factorial design, in which each level of a factor (something we vary, such as sample size, true treatment effect, or residual variance) is crossed with every other level. The experimental design then consists of sets of parameter values (including design parameters, such as sample sizes) that will be considered as possible elements that can impact our estimation procedures performances. We will discuss multiple-scenario simulations in Part III (starting with Chapter 12, after we more fully develop the core concepts listed above. "],["case-ANOVA.html", "Chapter 5 Case Study: Heteroskedastic ANOVA 5.1 The data-generating model 5.2 The estimation procedures 5.3 Running the simulation 5.4 Analyzing the Simulation 5.5 Exercises", " Chapter 5 Case Study: Heteroskedastic ANOVA To illustrate the process of programming a simulation, we reconstruct the simulations from Brown and Forsythe (1974). We also use this case study as a reoccuring example in some of the following chapters. Brown and Forsythe wanted to study methods for null hypothesis testing in the following model: Consider a population consisting of \\(g\\) separate groups, with population means \\(\\mu_1,...,\\mu_g\\) and population variances \\(\\sigma_1^2,...,\\sigma_g^2\\) for some characteristic \\(X\\). We obtain samples of size \\(n_1,...,n_g\\) from each of the groups, and take measurements of the characteristic for each sampled unit. Let \\(x_{ij}\\) denote the measurement from unit \\(i\\) in group \\(j\\), for \\(i = 1,...,n_j\\) for each \\(j = 1,..., g\\). Our goal is to use the sample data to test the hypothesis that the population means are all equal, i.e., \\[ H_0: \\mu_1 = \\mu_2 = \\cdots = \\mu_g. \\] Now, if the population variances were all equal (i.e., \\(\\sigma_1^2 = \\sigma_2^2 = \\cdots = \\sigma_g^2\\)), we could use a conventional one-way analysis of variance (ANOVA) to test. However, one-way ANOVA might not work well if the variances are not equal. The question is then what are best practices for testing, when in this heteroskedastic case. To tackle this question, Brown and Forsythe evaluated two different hypothesis testing procedures, developed by James (1951) and Welch (1951), that had been proposed for testing this hypothesis without assuming equality of variances, along with the conventional one-way ANOVA F-test as a benchmark. They also proposed and evaluated a new procedure of their own devising. (This latter pieces makes this paper one of a canonical format for statistical methodology papers: find some problem that current procedures do not perfectly solve, invent something to do a better job, and then do simulation and/or math to build a case that the new procedure is better.) Overall, the simulation involves comparing the performance of these different hypothesis testing procedures (the methods) under a range of conditions (different data generating processes). For hypothesis testing, there are two main performance metrics of interest: type-I error rate and power. The type-I error rate is, when the null hypothesis is true, how often a test falsely rejects the null. It is a measure of how valid a method is. Power is how often a test correctly rejects the null when it is indeed false. It is a measure of how powerful (or sensitive) a method is. The authors explored error rates and power for nominal \\(\\alpha\\)-levels of 1%, 5%, and 10%. Table 1 of their paper reports the simulation results for type-I error (labeled as “size”); ideally, a test should have true type-I error very close to the nominal \\(\\alpha\\). They looked at ten different scenarios: Table 5.1: Scenarios explored by Brown and Forsythe from their Table 1 Groups Sample Sizes Standard Deviations 4 4,4,4,4 1,1,1,1 4 4,8,10,12 1,2,2,3 4 11,11,11,11 1,1,1,1 4 11,16,16,21 1,2,2,3 6 4,4,4,4,4,4 1,1,1,1,1,1 6 4,6,6,8,10,12 1,2,2,3 6 6,6,6,6,6,6 1,1,1,1,1,1 6 11,11,11,11,11,11 1,1,1,1,1,1 6 16,16,16,16,16,16 1,2,2,3 6 21,21,21,21,21,21 1,2,2,3 10 20,20,20,20,20,20,20,20,20,20 1,1,1.5,1.5,2,2,2.5,2.5,3,3 We also provide some of the numbers they reported in their Table 1 for these scenarios on Table 5.2. Table 5.2: Portion of “Table 1,” reproduced from Brown and Forsythe group F_10% F_5% F_1% F*_10% F*_5% F*_1% W_10% W_5% W_1% 1 10.2 4.9 0.9 7.8 3.4 0.5 9.6 4.5 0.8 2 12.0 6.7 1.7 8.9 4.1 0.7 10.3 4.7 0.8 3 9.9 5.1 1.1 9.5 4.8 1.0 10.8 5.7 1.6 4 5.9 3.0 0.6 10.3 5.7 1.4 9.8 4.9 0.9 5 21.9 14.4 5.6 11.0 6.2 1.8 11.3 6.5 2.0 6 10.1 5.1 1.0 9.8 5.7 1.5 10.0 5.0 0.9 7 11.4 6.3 1.8 10.7 5.7 1.5 10.1 5.0 1.1 8 10.3 4.9 1.1 10.3 5.1 1.0 10.2 5.0 1.0 9 17.3 10.8 3.9 11.1 6.2 1.8 10.5 5.5 1.2 10 7.3 4.0 1.0 11.5 6.5 1.8 10.6 5.4 1.1 11 9.6 4.9 1.0 7.3 3.4 0.4 11.4 6.1 1.4 Table 5.2 reports results on power; it is desirable to have higher power to reject null hypotheses that are false, so higher rates are better here. To replicate this simulation we are going to first write code to evaluate our three procedures in a specific scenario with a specific set of core parameters (e.g., sample sizes, number of groups, and so forth), and then scale up to do a range of scenarios where we vary these parameters. 5.1 The data-generating model In the heteroskedastic one-way ANOVA simulation, there are three sets of parameter values: population means, population variances, and sample sizes. Rather than attempting to write a general data-generating function immediately, it is often easier to write code for a specific case first and then use that code as a launch point for the rest. For example, say that we have four groups with means of 1, 2, 5, 6; variances of 3, 2, 5, 1; and sample sizes of 3, 6, 2, 4: mu &lt;- c(1, 2, 5, 6) sigma_sq &lt;- c(3, 2, 5, 1) sample_size &lt;- c(3, 6, 2, 4) Following Brown and Forsythe, we’ll assume that the measurements are normally distributed within each sub-group of the population. The following code generates a vector of group id’s and a vector of simulated measurements: N &lt;- sum(sample_size) # total sample size g &lt;- length(sample_size) # number of groups # group id group &lt;- rep(1:g, times = sample_size) # mean for each unit of the sample mu_long &lt;- rep(mu, times = sample_size) # sd for each unit of the sample sigma_long &lt;- rep(sqrt(sigma_sq), times = sample_size) # See what we have? tibble( group=group, mu=mu_long, sigma=sigma_long) ## # A tibble: 15 × 3 ## group mu sigma ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 1.73 ## 2 1 1 1.73 ## 3 1 1 1.73 ## 4 2 2 1.41 ## 5 2 2 1.41 ## 6 2 2 1.41 ## 7 2 2 1.41 ## 8 2 2 1.41 ## 9 2 2 1.41 ## 10 3 5 2.24 ## 11 3 5 2.24 ## 12 4 6 1 ## 13 4 6 1 ## 14 4 6 1 ## 15 4 6 1 # Now make our data x &lt;- rnorm(N, mean = mu_long, sd = sigma_long) tibble(group = group, x = x) ## # A tibble: 15 × 2 ## group x ## &lt;int&gt; &lt;dbl&gt; ## 1 1 0.130 ## 2 1 4.22 ## 3 1 -0.504 ## 4 2 1.70 ## 5 2 -0.112 ## 6 2 1.27 ## 7 2 1.05 ## 8 2 2.92 ## 9 2 2.14 ## 10 3 2.88 ## 11 3 6.22 ## 12 4 4.53 ## 13 4 5.98 ## 14 4 6.55 ## 15 4 6.67 We have made a small dataset of group membership and outcome. We note that there are many different and legitimate ways of doing this in R. E.g., we could generate each group separately, and then stack our groups, instead of using rep to do it all at once. In general, we advocate the adage that if you can do it at all, then you should feel good about yourself. Do not worry about writing code the “best” way when you are initially putting a simulation together. To continue, as we are going to generate data over and over, we wrap this code in a function. We also make our means, variances and sample sizes be parameters of our function so we can make datasets of different sizes and shapes, like so: generate_data &lt;- function(mu, sigma_sq, sample_size) { N &lt;- sum(sample_size) g &lt;- length(sample_size) group &lt;- rep(1:g, times = sample_size) mu_long &lt;- rep(mu, times = sample_size) sigma_long &lt;- rep(sqrt(sigma_sq), times = sample_size) x &lt;- rnorm(N, mean = mu_long, sd = sigma_long) sim_data &lt;- tibble(group = group, x = x) return(sim_data) } The above code is simply the code we built previously, all bundled up. Our workflow is to scrabble around to get it to work once, the way we want, and then bundle up our final work into a function for later reuse. Given our method, we can easily call our function to get a new set of simulated data. For example, to generate a dataset with the same parameters as before, we can do: sim_data &lt;- generate_data(mu = mu, sigma_sq = sigma_sq, sample_size = sample_size) To generate one with 0s for the averages of each group, but the same group variances and sample sizes as before, we can do: sim_data_null &lt;- generate_data( mu = c( 0, 0, 0, 0 ), sigma_sq = sigma_sq, sample_size = sample_size) 5.1.1 Coding remark In the above, we built some sample code, and then bundled it into a function by literally cutting and pasting the initial work we did into a function skeleton. In the process, we shifted from having variables in our workspace with different names to using those variable names as parameters in our function call. Developing code in this way is not without hazards. In particular, after finishing making our function, our workspace has a variable mu in it and our function also has a parameter named mu. Inside the function, R will use the parameter mu first, but this is potentially confusing. As are, potentially, lines such as mu = mu, which means “set the function’s parameter called mu to the variable called mu.” These are different things (with the same name). One way to check your code, once a function is built, is to comment out the initial code (or delete it), restart R or at least clear out the workspace, and then re-run the code that uses the function. If things still work, then you should be somewhat confident you successfully bundled your code into the function. You can also, once you bundle your code, do a search and replace to change variable names in your function to something more generic, to make the separation more clear. 5.2 The estimation procedures Brown and Forsythe considered four different hypothesis testing procedures for heteroskedastic ANOVA. We start with the simplest one, which is just to use a conventional one-way ANOVA (while mistakenly assuming homoskedasticity). R’s oneway.test function will actually calculate this test automatically: sim_data &lt;- generate_data(mu = mu, sigma_sq = sigma_sq, sample_size = sample_size) oneway.test(x ~ factor(group), data = sim_data, var.equal = TRUE) ## ## One-way analysis of means ## ## data: x and factor(group) ## F = 11.481, num df = 3, denom df = 11, ## p-value = 0.001029 The main result we need here is the \\(p\\)-value, which will let us assess the test’s Type-I error and power for a given nominal \\(\\alpha\\)-level. The following function takes simulated data as input and returns as output the \\(p\\)-value from a one-way ANOVA: ANOVA_F_aov &lt;- function(sim_data) { oneway_anova &lt;- oneway.test(x ~ factor(group), data = sim_data, var.equal = TRUE) return(oneway_anova$p.value) } ANOVA_F_aov(sim_data) ## [1] 0.001028701 We might instead write the code to implement the ANOVA test ourselves. This has some plusses (e.g., oneway.test maybe is doing a lot of other stuff which could take time and slow down our simulation) and minuses (e..g, writing our own code takes our time, and it gives us lots of room to make mistakes and thus make life hard on ourself). For further discussion of the trade-offs, see Chapter 17, where we do implement it by hand and see what kind of speed-ups we can obtain by doing that. We next implement the Welch test, another one of the tests considered by Brown and Forsythe. Here is a function that calculates the Welch test by hand, again following the notation and formulas from the paper: Welch_F &lt;- function(sim_data) { stats &lt;- sim_data %&gt;% group_by( group ) %&gt;% summarise( x_bar = mean( x ), s_sq = var( x ), n = n() ) g = nrow( stats ) stats &lt;- mutate( stats, w = n / s_sq ) res &lt;- stats %&gt;% summarise( u = sum(w), x_tilde = sum( w * x_bar ) / u, msbtw = sum( w * (x_bar - x_tilde)^2 ) / (g - 1), G = sum( (1 - w / u)^2 / (n - 1) ), denom = 1 + G * 2 * (g - 2) / (g^2 - 1), W = msbtw / denom, f = (g^2 - 1) / (3 * G) ) pval &lt;- pf(res$W, df1 = g - 1, df2 = res$f, lower.tail = FALSE) return(pval) } Welch_F(sim_data) ## [1] 0.02256937 Our estimation function does not care if the data are simulated or not–we call the parameter data not sim_data to reflect this. Eventually, we might imagine using this function on our real data! Also, we can put a lot of complex stuff in a function–and then forget all about it. In the above, for example, you can understand everything we say about writing simulations even if you do not understand anything at all about what this function is doing: it is just a black box that takes data and returns a \\(p\\)-value. 5.3 Running the simulation We now have functions that implement steps 2 and 3 of the simulation. Given some parameters, generate_data produces a simulated dataset and ANOVA_F_aov and Welch_F use the simulated data to calculate \\(p\\)-values two different ways. We now want to know which way is better, and how. To answer this question, we next need to repeat this chain of calculations a bunch of times. We first make a function that puts our chain together in a single method. This method is also responsible for putting the results together in a tidy structure that is easy to aggregate and analyze. one_run = function( mu, sigma_sq, sample_size ) { sim_data &lt;- generate_data(mu = mu, sigma_sq = sigma_sq, sample_size = sample_size) anova_p &lt;- ANOVA_F_aov(sim_data) Welch_p &lt;- Welch_F(sim_data) tibble(ANOVA = anova_p, Welch = Welch_p) } one_run( mu = mu, sigma_sq = sigma_sq, sample_size = sample_size ) ## # A tibble: 1 × 2 ## ANOVA Welch ## &lt;dbl&gt; &lt;dbl&gt; ## 1 0.0000530 0.000568 A single simulation trial simply does steps 2 and 3, ending with a nice dataframe or tibble that has our results for that single run. We next call one_run() over and over; see 25.1 for some discussion of options. The following uses map_df to run one_run() 4 times and then stack the results into a single data frame (the _df tells R to do the stacking): sim_data &lt;- map_df(1:4, ~ one_run(mu = mu, sigma_sq = sigma_sq, sample_size = sample_size) ) sim_data ## # A tibble: 4 × 2 ## ANOVA Welch ## &lt;dbl&gt; &lt;dbl&gt; ## 1 0.00141 0.0321 ## 2 0.00143 0.0587 ## 3 0.00000282 0.000567 ## 4 0.00924 0.0855 Voila! We have simulated \\(p\\)-values! 5.4 Analyzing the Simulation We now have all the pieces in place to reproduce the results from Brown and Forsythe (1974). We first focus on calculating the actual type-I error rate of these tests—that is, the proportion of the time that they reject the null hypothesis of equal means when that null is actually true—for an \\(\\alpha\\)-level of .05. We therefore need to simulate data according to process where the population means are indeed all equal. Arbitrarily, we start with \\(g = 4\\) groups and set all of the means equal to zero: mu &lt;- rep(0, 4) In the fifth row of Table 1, Brown and Forsythe examine performance for the following parameter values for sample size and population variance: sample_size &lt;- c(4, 8, 10, 12) sigma_sq &lt;- c(3, 2, 2, 1)^2 With these parameter values, we can use our replicate code to simulate 10,000 \\(p\\)-values: p_vals &lt;- rerun(10000, sim_data &lt;- one_run(mu = mu, sigma_sq = sigma_sq, sample_size = sample_size) ) ## Warning: `rerun()` was deprecated in purrr 1.0.0. ## ℹ Please use `map()` instead. ## # Previously ## rerun(10000, sim_data &lt;- one_run(mu = mu, ## sigma_sq = sigma_sq, sample_size = sample_size)) ## ## # Now ## map(1:10000, ~ sim_data &lt;- one_run(mu = mu, ## sigma_sq = sigma_sq, sample_size = sample_size)) ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to ## see where this warning was generated. p_vals &lt;- bind_rows(p_vals) p_vals ## # A tibble: 10,000 × 2 ## ANOVA Welch ## &lt;dbl&gt; &lt;dbl&gt; ## 1 0.276 0.512 ## 2 0.503 0.649 ## 3 0.438 0.693 ## 4 0.781 0.898 ## 5 0.764 0.779 ## 6 0.153 0.383 ## 7 0.942 0.921 ## 8 0.640 0.845 ## 9 0.0978 0.174 ## 10 0.724 0.820 ## # ℹ 9,990 more rows We next use our replications to calculate the rejection rates. The rule is that the null is rejected if the \\(p\\)-value is less than \\(\\alpha\\). To get the rejection rate, calculate the proportion of replications where the null is rejected. sum(p_vals$ANOVA &lt; 0.05) / 10000 ## [1] 0.1357 This is equivalent to taking the mean of the logical conditions: mean(p_vals$ANOVA &lt; 0.05) ## [1] 0.1357 We get a rejection rate that is much larger than \\(\\alpha = .05\\). We have learned that the ANOVA F-test does not adequately control Type-I error under this set of conditions. mean(p_vals$Welch &lt; 0.05) ## [1] 0.063 The Welch test does much better, although it appears to be a little bit in excess of 0.05. Note that these two numbers are quite close (though not quite identical) to the corresponding entries in Table 1 of Brown and Forsythe (1974). The difference is due to the fact that both Table 1 and are results are actually estimated rejection rates, because we have not actually simulated an infinite number of replications. The estimation error arising from using a finite number of replications is called simulation error (or Monte Carlo error). Later on, we will look more at how to estimate and control the Monte Carlo simulation error in our studies. 5.5 Exercises The following exercises involve exploring and tweaking the above simulation code we have developed to replicate the results of Brown and Forsythe (1974). Table 1 from Brown and Forsythe reported rejection rates for \\(\\alpha = .01\\) and \\(\\alpha = .10\\) in addition to \\(\\alpha = .05\\). Calculate the rejection rates of the ANOVA F and Welch tests for all three \\(\\alpha\\)-levels. Try simulating the Type-I error rates for the parameter values in the first two rows of Table 1 of the original paper. Use 10,000 replications. How do your results compare to the results reported in Table 1? Try simulating the power levels for a couple of sets of parameter values from Table 2. Use 10,000 replications. How do your results compare to the results reported in the Table? One might, instead of having one_run return a single row with the columns for the \\(p\\)-values, have multiple rows with each row being a test (so one row for ANOVA and one for Welch). E.g., it might produce results like this: one_run_long() ## # A tibble: 2 × 2 ## method pvalue ## &lt;chr&gt; &lt;dbl&gt; ## 1 ANOVA 0.835 ## 2 Welch 0.780 Modify one_run() to do this, update your simulation code, and then use group_by() plus summarise() to calculate rejection rates in one go. The “long” approach is often nicer when evaluating more than two methods, or when each method returns not just a \\(p\\)-value but other quantities of interest. "],["chap-DGP.html", "Chapter 6 Data-Generating Processes (DGPs) 6.1 A statistical model is a recipe for data generation 6.2 Checking the data-generating function 6.3 Example: Simulating clustered data 6.4 Exercises 6.5 Extension: Standardization in a data generating process", " Chapter 6 Data-Generating Processes (DGPs) The data generating process (DGP) is the recipe we use to create fake data that we then analyze. Often we express our DGP as a specific model, with parameters that we can set to generate data. The advantage of this is, generally, when we generate from a specified model we know the “right answer,” and can thus compare our estimates to this right answer in order to assess whether our estimation procedures worked. The easiest way to describe a DGP is usually via a mathematical model, which is fundamentally a sequence of equations and random variables that define a series of steps. Describing DGPs in this way is especially important for more complex DGPs, such as those for hierarchical data. These models will often be a series of chained linear equations that use a set of parameters that we set out. Once we have them, we can convert these equations to code by simply following these laid out steps. In this chapter, after giving a high level overview of the DGP process, we will walk through a running example of clustered data. In particular, we are going to focus on generating two-level data of students nested in schools. There are several ingredients of a full mathematical model that we could use to generate data. COVARIATES, STRUCTURAL COVARIATES, and OUTCOMES Covariates are the things that we are usually given when analyzing real data, such as student demographics, or school-level characteristics such as the school’s treatment assignment. Structural covariates are covariates that we do not tend to think of as covariates per se; they are more just consequences of the data. These are elements such as the number of observations in each school or proportion treated in each school. In the real world statistical analysis, we rarely model covariates, but instead condition on them. In a simulation, however, we have to decide how they come to be. Structural covariates are also a consequence of how we decide to generate data; for example, if we are generating sites of different size, we may put a distribution on site size, and generate the sizes according to that distribution. Outcomes are a type of covariate that are usually dependent on other covariates in our model. In other words, some covariates depend on other covariates, which can govern the order that we can generate all of our data. MODEL This is the parametric relationship between everything, such as a specification of how the outcomes are linked to the covariates. This includes specification of the randomness (the distribution of the residuals, etc.). The model will usually contain equations that one might see in an analysis of data that looks like what we are trying to generate. The full model will also have some extra parts that define how to generate the covariates and structural covariates. For example, we might specify that site sizes are uniformly distributed between a specified minimum and maximum size, or that some covariate is normally distributed. We might also specify an equation that connects size size to site average treatment impact, or things of that nature. PARAMETERS For a given model, parameters describe how strong a relationship there is between covariate and outcome, variance of the residuals, and so forth. We usually estimate these from data. Critically, if we know them, we can generate new data. DESIGN PARAMETERS Design parameters are the parameters that go with the parts of our model that we normally would not use when analyzing our data. These are, e.g., the number of sites, the range of allowed site sizes. These will control how we generate the structural covariates. We might also have parameters governing covariate generation, such as means and variances and so forth. For example, for the Welch data earlier we have, for observation \\(i\\) in group \\(g\\), a mathematical representation of our data of: \\[ X_{ig} = \\mu_g + \\epsilon_{ig} \\mbox{ with } \\epsilon_{ig} \\sim N( 0, \\sigma^2_g ) \\] These math equations would also come along with specified parameter values (the \\(\\mu_g\\), the \\(\\sigma^2_g\\)), and the design parameter of the sample sizes \\(n_g\\). 6.1 A statistical model is a recipe for data generation Once we have a recipe (our mathematical model), the next step is to translate it to code. In the real world: We obtain data, we pick a model, we estimate parameters. The data comes with covariates and outcomes. It also comes with sample size, sizes of the clusters, etc. In the simulation world, by comparison: We pick a model, we decide how much data, we generate covariates, we pick the parameters, and then we generate outcomes. We need to decide how many clusters we have, how big the clusters are, etc. We have to specify how the covariates are made. This last piece is very different from real-world analysis. In terms of code, a function that implements a data-generating model should have the following form: generate_data &lt;- function(parameters) { # generate pseudo-random numbers and use those to # make some data return(sim_data) } The function takes a set of parameter values as input, simulates random numbers and does calculations, and produces as output a set of simulated data. Again, there will in general be multiple parameters, and these will include not only the model parameters (e.g. the coefficients of a regression), but also sample sizes and other study design parameters. The output will typically be a dataframe, mimicking what data one would see in the “real world,” possibly augmented by some other latent (normally unobserved in the real world) values that we can use later on to assess whether the estimation procedures we are checking are close to the truth. For example, from our Welch case study, we had the following method that generates grouped data with a single outcome. generate_data &lt;- function(mu, sigma_sq, sample_size) { N &lt;- sum(sample_size) g &lt;- length(sample_size) group &lt;- rep(1:g, times = sample_size) mu_long &lt;- rep(mu, times = sample_size) sigma_long &lt;- rep(sqrt(sigma_sq), times = sample_size) x &lt;- rnorm(N, mean = mu_long, sd = sigma_long) sim_data &lt;- tibble(group = group, x = x) return(sim_data) } Our function takes both parameters as we normally thing of them (mu, sigma_sq), and other values that we might not think of as parameters per-se (sample_size). When simulating data, we have to specify quantities that we, when analyzing data, often have to take for granted. 6.2 Checking the data-generating function An important part of programing in R—particularly when writing functions—is finding ways to test and check the correctness of your code. Thus, after writing a data-generating function, we need to consider how to test whether the output it produces is correct. How best to do this will depend on the data-generating process being implemented. For the heteroskedastic ANOVA problem, one basic thing we could do is check that the simulated data from each group follows a normal distribution. By generating very large samples from each group, we can effectively check characteristics of the population distribution. In the following code, we simulate very large samples from each of the four groups, and check that the means and variances agree with the input parameters: check_data &lt;- generate_data(mu = mu, sigma_sq = sigma_sq, sample_size = rep(10000, 4)) chk &lt;- check_data %&gt;% group_by( group ) %&gt;% dplyr::summarise( n = n(), mean = mean( x ), var = var( x ) ) %&gt;% mutate( mu = mu, sigma2 = sigma_sq ) %&gt;% relocate( group, n, mean, mu, var, sigma2 ) chk ## # A tibble: 4 × 6 ## group n mean mu var sigma2 ## &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 10000 0.00899 0 9.05 9 ## 2 2 10000 -0.0246 0 4.04 4 ## 3 3 10000 -0.0144 0 3.97 4 ## 4 4 10000 0.00302 0 1.00 1 We are recovering our parameters. We can also make some diagnostic plots to assess whether we have normal data (using QQ plots, where we expect a straight line if the data are normal): ggplot( check_data, aes( sample=x ) ) + facet_wrap( ~ group ) + stat_qq() We again check out. Here, these checks may seem a bit silly, but most bugs are silly—at least once you find them! It is easy for small things such as a sign error to happen once your model gets a bit more complex; even simple checks such as these can be quite helpful. 6.3 Example: Simulating clustered data Generating data with complex structure can be intimidating, but if you set out a recipe for how the data is generated it is often not to bad to build that recipe up with code. We will next provide a more complex example with a case study of using simulation to determine best practices for analyzing data from a cluster-randomized RCT of students nested in schools. Recent literature on multisite trials (where, for example, students are randomized to treatment or control within each of a series of sites) has explored how variation in the size of impacts across sites can affect how estimators behave, and what models we should use when there is impact variation (e.g., Miratrix, Weiss, and Henderson (2021), Bloom et al. (2016)). We are going to extend this work to explore best practices for estimating treatment effects in cluster randomized trials. Cluster randomized trials are randomized experiments where the unit of randomization is a group of individuals, rather than the individuals themselves. For example, if we have a collection of schools, with students in schools, a cluster randomized trial would randomize the schools into treatment or control, and then measure our outcome on the students inside the schools. We might be trying to estimate, for example, whether the average score of the treatment schools is different from the average score of the control schools. In particular, we want to investigate what happens when the average treatment impact of a school is related to the size of the school. Often we will design a data generating process to allow us to answer a specific question. For our Welch example, we wanted to know how different amounts of variation in different groups impacted estimation. We therefore needed a data generation process that allowed us to control that variation. To figure out what we need for our clustered data example, we need to think about how we are going to use those data in our simulation study. 6.3.1 A design decision: What do we want to manipulate? There are a lot of ways we might generate cluster randomized trial data. To pick between the many options, we need to think about the goals of the simulation. Overall, our final data should be a collection of clusters with different sizes and different baseline mean outcomes. Some of the clusters will be treated, and some not. We can imagine our final data being individual students in schools, with each student having a school id, a treatment assignment (shared for all in the school) and an outcome. A good starting point for building a DGP is to first write down a sketch of what the eventual data might look like on a piece of scratch paper. In our case, for example, we might write down: schoolID Z size studentID Y 1 1 24 1 3.6 1 1 24 3 1.0 1 etc etc etc etc 1 1 24 24 2.0 2 0 32 1 0.5 2 0 32 2 1.5 2 0 32 3 1.2 etc etc etc etc etc We know we are planning on comparing multiple estimators, seeing how they behave differently under different conditions. We also know that we are interested in what happens when the size of the treatment impact varies across sites, and in particular what happens when it is associated with site size. Given these goals and beliefs, we might think: We figure if all the sites are the same size, then all the estimators will probably be ok. But if sites vary, then maybe we could have issues with our estimators. Also, if site size varies, but has nothing to do with impact, then all the estimators might still be ok, at least for bias, but if size is associated with treatment impact, then maybe how our estimators end up averaging across sites is going to matter. Usually, when running a simulation, it is good practice to test the simple option along with the complex one. We want to both check that something does not matter as well as verify that it does. Given this, we land on the following points: We need a DGP that has the option to make all-same-size sites or variable size sites. Our DGP should have some impact variation across sites. Our DGP should allow for different sites to have different treatment impacts. We should have the option to connect impact variation to site size. 6.3.2 A model for a cluster RCT It is usually easiest to start a recipe for data generating by writing down the mathematical model. Write down something, and then, if you do not yet know how to generate some part of what you wrote down, specify how to generate those parts that you are using, in an iterative process. For our model, we start with a model for our student outcome: \\[ Y_{ij} = \\beta_{0j} + \\epsilon_{ij} \\mbox{ with } \\epsilon_{ij} \\sim N( 0, \\sigma^2_\\epsilon ) \\] where \\(Y_{ij}\\) is the outcome for student \\(i\\) in site \\(j\\), \\(\\beta_{0j}\\) is the average outcome in site \\(j\\), and \\(\\epsilon_{ij}\\) is the residual error for student \\(i\\) in site \\(j\\). We then need to figure out how to make the average outcome in site \\(j\\). In looking at our goals, we want \\(\\beta_{0j}\\) to depend on treatment assignment. We might then write down: \\[ \\beta_{0j} = \\gamma_0 + \\gamma_1 Z_j + u_j \\mbox{ with } u_j \\sim N( 0, \\sigma^2_u )\\] saying the average outcome in site \\(j\\) is the average outcome in the control group (\\(\\gamma_0\\)) plus some treatment impact (\\(\\gamma_1\\)) if the site is treated. We added a \\(u_j\\) so that our different sites can be different from each other in terms of their average outcome, even if they are not treated. To keep things simple, we are having a common treatment impact within cluster: if we treat a cluster, everyone in the cluster is raised by some specified amount. But we also want the size of impact to possibly vary by site size. This suggests we also want a treatment by site size interaction term. Instead of just using the site size, however, we are going to standardize our site sizes so they are more interpretable. This makes it so if we double the sizes of all the sites, it does not change our size covariate: we want the size covariate to be relative size, not absolute. To do this, we create a covariate which is the percent of the average site size that a site is: \\[ S_j = \\frac{n_j - \\bar{n}}{ \\bar{n} } \\] where \\(\\bar{n}\\) is the average site size. Using this coveriate, we then revise our equation for our site \\(j\\) to: \\[ \\beta_{0j} = \\gamma_{0} + \\gamma_{1} Z_j + \\gamma_2 Z_j S_j + u_j \\] A nice thing about \\(S_j\\) is that it is centered at 0, meaning the average site has an impact of just \\(\\gamma_1\\). If \\(S_j\\) was not centered at zero, then our overall average impact in our data would be a mix of the \\(\\gamma_1\\) and the \\(\\gamma_2\\). By centering, we make it so the average impact is just \\(\\gamma_1\\)–\\(\\gamma_1\\) is our target site average treatment impact. If we put all the above together, we see we have specified a multilevel model to describe our data: \\[ \\begin{aligned} Y_{ij} &amp;= \\beta_{0j} + \\epsilon_{ij} \\\\ \\epsilon_{ij} &amp;\\sim N( 0, \\sigma^2_\\epsilon ) \\\\ \\beta_{0j} &amp;= \\gamma_{0} + \\gamma_{1} Z_j + \\gamma_2 Z_j S_j + u_j \\\\ u_j &amp;\\sim N( 0, \\sigma^2_u ) \\end{aligned} \\] Our parameters are the mean outcome of control unit (\\(\\gamma_0\\)), the average treatment impact (\\(\\gamma_1\\)), the amount of cross site variation (\\(\\sigma^2_u\\)), and residual variation (\\(\\sigma^2_\\epsilon\\)). Our \\(\\gamma_2\\) is our site-size by treatment interaction term: bigger sites will (assuming \\(\\gamma_2\\) is positive) have larger treatment impacts. If you prefer the reduced form, it would be: \\[ Y_{ij} = \\gamma_{0} + \\gamma_{1} Z_j + \\gamma_2 Z_j S_j + u_j + \\epsilon_{ij} \\] We might also include a main effect for \\(S_j\\). A main effect would make larger sites systematically different than smaller sites at baseline, rather than having it only be part of our treatment variation term. For simplicity we drop it here. In reviewing the above, we might notice that we do not have any variation in treatment impact that is not explained by site size. We could once again revise our model to include a term for this, but we will leave it out for now. See the exercises at the end of the chapter. So far we have a mathematical model analogous to what we would write if we were analyzing the data. To generate data, we also need several other quantities specified. First, we need to know the number of clusters (\\(J\\)) and the sizes of the clusters (\\(n_j\\), for \\(j = 1, \\ldots, J\\)). We have to provide a recipe for generating these sizes. We might try \\[ n_j \\sim unif( (1-\\alpha)\\bar{n}, (1+\\alpha)\\bar{n} ) = \\bar{n} + \\bar{n}\\alpha \\cdot unif(-1, 1) ,\\] with a fixed \\(\\alpha\\) to control the amount of variation in cluster size. If \\(\\bar{n} = 100\\) and \\(\\alpha = 0.25\\) then we would, for example, have sites ranging from 75 to 125 in size. This specification is nice in that we can determine two parameters, \\(\\bar{n}\\) and \\(\\alpha\\), to get our site sizes, and both parameters are easy to comprehend: average site size and amount of site size variation. Given how we are generating site size, look again at our treatment impact heterogeneity term: \\[ \\gamma_2 Z_j S_j = \\gamma_2 Z_j \\left(\\frac{n_j - \\bar{n}}{\\bar{n}}\\right) = \\gamma_2 Z_j \\alpha U_j, \\] where \\(U_j\\) is the \\(U_j \\sim unif(-1,1)\\) uniform variable used to generate \\(n_j\\). Due to our standardizing by average site size, we make our covariate not change in terms of its importance as a function of site size, but rather as a function of site variation \\(\\alpha\\). In particular, \\(\\frac{n_j - \\bar{n}}{\\bar{n}}\\) will range from \\(-\\alpha\\) to \\(\\alpha\\), regardless of average site size. Carefully setting up a DGP so the “knobs” we use are standardized like this can make interpreting the simulation results much easier. Consider if we did not standardize and just had \\(\\gamma_2 n_j\\) in our equation: in this case, for a set \\(\\gamma_2\\), the overall average impact would grow if we changed the average site size, which could make interpreting the results across scenarios very confusing. We generally want the parameters in our DGP to change only one aspect of our simulation, if possible, to make isolating effects of different DGP characteristics easier. We next need to define how we generate our treatment indicator, \\(Z_j\\). We might specify the proportion \\(p\\) of clusters we will assign to treatment, and then generate \\(Z_j = 1\\) or \\(Z_j = 0\\) using a simple random sampling approach on our \\(J\\) clusters. We will see code for this below. 6.3.3 Converting our model to code When sketching out our DGP mathematically we worked from the students to the schools. For actual data generation, we will now follow our final model, but go by layers in the other direction. First, we generate the sites: Generate site sizes Generate site-level covariates Generate site level random effects Then we generate the students inside the sites: Generate student covariates Generate student residuals Add everything up to generate student outcomes The mathematical model gives us exactly the details we need to execute on these steps. We start by specifying a function with all the parameters we might want to pass it, including defaults for each (see 25.2 for more on function defaults): gen_dat_model &lt;- function( n_bar = 10, J = 30, p = 0.5, gamma_0 = 0, gamma_1 = 0, gamma_2 = 0, sigma2_u = 0, sigma2_e = 1, alpha = 0 ) { # Code (see below) goes here. } Note our parameters are a mix of model parameters (gamma_0, gamma_1, sigma2_e, etc., representing coefficients in regressions, variance terms, etc.) and design parameters (n_bar, J, p) that directly inform data generation. We set default arguments (e.g., gamma_0=0) so we can ignore aspects of the DGP that we do not care about later on. Inside the model, we will have a block of code to generate the sites, and then another to generate the students. Make the sites. We make the sites first: # generate site sizes n_min = round( n_bar * (1 - alpha) ) n_max = round( n_bar * (1 + alpha) ) nj &lt;- sample( n_min:n_max, J, replace=TRUE ) # Generate average control outcome and average ATE for all sites # (The random effects) u0j = rnorm( J, mean=0, sd=sqrt( sigma2_u ) ) # randomize units within each site (proportion p to treatment) Zj = ifelse( sample( 1:J ) &lt;= J * p, 1, 0) # Calculate site intercept for each site beta_0j = gamma_0 + gamma_1 * Zj + gamma_2 * Zj * (nj-n_bar)/n_bar + u0j The code is a literal translation of the math we did before. Note the line with sample(1:J) &lt;= J*p; this is a simple trick to generate a treatment and control 0/1 indicator. There is also a serious error in the above code (serious in that the code will run and look fine in many cases, but not always do what we want); we leave it as an exercise (see below) to find and fix it. Make the individuals. We next use the site characteristics to then generate the individuals. # Make individual site membership sid = as.factor( rep( 1:J, nj ) ) dd = data.frame( sid = sid ) # Make individual level tx variables dd$Z = Zj[ dd$sid ] # Generate the residuals N = sum( nj ) e = rnorm( N, mean=0, sd=sqrt( sigma2_e ) ) # Bundle and send out dd &lt;- mutate( dd, sid=as.factor(sid), Yobs = beta_0j[sid] + e, Z = Zj[ sid ] ) A key piece here is the rep() function that takes a list and repeats each element of the list a specified number of times. In particular, rep() repeats each number (\\(1, 2, /ldots,J\\)), the corresponding number of times as listed in nj. Once we put the above code in our function skeleton, we can our function as so: dat &lt;- gen_dat_model( n=5, J=3, p=0.5, gamma_0=0, gamma_1=0.2, gamma_2=0.2, sigma2_u = 0.4, sigma2_e = 1, alpha = 0.5 ) dat ## sid Z Yobs ## 1 1 1 2.35779312 ## 2 1 1 0.57601909 ## 3 1 1 1.37583246 ## 4 2 0 -0.04417977 ## 5 2 0 0.35837270 ## 6 2 0 2.43903900 ## 7 2 0 -1.45205220 ## 8 2 0 -1.05747062 ## 9 2 0 -0.50122103 ## 10 3 0 -0.25961309 ## 11 3 0 -0.42459575 Our data generation code is complete. The next step is to test the code, making sure it is doing what we think it is. See the exercises for more on this. 6.4 Exercises 6.4.1 The Welch test on a shifted-and-scaled \\(t\\) distribution The shifted-and-scaled \\(t\\)-distribution has parameters \\(\\mu\\) (mean), \\(\\sigma\\) (scale), and \\(\\nu\\) (degrees of freedom). If \\(T\\) follows a student’s \\(t\\)-distribution with \\(\\nu\\) degrees of freedom, then \\(S = \\mu + \\sigma T\\) follows a shifted-and-scaled \\(t\\)-distribution. The following function will generate random draws from this distribution (the scaling of \\((\\nu-2)/\\nu\\) is to account for a non-scaled \\(t\\)-distribution having a variance of \\(\\nu/(\\nu-2)\\)). r_tss &lt;- function(n, mean, sd, df) { mean + sd * sqrt( (df-2)/df ) * rt(n = n, df = df) } r_tss(n = 8, mean = 3, sd = 2, df = 5) ## [1] 4.6290066 3.3199535 -0.1054816 2.1896919 ## [5] 2.4605947 0.1443433 1.0526101 1.9674069 Modify the Welch simulation’s simulate_data() function to generate data from shifted-and-scaled \\(t\\)-distributions rather than from normal distributions. Include the degrees of freedom as an input argument. Simulate a dataset with low degrees of freedom and plot it to see if you see a few outliers. Now generate more data and calculate the means and standard deviations to see if they are correctly calibrated (generate a big dataset to ensure you get reliable mean and standard deviation estimates). Check df equal to 500, 5, 3, and 2. Once you are satisfied you have a correct DGP function, re-run the Type-I error rate calculations from the prior exercises in Section 5.5 using a \\(t\\)-distribution with 5 degrees of freedom. Do the results change substantially? 6.4.2 Checking and extending the Cluster RCT DGP What is the variance of the outcomes generated by our model if there is no treatment effect? (Try simulating data to check!) What other quick checks can you make on your DGP to make sure it is working? In gen_dat_model() we have the following line of code to generate the number of individuals per site. nj &lt;- sample( n_min:n_max, J, replace=TRUE ) This code has an error. Generate a variety of datasets where you vary n_min, n_max and J to discover the error. Then repair the code. Checking your data generating process across a range of scenarios is extremely important. The DGP allows for site-level treatment impact variation–but only if it is related to site size. How could you modify your simulation to allow for site-level treatment impact variation that is not related to site size? Implement this change and generate some data to show how it works. Extend the data generating process to include an individual level covariate \\(X\\) that is predictive of outcome. In particular, you will want to adjust your level one equation to \\[ Y_{ij} = \\beta_{0j} + \\beta_{1} X_{ij} + \\epsilon_{ij} . \\] Keep the same \\(\\beta_1\\) for all sites. You will have to specify how to generate your \\(X_{ij}\\). For starters, just generate it as a standard normal, and do not worry about having the mean of \\(X_{ij}\\) vary by sites unless you are excited to try to get that to work. 6.5 Extension: Standardization in a data generating process In this chapter, we made a model to generate data for a cluster randomized trial. Given our model, we can generate data by specifying our parameters and variables of \\(\\gamma_{0}, \\gamma_{1}, \\gamma_{2}, \\sigma^2_\\epsilon, \\sigma^2_u, \\bar{n}, \\alpha, J, p\\). One factor that tends to show up when working with multisite data is how much variation there is within sites vs between sites. For example, the Intra-Class Correlation (ICC), a measure of how much of the variation in the outcome is due to differences between sites, is a major component for power calculations. Because of this, we will likely want to manipulate the amount of within vs. between variation in our simulations. An easy way to do this would be to simply raise or lower the amount of variation within sites (\\(\\sigma^2_u\\)). This unfortunately has a side effect: if we increase \\(\\sigma^2_u\\), our overall variation of \\(Y\\) will also increase. This will make it hard to think about, e.g., power, since we have confounded within vs. between variation with overall variation (which is itself bad for power). It also impacts interpretation of coefficients. A treatment effect of 0.2 on our outcome scale is “smaller” if there is more overall variation. Right now, our model is \\[ Y_{ij} = \\gamma_{0} + \\gamma_{1} Z_j + \\gamma_2 Z_j \\left(\\frac{n_j - \\bar{n}}{\\bar{n}} \\right) + u_j + \\epsilon_{ij} \\] Given our model, the variance of our control-side outcomes is \\[ \\begin{aligned} var( Y_{ij}(0) ) &amp;= var( \\beta_{0j} + \\epsilon_{ij} ) \\\\ &amp;= var( \\gamma_{0} + \\gamma_{1} Z_j + \\gamma_{2}Z_j \\tilde{n}_j + u_j + \\epsilon_{ij} ) \\\\ &amp;= \\sigma^2_u + \\sigma^2_\\epsilon \\end{aligned} \\] We see that as we increase either within or between variation, overall variation increases. We can improve our data generating process to allow for directly controlling the amount of within vs. between variation without it being confounded with overall variation. To do this we first (1) Standardize our data and then (2) reparameterize, so we have human-selected parameters that we can interpret that we then translate to our list of data generation parameters. In particular, we will index our DGP with the more interpretable parameter of the Intra-Class Correlation (ICC), and standardize our DGP so it is all in effect size units. The effect size of an impact is defined as the impact over the control-side standard deviation. (Sometimes people use the pooled standard deviation, but this is usually a bad choice if one suspects treatment variation. More treatment variation should not reduce the effect size for the same absolute average impact.) \\[ ES = \\frac{\\gamma_1}{SD( Y | Z_j = 0 )} = \\frac{\\gamma_1}{\\sqrt{ \\sigma^2_u + \\sigma^2_\\epsilon } } \\] The way we think about how “big” \\(\\gamma_1\\) is depends on how much site variation and residual variation there is. But it is also easier to detect effects when the residual variation is small. Effect sizes “standardize out” these sorts of tensions. We can use that. In particular, we will use the Intraclass Correlation Coeffiicent (ICC), defined as \\[ ICC = \\frac{ \\sigma^2_u }{ \\sigma^2_\\epsilon + \\sigma^2_u } . \\] The ICC is a measure of within vs. between variation. What we then do is first standardized our data, meaning we ensure the control side variance equals 1. Using the above, this means \\(\\sigma^2_u + \\sigma^2_\\epsilon = 1\\). It also gives us \\(ICC = \\sigma^2_u\\), and \\(\\sigma^2_\\epsilon = 1 - ICC\\). Our two model parameters are now tied together by our single ICC tuning parameter. The core idea is we can now manipulate the aspects of the DGP we want while holding other aspects of the DGP constant. Given our standardized scale, we have dropped a parameter from our set of parameters we might want to vary, and ensured that varying the other parameter (now the ICC) is varying only one aspect of the DGP, not both. Before, increasing \\(\\sigma^2_u\\) had two consequences: total variation and relative amount of variation at the school level. Now, manipulating ICC only does the latter. E.g., we can call our DGP function as follows: ICC = 0.3 dat &lt;- gen_dat_model( n_bar = 20, J = 30, p = 0.5, gamma_0 = 0, gamma_1 = 0.3, gamma_2 = 0.2, sigma2_u = ICC, sigma2_e = 1 - ICC, alpha = 0.5 ) References Bloom, Howard S., Stephen W. Raudenbush, Michael J. Weiss, and Kristin Porter. 2016. “Using Multisite Experiments to Study Cross-Site Variation in Treatment Effects: A Hybrid Approach With Fixed Intercepts and a Random Treatment Coefficient.” Journal of Research on Educational Effectiveness 10 (4): 0–0. https://doi.org/10.1080/19345747.2016.1264518. Miratrix, Luke W, Michael J Weiss, and Brit Henderson. 2021. “An Applied Researcher’s Guide to Estimating Effects from Multisite Individually Randomized Trials: Estimands, Estimators, and Estimates.” Journal of Research on Educational Effectiveness 14 (1): 270–308. "],["estimation-procedures-1.html", "Chapter 7 Estimation procedures 7.1 Validating Estimation Procedures 7.2 Checking via simulation 7.3 Including Multiple estimation procedures 7.4 Exercises", " Chapter 7 Estimation procedures In the abstract, a function that implements an estimation procedure should have the following form: estimate &lt;- function(data) { # calculations/model-fitting/estimation procedures return(estimates) } The function takes a data set as input, fits a model or otherwise calculates an estimate, possibly with associated standard errors and so forth, and produces as output these estimates. In principle, you should be able to run your function on real data as well as simulated. The estimates could be point-estimates of parameters, standard errors, confidence intervals, etc. Depending on the research question, this function might involve a combination of several procedures (e.g., a diagnostic test for heteroskedasticity, followed by the conventional formula or heteroskedasticity-robust formula for standard errors). Also depending on the research question, we might need to create several functions that implement different estimation procedures to be compared. In Chapter 5, for example, we saw different functions for some of the methods Brown and Forsythe considered for heteroskedastic ANOVA. 7.1 Validating Estimation Procedures Just as with the data-generating function, it is important to verify the accuracy of the estimation functions. For our Welch test, we can actually check our results against the built-in oneway.test function. Let’s do that with a fresh set of data: sim_data &lt;- generate_data(mu = mu, sigma_sq = sigma_sq, sample_size = sample_size) aov_results &lt;- oneway.test(x ~ factor(group), data = sim_data, var.equal = FALSE) aov_results ## ## One-way analysis of means (not assuming ## equal variances) ## ## data: x and factor(group) ## F = 52.554, num df = 3.0000, denom df = ## 4.9584, p-value = 0.0003506 Welch_results &lt;- Welch_F(sim_data) all.equal(aov_results$p.value, Welch_results) ## [1] TRUE We use all.equal() because it will check equality up to a tolerance in R, which can avoid some weird floating point errors due to rounding. 7.2 Checking via simulation If your estimation procedure truly is new, how would you check it? Well, one obvious answer is simulation! In principle, for large samples and data generated under the assumptions required by your new procedure, you should have a fairly good sense that your estimation procedures should work. It is often the case that as you design your simulation, and then start analyzing the results, you will find your estimators are really not working as planned. Such surprises will usually be due to (at least) three factors: you did not implement your method correctly, your method is not yet a good idea in the first place, or you do not yet understand something important about how your method works. When faced with poor performance you thus will debug your code, revise your method, and do some serious thinking. Ideally this will eventually lead you to a deeper understanding of a method that is a better idea in general, and correctly implemented in all likelihood. For example, in one research project Luke and other co-authors were working on a way to improve Instrumental Variable (IV) estimation using post-stratification. The idea is to group units based on a covariate that predicts compliance status, and then estimate within each group; hopefully this would improve overall estimation. In the first simulation, the estimates were full of NAs and odd results because we failed to properly account for what happens when the number of compliers was estimated to be zero. That was table stakes: after repairing that, we still found odd behavior and serious and unexpected bias, which turned out to be due to failing to implement the averaging of the groups step correctly. We fixed the estimator again and re-ran, and found that even when we had a variable that was almost perfectly predictive of compliance, gains were still surprisingly minimal. Eventually we understood that the groups with very few compliers were actually so unstable that they ruined the overall estimate. These results inspired us to introduce other estimators that dropped or down-weighted such strata, which gave our paper a deeper purpose and contribution. Simulation is an iterative process. It is to help you, the researcher, learn about your estimators so you can find a way forward with your work. What you learn then feeds back to the prior research, and you have a cycle that you eventually step off of, if you want to finish your paper. But do not expect it to be a single, well-defined, trajectory. 7.3 Including Multiple estimation procedures In Chapter (chap-DGP?), Section 6.3 we introduced a case study of evaluating different procedures for estimating treatment impacts in a cluster randomized trial. As a point of design, we generally recommend writing different functions for each estimation method one is planning on evaluating. This makes it easier to plug into play different methods as desired, and also helps generate a code base that is flexible and useful for other purposes. It also, continuing our usual mantra, makes debugging easier: you can focus attention on one thing at a time, and worry less about how errors in one area might propagate to others. For the cluster RCT context, we use two libraries, the lme4 package (for multilevel modeling), the arm package (which gives us nice access to standard errors, with se.fixef()), and lmerTest (which gives us \\(p\\)-values for multilevel modeling). We also need the estimatr package to get robust SEs with lm_robust. This use of different packages for different estimators is quite typical: in many simulations, many of the estimation approaches being considered are usually taken from the literature, and if you are lucky this means you can simply use a package that implements those methods. We load our libraries at the top of our code: library( lme4 ) library( arm ) library( lmerTest ) library( estimatr ) Our three analysis functions are then Multilevel Regression (MLM): analysis_MLM &lt;- function( dat ) { M1 = lmer( Yobs ~ 1 + Z + (1|sid), data=dat ) est = fixef( M1 )[[&quot;Z&quot;]] se = se.fixef( M1 )[[&quot;Z&quot;]] pv = summary(M1)$coefficients[&quot;Z&quot;,5] tibble( ATE_hat = est, SE_hat = se, p_value = pv ) } Linear Regression with Cluster-Robust Standard Errors (LM): analysis_OLS &lt;- function( dat ) { M2 &lt;- lm_robust( Yobs ~ 1 + Z, data=dat, clusters=sid ) est &lt;- M2$coefficients[[&quot;Z&quot;]] se &lt;- M2$std.error[[&quot;Z&quot;]] pv &lt;- M2$p.value[[&quot;Z&quot;]] tibble( ATE_hat = est, SE_hat = se, p_value = pv ) } and Aggregate data (Agg): analysis_agg &lt;- function( dat ) { datagg &lt;- dat %&gt;% group_by( sid, Z ) %&gt;% summarise( Ybar = mean( Yobs ), n = n() ) stopifnot( nrow( datagg ) == length(unique(dat$sid) ) ) M3 &lt;- lm_robust( Ybar ~ 1 + Z, data=datagg, se_type = &quot;HC2&quot; ) est &lt;- M3$coefficients[[&quot;Z&quot;]] se &lt;- M3$std.error[[&quot;Z&quot;]] pv &lt;- M3$p.value[[&quot;Z&quot;]] tibble( ATE_hat = est, SE_hat = se, p_value = pv ) } Note the stopifnot command: putting assert statements in your code like this is a good way to guarantee you are not introducing weird and hard-to-track errors in your code. For example, R likes to recycle vectors to make them the right length; if you gave it a wrong length in error, this can be a brutal error to discover. The stopifnot statements halt your code as soon as something goes wrong, rather than letting that initial wrongness flow on to further work, showing up in odd results that you don’t understand later on. See Section 18.2 for more. All of our methods give output in the similar format: analysis_MLM( dat ) ## # A tibble: 1 × 3 ## ATE_hat SE_hat p_value ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.227 0.222 0.316 analysis_OLS( dat ) ## # A tibble: 1 × 3 ## ATE_hat SE_hat p_value ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.171 0.228 0.462 analysis_agg( dat ) ## # A tibble: 1 × 3 ## ATE_hat SE_hat p_value ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.232 0.222 0.305 This will allow us to make our simulation, for each iteration, call each method in turn on the same dataset, stack the results into a small table, and return that result. This will in turn get stacked to make one giant table of results, which makes evaluating performance quite easy. We will see this in the next chapter. 7.4 Exercises 7.4.1 More Welch and adding the BFF test Let’s continue to explore and tweak the simulation code we have developed to replicate the results of Brown and Forsythe (1974). Write a function that implements the Brown-Forsythe F*-test (the BFF* test!) as described on p. 130 of Brown and Forsythe (1974). Call it on a sample dataset to check it. BF_F &lt;- function(x_bar, s_sq, n, g) { # fill in the guts here return(pval) } Try calling your BF_F function on a variety of datasets of different sizes and shapes, to make sure it works. What kinds of datasets should you test out? 7.4.2 More estimators for Cluster Randomized Trials Sometimes you might want to consider two versions of an estimator. For example, in our cluster RCT code we used robust standard errors for the linear model estimator. Say we also want to include naive standard error estimates that we get out of the lm call. Extend the OLS call to be analysis_OLS &lt;- function( dat, robustSE = TRUE ) { and have the code inside calculate SEs based on the flag. Then modify the analyze_data() to include both approaches (you will have to call analysis_OLS twice). Efficiency-wise, estimating the OLS twice might not be ideal, but clarity-wise it might be considered helpful. Articulate two reasons for the design choice of implementing the two OLS calls separately, and articulate two reasons for instead having the analysis_OLS method generate both standard errors internally in a single call. "],["running-the-simulation-1.html", "Chapter 8 Running the Simulation 8.1 Writing simulations quick with the simhelpers package 8.2 Adding Checks and Balances 8.3 Exercises", " Chapter 8 Running the Simulation In the prior two chapters we saw how to write functions that generate data according to a specified model (and parameters) and functions that implement estimation procedures on simulated data. We next put those two together and repeat a bunch of times to obtain a lot of results such as point estimates, estimated standard errors and/or confidence intervals. We use two primary ways of doing this in this textbook. The first is to write a function that does a single step of a simulation, and then use the map() function to run that single step multiple times. For our Cluster RCT case study, for example, we would write the following that takes our simulation parameters and runs a single trial of our simulation: one_run &lt;- function( n_bar = 30, J=20, gamma_1 = 0.3, gamma_2 = 0.5, sigma2_u = 0.20, sigma2_e = 0.80, alpha = 0.75 ) { dat &lt;- gen_dat_model( n_bar = n_bar, J=J, gamma_1 = gamma_1, gamma_2 = gamma_2, sigma2_u = sigma2_u, sigma2_e = sigma2_e, alpha = alpha ) MLM = analysis_MLM( dat ) LR = analysis_OLS( dat ) Agg = analysis_agg( dat ) bind_rows( MLM = MLM, LR = LR, Agg = Agg, .id = &quot;method&quot; ) } We have added a bunch of defaults to our function, so we can easily run it without remembering all the things we can change. When we call it, we get a nice table of results that we can evaluate: one_run( n_bar = 30, J = 20, alpha=0.5 ) ## # A tibble: 3 × 4 ## method ATE_hat SE_hat p_value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 MLM 0.0450 0.192 0.818 ## 2 LR -0.00683 0.192 0.972 ## 3 Agg 0.0580 0.193 0.768 The results for each method is a single line. We record estimated impact, estimated standard error, and a nominal \\(p\\)-value. Note how the bind_rows() method can take naming on the fly, and give us a column of method, which will be very useful for keeping track of what estimated what. We intentionally wrap up our results with a data frame to make later processing of data with the tidyverse package much easier. We then use the map() function to run this function multiple times: set.seed( 40404 ) R = 1000 ATE = 0.30 runs &lt;- map_df( 1:R, ~one_run( n_bar = 30, J=20, gamma_1 = ATE ), .id=&quot;runID&quot; ) saveRDS( runs, file = &quot;results/cluster_RCT_simulation.rds&quot; ) What the map() function is doing is first making a list from 1 to R, and then for each element in that list, it is calling one_run() with the parameters n_bar = 30, J=20. The ~ is a shorthand way of writing a function that takes one argument, and then calls one_run() with that argument; the argument is the iteration number (1, 2, 3, …, R), but we are ignoring it. The .id = \"runID\" argument is a way of keeping track of which iteration number produced which result. The _df at the end of map_df() is a way of telling map() to take the results of each iteration and bind them together into a single data frame. Once our simulation is complete, we save our results to a file for future use; this speeds up our lives since we will not have to constantly re-run our simulation each time we want to explore the results. We have arrived! We now have the individual results of all our methods applied to each of 1000 generated datasets. The next step is to evaluate how well the estimators did. Regarding our point estimate, for example, we have these primary questions: Is it biased? (bias) Is it precise? (standard error) Does it predict well? (RMSE) In the next chapter, we systematically go through answering these questions for our initial scenario. 8.1 Writing simulations quick with the simhelpers package The map approach is a bit strange, with building a secret function on the fly with ~, and also having the copy over all the parameters we pass from one_run() to gen_dat_model(). The simhelpers package provides a shortcut that makes this step easier. To do it, we first need to write a single estimation procedure function that puts all of our estimators together: analyze_data = function( dat ) { MLM = analysis_MLM( dat ) LR = analysis_OLS( dat ) Agg = analysis_agg( dat ) bind_rows( MLM = MLM, LR = LR, Agg = Agg, .id = &quot;method&quot; ) } This is simply the one_run() method from above, but without the data generating part. When we pass a dataset to it, we get a nice table of results that we can evaluate, as we did before. dat = gen_dat_model( n=30, J = 20, gamma_1 = 0.30 ) analyze_data( dat ) ## # A tibble: 3 × 4 ## method ATE_hat SE_hat p_value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 MLM 0.517 0.119 0.000489 ## 2 LR 0.509 0.122 0.000785 ## 3 Agg 0.570 0.118 0.000138 We can now use simhelpers to write us a new function for the entire simulation: library(simhelpers) sim_function &lt;- bundle_sim( gen_dat_model, analyze_data ) We can then use it as so: sim_function( 2, n_bar = 30, J = 20, gamma_1 = ATE ) ## # A tibble: 6 × 4 ## method ATE_hat SE_hat p_value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 MLM 0.533 0.128 0.000818 ## 2 LR 0.519 0.134 0.00209 ## 3 Agg 0.662 0.295 0.0379 ## 4 MLM 0.326 0.116 0.0194 ## 5 LR 0.326 0.115 0.0153 ## 6 Agg 0.542 0.232 0.0312 The bundle_sim() command takes our DGP function and our estimation procedures function and gives us back a function, which we have called sim_function, that will run a simulation using whatever parameters we give it. The bundle_sim() command examines gen_dat_model function, figures out what parameters it needs, and makes sure that the newly created function is able to take those parameters from the user. To use it for our simulation, we would then write rns &lt;- sim_function( R, n_bar = 30, J = 20, gamma_1 = ATE ) saveRDS( runs, file = &quot;results/cluster_RCT_simulation.rds&quot; ) This is a bit more elegant than the map() approach, and is especially useful when we have a lot of parameters to pass around. 8.2 Adding Checks and Balances In the extensions of the prior DGP chapter, we discussed indexing our DGP by the ICC instead of the two variance components. We can do this, and also translate some of the more obscure model parameters to easier to interpret parameters from within our simulation driver as follows: one_run &lt;- function( n_bar = 30, J=20, ATE = 0.3, size_coef = 0.5, ICC = 0.4, alpha = 0.75 ) { stopifnot( ICC &gt;= 0 &amp;&amp; ICC &lt; 1 ) dat &lt;- gen_dat_model( n_bar = n_bar, J=J, gamma_1 = ATE, gamma_2 = size_coef, sigma2_u = ICC, sigma2_e = 1-ICC, alpha = alpha ) MLM = analysis_MLM( dat ) LR = analysis_OLS( dat ) Agg = analysis_agg( dat ) bind_rows( MLM = MLM, LR = LR, Agg = Agg, .id = &quot;method&quot; ) } Note the stopifnot: it is wise to ensure our parameter transforms are all reasonable, so we do not get unexplained errors or strange results later on. It is best if your code fails as soon as possible! Otherwise debugging can be quite hard. In our modified one_run() we are transforming our ICC parameter into specific other parameters that are used in our actual model to maintain our effect size interpretation of our simulation. We have not even modified our gen_dat_model() DGP method: we are just specifying the constellation of parameters as a function of the parameters we want to directly control in the simulation. Controlling how we use the foundational elements such as our data generating code is a key tool for making the higher level simulations sensible and more easily interpretable. Here we have put our entire simulation into effect size units, and are now providing “knobs” to the simulation that are directly interpretable. 8.3 Exercises In the prior chapter’s exercises, you made a new BF_F function for the Welch simulation. Now incorporate the BF_F function into the one_run() function, and use your revised function to generate simulation results for this additional estimator. "],["performance-criteria.html", "Chapter 9 Performance criteria 9.1 Inference vs. Estimation 9.2 Ways of Assessing and Comparing Estimation Procedures 9.3 Assessing a Point Estimator 9.4 Assessing a Standard Error Estimator 9.5 Assessing an Inferential Procedure (Hypothesis Testing) 9.6 Assessing Confidence Intervals 9.7 Additional Thoughts on Measuring Performance 9.8 Uncertainty in Performance Estimates (the MCSE) 9.9 Exercises", " Chapter 9 Performance criteria Once we have run our simulation, we have a pile of results to sort through. Given these results, the question is now: how do we assess the performance of our evaluated estimation procedures? In this chapter, we look at a variety of performance criteria that are commonly used to compare the relative performance of multiple estimators or measure how well an estimator works. These performance criteria are all assessments of how the estimator behaves if you repeat the experimental process an infinite number of times. In statistical terms, these criteria are summaries of the true sampling distribution of the estimator, given a specified data generating process. For example, the bias of an estimator in a given scenario is how far off, on average, the estimator would be from the true parameter value if you repeated the experiment an infinite number of times. Although we cannot observe the sampling distribution of an estimator directly (and it can only rarely be worked out in full mathematical detail), the set of estimates generated by a simulation constitute a (typically large) sample from the sampling distribution of the studied estimator. (Say that six times fast!) We can then use that sample to estimate the performance criteria of interest. For example, when we wanted to know what percent of the time we would reject the null hypothesis (for a given, specified situation) we estimated that by seeing how often we rejected in 1000 trials. Now, because we have only a sample of trials rather than the full distribution, our estimates are merely estimates. In other words, they can be wrong, just due to random chance. We can describe how wrong with the Monte Carlo standard error (MCSE). The MCSE is the standard error of our estimate of performance due to the simulation only having a finite number of trials. Just as with statistical uncertainty when analyzing data, we can estimate our MCSE and even use them to generate confidence intervals for our performance estimates. The MCSE is not related to the estimators being evaluated; the MCSE is a function of how much simulation we can do. In a simulation study, we could, in theory, know exactly how well our estimators do for a given context, if we ran an infinite number of simulations; the MCSE tells us how far we are from this ideal, given how many simulation trials we actually ran. Given a desired MCSE, we could similarly determine how many replications were needed to ensure our performance estimates have a desired level of precision. 9.1 Inference vs. Estimation There are two general classes of analysis one typically does with data: inference and estimation. To illustrate, we continue to reflect on the question of best practices for analyzing a cluster randomized experiment. For this problem, we are focused on the estimand of the site-average treatment effect, \\(\\gamma_1\\). The estimand is the thing we are trying to estimate. We can ask whether \\(\\gamma_1\\) is non-zero (inference), and we can further ask what \\(\\gamma_1\\) actually is (estimation). More expanded we have: Inference is when we do hypothesis testing, asking whether there is evidence for some sort of effect, or asking whether there is evidence that some coefficient is greater than or less than some specified value. In particular, for our example, to know if there is evidence that there is an average treatment effect at all we would test the null of \\(H_0: \\gamma_1 = 0\\). Estimation is when we try to measure the size of an estimand such as an actual average treatment effect \\(\\gamma_1\\). Estimation has two major components, the point estimator and the uncertainty estimator. We generally evaluate both the properties of the point estimator and the performance of the properties of the point estimator. For example, consider a specific estimate \\(\\hat{\\gamma_1}\\) of our average treatment effect. We first wish to know the actual bias and true standard error (\\(SE\\)) of \\(\\hat{\\gamma_1}\\). These are its actual properties. However, for each estimated \\(\\hat{\\gamma_1}\\), we also estimate \\(\\widehat{SE}\\), as our estimated measure of how precise our estimate is. We need to understand the properties of \\(\\widehat{SE}\\) as well. Inference and estimation are clearly highly related–if we have a good estimate of the treatment effect and it is not zero, then we are willing to say that there is a treatment effect–but depending on the framing, the way you would set up a simulation to investigate the behavior of your estimators could be different. 9.2 Ways of Assessing and Comparing Estimation Procedures We often have different methods for obtaining some estimate, and we often want to know which is best. For example, comparison is the core question behind our running example of identifying which estimation strategy (aggregation, linear regression, or multilevel modeling) we should generally use when analyzing cluster randomized trial data. The goal of a simulation comparing our estimators would be to identify whether our estimation strategies were different, whether one was superior to the other (and when), and what the salient differences were. To fully understand the trade-offs and benefits, we would examine and compare the properties of our different approaches across a variety of circumstances, and with respect to a variety of metrics of success. For inference, we first might ask whether our methods are valid, i.e., ask whether the methods work correctly when we test for a treatment effect when there is none. For example, we might wonder whether using multilevel models could open the door to inference problems if we had model misspecification, such as in a scenario where the residuals had some non-normal distribution. These sorts of questions are questions of validity. Also for inference, we might ask which method is better for detecting an effect when there is one. Here, we want to know how our estimators perform in circumstances with a non-zero average treatment effect. Do they reject the null often, or rarely? How much does using aggregation decrease (or increase?) our chances of rejection? These are questions about power. For estimation, we generally are concerned with two things: bias and variance. An estimator is biased if it would generally give estimates that are systematically higher (or lower) than the parameter being estimated in a given scenario. The variance of an estimator is a measure of how much the estimates vary from trial to trial. The variance is the true standard error, squared. We might also be concerned with how well we can estimate the uncertainty of our estimators (i.e., estimate our standard error). For example, we might have an estimator that works very well, but we have no ability to estimate how well. Continuing our example, we might want to examine how well, for example, the standard errors we get from aggregation work as compared to the standard errors we get out of our linear regression approach. Finally, we might want to know how well confidence intervals based on our methods work. Do the intervals capture the true estimands with the desired level of accuracy, across the simulation trials? Are the intervals for one method generally shorter or longer than those of another? 9.3 Assessing a Point Estimator Assessing the actual properties of a point estimator is generally fairly simple. For a given scenario, repeatedly generate data and estimate effects. Then take summary measures such as the mean and standard deviation of these repeated trials’ estimates to estimate the actual properties of the estimator via Monte Carlo. Given sufficient simulation trials, we can obtain arbitrarily accurate measures. The most common measures of an estimator are the bias, variance, and mean squared error. For example, we can ask what the variance (or standard error) of our estimator is. We can ask if our estimator is biased. We can ask what the overall \\(RMSE\\) (root mean squared error) of our estimator is. To be more formal, consider an estimator \\(T\\) that is targeting a parameter \\(\\theta\\). A simulation study generates a (typically large) sample of estimates \\(T_1,...,T_R\\), all of the target \\(\\theta\\). We know \\(\\theta\\) because we generated the data. We can first assess whether our estimator is biased, by comparing the mean of our \\(R\\) estimates \\[ \\bar{T} = \\frac{1}{R}\\sum_{r=1}^R T_r \\] to \\(\\theta\\). The bias of our estimator is \\(bias = \\bar{T} - \\theta\\). We can also ask how variable our estimator is, by calculating the variance of our \\(R\\) estimates \\[\\displaystyle{S_T^2 = \\frac{1}{R - 1}\\sum_{r=1}^R \\left(T_r - \\bar{T}\\right)^2} . \\] The square root of this, \\(S_T\\) is the true standard error of our estimator (up to Monte Carlo simulation uncertainty). Finally, the Root Mean Square Error (RMSE) is a combination of the above two measures: \\[ RMSE = \\left\\{ \\frac{1}{R} \\sum_{r = 1}^R \\left( T_r - \\theta\\right)^2 \\right\\}^{1/2}. \\] Often people talk about the MSE (Mean Squared Error)–this is just the RMSE squared. An important relationship connecting these three measures is \\[ RMSE^2 = bias^2 + variance = bias^2 + SE^2 .\\] It is important to clarify an important point: the true standard error of an estimator \\(\\hat{\\gamma_1}\\) is the standard deviation of \\(\\hat{\\gamma_1}\\) across multiple datasets. In practice, we never know this value, but in a simulation we can obtain it as the standard deviation of our simulation trial estimates. People generally, when they say “Standard Error” mean estimated Standard Error, (\\(\\widehat{SE}\\)) which is when one uses the emperical data to estimate \\(SE\\). For assessing actual properties, we have the true standard error (up to Monte Carlo simulation error). For absolute assessments of performance, an estimator with low bias, low variance, and thus low RMSE is desired. For comparisons of relative performance, an estimator with lower RMSE is usually preferable to an estimator with higher RMSE; if two estimators have comparable RMSE, then the estimator with lower bias would usually be preferable. It is important to recognize that the above performance measures depend on the scale of the parameter. For example, if our estimators are measuring a treatment impact in dollars, then our bias, SE, and RMSE are all in dollars. The variance and MSE would be in dollars squared, which is why we take their square roots to put them back on an intepretable dollars scale. Usually in a simulation, the scale of the outcome is irrelevant as we are comparing one estimator to the other. To ease interpretation, we might want to assess estimators relative to the baseline variation. To achieve this, we can generate data so the outcome has unit variance (i.e., we generate standardized data). Then the bias, median bias, and root mean-squared error would all be in standard deviation units. By contrast, a nonlinear change of scale of a parameter can lead to nonlinear changes in the performance measures. For instance, suppose that \\(\\theta\\) is a measure of the proportion of time that a behavior occurs. A natural way to transform this parameter would be to put it on the log-odds (logit) scale. However, because of the nonlinear aspect of the logit, \\[\\text{Bias}\\left[\\text{logit}(T)\\right] \\neq \\text{logit}\\left(\\text{Bias}[T]\\right), \\qquad \\text{RMSE}\\left[\\text{logit}(T)\\right] \\neq \\text{logit}\\left(\\text{RMSE}[T]\\right),\\] and so on. This is fine, but one should be aware that this can happen and do it on purpose. 9.3.1 Comparing the Performances of the Cluster RCT Estimation Procedures Given our simulation results generated in the last chapter, we next assess the bias, standard error, and RMSE of our three different estimators of the ATE. These performance criteria address these primary questions: Is the estimator systematically off? (bias) Is it precise? (standard error) Does it predict well? (RMSE) Let us see how the three estimators compare on these criteria. Are the estimators biased? Bias is with respect to a target estimand. Here we assess whether our estimates are systematically different from the \\(\\gamma_1\\) parameter we used to generate the data (this is the ATE parameter, which we had set to 0.30). runs %&gt;% group_by( method ) %&gt;% summarise( mean_ATE_hat = mean( ATE_hat ), bias = mean( ATE_hat - ATE ) ) ## # A tibble: 3 × 3 ## method mean_ATE_hat bias ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Agg 0.306 0.00561 ## 2 LR 0.390 0.0899 ## 3 MLM 0.308 0.00788 Linear regression, with a bias of about 0.09 effect size units, appears about ten times as biased as the other estimators. There is no evidence of major bias for Agg or MLM. This is because the linear regression is targeting the person-average average treatment effect. Our data generating process makes larger sites have larger effects, so the person average is going to be higher since those larger sites will count more. Our estimand, by contrast, is the site average treatment effect, i.e., the simple average of each site’s true impact, which our DGP has set to 0.30. The Agg and MLM methods, by contrast, estimate this site-average effect, putting them in line with our DGP. If we had instead decided our target estimand was the person average effect, then we would see linear regression as unbiased, and Agg and MLM as biased; it is important to think carefully about what the estimators are targeting, and report bias with respect to a clearly articulated goal. Which method has the smallest standard error? The true Standard Error is simply how variable a point estimator is, and is calculated as the standard deviation of the point estimates for a given estimator. The Standard Error reflects how stable our estimates are across datasets that all came from the same data generating process. We calculate the standard error, and also the relative standard error using linear regression as a baseline: true_SE &lt;- runs %&gt;% group_by( method ) %&gt;% summarise( SE = sd( ATE_hat ) ) true_SE %&gt;% mutate( per_SE = SE / SE[method==&quot;LR&quot;] ) ## # A tibble: 3 × 3 ## method SE per_SE ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Agg 0.168 0.916 ## 2 LR 0.183 1 ## 3 MLM 0.168 0.916 These standard errors are all what we would be trying to estimate with a standard error estimator in a normal data analysis. The other methods appear to have SEs about 8% smaller than Linear Regression. Which method has the smallest Root Mean Squared Error? So far linear regression is not doing well: it has more bias and a larger standard error than the other two. We can assess overall performance by combining these two quantities with the RMSE: runs %&gt;% group_by( method ) %&gt;% summarise( bias = mean( ATE_hat - ATE ), SE = sd( ATE_hat ), RMSE = sqrt( mean( (ATE_hat - ATE)^2 ) ) ) %&gt;% mutate( per_RMSE = RMSE / RMSE[method==&quot;LR&quot;] ) ## # A tibble: 3 × 5 ## method bias SE RMSE per_RMSE ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Agg 0.00561 0.168 0.168 0.823 ## 2 LR 0.0899 0.183 0.204 1 ## 3 MLM 0.00788 0.168 0.168 0.823 We also include SE and bias as reference. RMSE is a way of taking both bias and variance into account, all at once. For Agg and MLM, the RMSE is basically the standard error; this makes sense as they are not biased. For LR, the combination of bias plus increased variability gives a higher RMSE. That said, clearly the standard error dominates the bias term (note how RMSE and SE are more similar than RMSE and bias). This is especially the case as RMSE is the square root of the bias and standard errors squared; this makes difference between them even more extreme. Overall, Agg and MLM have RMSEs around 16% smaller than LR–this seems notable. 9.3.2 Handling Estimands Not Represented By a Parameter In our Cluster RCT example, we have focused on an estimand of the ATE as captured by our model parameter \\(\\gamma_1\\). But say we were interested in the person-average effect. This is not represented by any number, so we would have to calculate it and then compare all of our estimates to it. We offer two ways of doing this. The first is to simply generate a massive dataset, and then average across it to get a good estimate of the true person-average effect. If our dataset is big enough, then the uncertainty in this estimate will be neglidgable compared to the uncertainty in our simulation. Here we try this: dat = gen_dat_model( n_bar = 30, J=100000, gamma_1 = 0.3, gamma_2 = 0.5, sigma2_u = 0.20, sigma2_e = 0.80, alpha = 0.75 ) ATE_person = mean( dat$Yobs[dat$Z==1] ) - mean( dat$Yobs[dat$Z==0] ) ATE_person ## [1] 0.3920888 Note our estimate of the person-average effect of 0 is about what we would expect given the bias of the linear model! Note how bias and RMSE have shifted, but SE is the same, when we compare to ATE_person: runs %&gt;% group_by( method ) %&gt;% summarise( bias = mean( ATE_hat - ATE_person ), SE = sd( ATE_hat ), RMSE = sqrt( mean( (ATE_hat - ATE_person)^2 ) ) ) %&gt;% mutate( per_RMSE = RMSE / RMSE[method==&quot;LR&quot;] ) ## # A tibble: 3 × 5 ## method bias SE RMSE per_RMSE ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Agg -0.0865 0.168 0.189 1.03 ## 2 LR -0.00222 0.183 0.183 1 ## 3 MLM -0.0842 0.168 0.188 1.02 We see Agg and MLM are now biased, and LR is unbiased. RMSE is now a tension between bias and reduced variance. Overall, Agg and MLM are 4% worse than LR in terms of RMSE, because they have lower SEs but more bias. The second method of calculating ATE_person would be to record the true person average effect of the dataset of each simulation iteration, and then average those at the end. To do this we would need to modify our gen_dat_model() DGP code to track this additional information. We might have, for example tx_effect = gamma_1 + gamma_2 * (nj-n_bar)/n_bar beta_0j = gamma_0 + Zj * tx_effect + u0j and then we would return tx_effect as well as Yobs and Z as a column in our dataset. This is similar to directly calculating potential outcomes, as discussed in Chapter 22. Once we modified our DGP code, we also need to modify our analysis functions to record this information. We might have, for example: analyze_data = function( dat ) { MLM = analysis_MLM( dat ) LR = analysis_OLS( dat ) Agg = analysis_agg( dat ) res &lt;- bind_rows( MLM = MLM, LR = LR, Agg = Agg, .id = &quot;method&quot; ) res$ATE_person = mean( dat$tx_effect ) return( res ) } Now when we run our simulation, we would have a column which is the true person average treatment effect for each dataset. We could then take the average of those across our datasets to estimate the true person average treatment effect in the population, and then compare our point estimators to that value. Clearly, an estimand that is not represented by a parameter is more difficult to work with, but it is not impossible. As always, be clear as to what you are trying to estimate. 9.4 Assessing a Standard Error Estimator Statistics is perhaps more about assessing how good an estimate is than making an estimate in the first place. This translates to simulation studies: in our simulation we can know an estimator’s actual properties, but if we were to use this estimator in practice we would have to also estimate its associated standard error, and generate confidence intervals and so forth using this standard error estimate. To understand if this would work in practice, we would need to evaluate not only the behavior of the estimator itself, but the behavior of these associated things. In other words, we generally not only want to know whether our point estimator is doing a good job, but we usually want to know whether we are able to get a good standard error for that point estimator as well. To do this we first compare the expected value of \\(\\widehat{SE}\\) (estimated with the average \\(\\widehat{SE}\\) across our simulation trials) to the actual \\(SE\\). This tells us whether our uncertainty estimates are biased. We could also examine the standard deviation of \\(\\widehat{SE}\\) across trials, which tells us whether our estimates of uncertainty are relatively stable. We finally could examine whether there is correlation between \\(\\widehat{SE}\\) and the actual error (e.g., \\(\\left|T - \\theta \\right|\\)). Good estimates of uncertainty should predict error in a given context (especially if calculating conditional estimates); see Sundberg (2003). For the first assessment, we usually assess the quality of a standard error estimator with a relative performance criteria, rather than an absolute one, meaning we compare the estimated standard error to the true standard error as a ratio. For an example, suppose that in our simulation we are examining the performance of a point-estimator \\(T\\) for a parameter \\(\\theta\\) along with an estimator \\(\\widehat{SE}\\) for the standard error of \\(T\\). In this case, we likely do not know the true standard error of \\(T\\), for our simulation context, prior to the simulation. However, we can use the variance of \\(T\\) across the replications (\\(S_T^2\\)) to directly estimate the true sampling variance \\(\\text{Var}(T) = SE^2(T)\\). The relative bias of \\(\\widehat{SE}^2\\) would then be estimated by \\(RB = \\bar{V} / S_T^2\\), where \\(\\bar{V}\\) is the average of \\(\\widehat{SE}^2\\) across simulation runs. Note that a value of 1 for relative bias corresponds to exact unbiasedness of the variance estimator. The relative bias measure is a measure of proportionate under- or over-estimation. For example, a relative bias of 1.12 would mean the standard error was, on average, 12% too large. We discuss relative performance measures further in Section 9.7.1. 9.4.1 Why Not Assess the Estimated SE directly? We typically see assessment of \\(\\widehat{SE}^2\\), not \\(\\widehat{SE}\\). In other words, we typically work with assessing whether the variance estimator is unbiased, etc., rather than the standard error estimator. This comes out of a few reasons. First, in practice, so-called unbiased standard errors usually are not in fact actually unbiased (see the delightfully titled section 11.5, “The Joke Is on Us: The Standard Deviation Estimator is Biased after All,” in Westfall and Henning (2013) for further discussion). For linear regression, for example, the classic standard error estimator is an unbiased variance estimator, meaning that we have a small amount of bias due to the square-rooting because: \\[ E[ \\sqrt{ V } ] \\neq \\sqrt{ E[ V ] } . \\] Variance is also the component that gives us the classic bias-variance breakdown of \\(MSE = Variance + Bias^2\\), so if we are trying to assign whether an overall MSE is due to instability or systematic bias, operating in this squared space may be preferable. That being said, to put things in terms of performance criteria humans understand, it is usually nicer to put final evaluation metrics back into standard error units. For example, saying there is a 10% reduction in the standard error is more meaningful (even if less impressive sounding) than saying there is a 19% reduction in the variance. 9.4.2 Assessing SEs for Our Cluster RCT Simulation To assess whether our estimated SEs are about right, we can look at the average estimated (squared) standard error and compare it to the true standard error. Our standard errors are inflated if they are systematically larger than they should be, across the simulation runs. We can also look at how stable our standard error estimates are, by taking the standard deviation of our standard error estimates. We interpret this quantity relative to the actual standard error to get how far off, as a percent of the actual standard error, we tend to be. runs %&gt;% group_by( method ) %&gt;% summarise( SE = sd( ATE_hat ), mean_SEhat = sqrt( mean( SE_hat^2 ) ), infl = 100 * mean_SEhat / SE, sd_SEhat = sd( SE_hat ), stability = 100 * sd_SEhat / SE ) ## # A tibble: 3 × 6 ## method SE mean_SEhat infl sd_SEhat stability ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Agg 0.168 0.174 104. 0.0232 13.8 ## 2 LR 0.183 0.185 101. 0.0309 16.8 ## 3 MLM 0.168 0.174 104. 0.0232 13.8 The SEs for Agg and MLM appear to be a bit conservative on average. (3 or 4 percentage points too big). The last column (stability) shows how variable the standard error estimates are relative to the true standard error. 50% would mean the standard error estimates can easily be off by 50% of the truth, which would not be particularly good. Here we see the linear regression is more unstable than the other methods (cluster-robust standard errors are generally known to be a bit unstable, so this is not too surprising). It is a bad day for linear regression. 9.5 Assessing an Inferential Procedure (Hypothesis Testing) When hypothesis tests are used in practice, the researcher specifies a null (e.g., no treatment effect), collects data, and generates a \\(p\\)-value, which is a measure of how extreme the observed data are from what we would expect to naturally occur, if the null were true. When we assess a method for hypothesis testing, we are therefore typically concerned with two aspects: validity and power. 9.5.1 Validity Validity revolves around whether we erroneously reject a true null more than we should. Put another way, we say an inference method is valid if it has no more than an \\(\\alpha\\) chance of rejecting the null, when it is true, when we are testing at the \\(\\alpha\\) level. This means if we used this method 1000 times, where the null was true for all of those 1000 times, we should not see more than about \\(1000 \\alpha\\) rejections (so, 50, if we were using the classic \\(\\alpha = 0.05\\) rule). To assess validity we would therefore specify a data generating process where the null is in fact true. We then, for a series of such data sets with a true null, conduct our inferential processes on the data, record the \\(p\\)-value, and score whether we reject the null hypothesis or not. We might then test our methods by exploring more extreme data generation processes, where the null is true but other aspects of the data (such as outliers or heavy skew) make estimation difficult. This allows us to understand if our methods are robust to strange data patterns in finite sample contexts. The key concept for validity is that the date we generate, no matter how we do it, must be data with a true null. The check is always then to see if we reject the null more than we should. 9.5.2 Power Power is, loosely speaking, how often we notice an effect when one is there. Power is a much more nebulous concept than validity, because some effects (e.g. large effects) are clearly easier to notice than others. If we are comparing estimators to each other, the overall chance of noticing is less of a concern, because we are typically interested in relative performance. That being said, in order to generate data for a power evaluation, we have to generate data where there is something to detect. In other words, we need to commit to what the alternative is, and this can be a tricky business. Typically, we think of power as a function of sample size or effect size. Therefore, we will typically examine a sequence of scenarios with steadily increasing sample size or effect size, estimating the power for each scenario in the sequence. We then, for each sample in our series, estimate the power by the same process as for validity, above. When assessing validity, we want rejection rates to be low, below \\(\\alpha\\), and when assessing power we want them to be as high as possible. But the simulation process itself, other than the data generating process, is exactly the same. 9.5.3 The Rejection Rate To put some technical terms to this framing, for both validity and power assessment the main performance criterion is the rejection rate of the hypothesis test. When the data are simulated from a model in which the null hypothesis being tested is true, then the rejection rate is equivalent to the Type-I error rate of the test. When the data are simulated from a model in which the null hypothesis is false, then the rejection rate is equivalent to the power of the test (for the given alternate hypothesis represented by the DGP). Ideally, a testing procedure should have actual Type-I error equal to the nominal level \\(\\alpha\\) (this is the definition of validity), but such exact tests are rare. There are some different perspectives on how close the actual Type-I error rate should be in order to qualify as suitable for use in practice. Following a strict statistical definition, a hypothesis testing procedure is said to be level-\\(\\alpha\\) if its actual Type-I error rate is always less than or equal to \\(\\alpha\\). Among a set of level-\\(\\alpha\\) tests, the test with highest power would be preferred. If looking only at null rejection rates, then the test with Type-I error closest to \\(\\alpha\\) would usually be preferred. A less stringent criteria is sometimes used instead, where type I error would be considered acceptable if it is within 50% of the desired \\(\\alpha\\). Often, it is of interest to evaluate the performance of the test at several different \\(\\alpha\\) levels. A convenient way to calculate a set of different rejection rates is to record the simulated \\(p\\)-values and then calculate from those. To illustrate, suppose that \\(P_r\\) is the \\(p\\)-value from simulation replication \\(k\\), for \\(k = 1,...,R\\). Then the rejection rate for a level-\\(\\alpha\\) test is defined as \\(\\rho_\\alpha = \\text{Pr}\\left(P_r &lt; \\alpha\\right)\\) and estimated as, using the recorded \\(p\\)-values, \\[r_\\alpha = \\frac{1}{R} \\sum_{r=1}^R I(P_r &lt; \\alpha).\\] For a null DGP, one can also plot the emperical cumulative density function of the \\(p\\)-values; a valid test should give a \\(45^\\circ\\) line as the \\(p\\)-values should be standard uniform in distribution. 9.5.4 Inference in our Cluster RCT Simulation For our scenario, we generated data with an actual treatment effect. Without further simulation, we therefore could only assess power, not validity. This is easily solved! We simply rerun our simulation code that we made last chapter with simhelpers, but with setting ATE = 0. set.seed( 404044 ) runs_val &lt;- sim_function( R, n_bar = 30, J = 20, gamma_1 = 0 ) saveRDS( runs_val, file = &quot;results/cluster_RCT_simulation_validity.rds&quot; ) Assessing power and validity is exactly the same calculation: we see how often we have a \\(p\\)-value less than 0.05. For power we have: runs %&gt;% group_by( method ) %&gt;% summarise( power = mean( p_value &lt;= 0.05 ) ) ## # A tibble: 3 × 2 ## method power ## &lt;chr&gt; &lt;dbl&gt; ## 1 Agg 0.376 ## 2 LR 0.503 ## 3 MLM 0.383 For validity: runs_val %&gt;% group_by( method ) %&gt;% summarise( power = mean( p_value &lt;= 0.05 ) ) ## # A tibble: 3 × 2 ## method power ## &lt;chr&gt; &lt;dbl&gt; ## 1 Agg 0.051 ## 2 LR 0.059 ## 3 MLM 0.048 The power when there is an effect (for this specific scenario) is not particularly high, and the validity is around 0.05, as desired. Linear regression has notabily higher power… but this may be in part due to the invalidity of the test (note the rejection rate is around 6%, rather than the target of 5%). The elevated power is also likely due to the upward bias in estimation. As discussed above, LR is targeting the person-average impact which, in this case, is not 0 even under our null because we have kept our impact heterogeniety parameter to its default of \\(\\gamma_2=0.2\\), meaning we have treatment variation around 0. We could run our simulation with truly null effects to see if the false rejection rate goes down. 9.6 Assessing Confidence Intervals Some estimation procedures result in confidence intervals (or sets) which are ranges of values that should contain the true answer with some specified degree of confidence. For example, a normal-based confidence interval is a combination of an estimator and its estimated uncertainty. We typically score a confidence interval along two dimensions, coverage rate and average length. To calculate coverage rate, we score whether each interval “captured” the true parameter. A success is if the true parameter is inside the interval. To calculate average length, we record each confidence interval’s length, and then average across simulation runs. We say an estimator has good properties if it has good coverage, i.e. it is capturing the true value at least \\(1-\\alpha\\) of the time, and if it is generally short (i.e., the average length of the interval is less than the average length for other methods). Confidence interval coverage is simultaneously evaluating the estimators in terms of how well they estimate (precision) and their inferential properties. We have combined inference and estimation. Suppose that the confidence intervals are for the target parameter \\(\\theta\\) and have coverage level \\(\\beta\\). Let \\(A_r\\) and \\(B_r\\) denote the lower and upper end-points of the confidence interval from simulation replication \\(r\\), and let \\(W_r = B_r - A_r\\), all for \\(r = 1,...,R\\). The coverage rate \\(\\omega_\\beta\\) and average length \\(\\text{E}(W)\\) criteria are then as defined in the table below. Criterion Definition Estimate Coverage \\(\\omega_\\beta = \\text{Pr}(A \\leq \\theta \\leq B)\\) \\(\\frac{1}{R}\\sum_{r=1}^R I(A_r \\leq \\theta \\leq B_r)\\) Expected length \\(\\text{E}(W) = \\text{E}(B - A)\\) \\(\\bar{W} = \\bar{B} - \\bar{A}\\) Just as with hypothesis testing, a strict statistical interpretation would deem a hypothesis testing procedure acceptable if it has actual coverage rate greater than or equal to \\(\\beta\\). If multiple tests satisfy this criterion, then the test with the lowest expected length would be preferable. Some analysts prefer to look at lower and upper coverage separately, where lower coverage is \\(\\text{Pr}(A \\leq \\theta)\\) and upper coverage is \\(\\text{Pr}(\\theta \\leq B)\\). 9.6.1 Confidence Intervals in our Cluster RCT Example For our CRT simulation, we first have to calculate confidence intervals, and then assess coverage. We could have used methods such as confint() in the estimation approaches; this would be preferred if we wanted more accurately calculated confidence intervals that used \\(t\\)-distributions and so forth to account for the moderate number of clusters. But if we want to use normal assumption confidence intervals we can calculate them post-hoc: runs %&gt;% mutate( CI_l = ATE_hat - 1.96*SE_hat, CI_h = ATE_hat + 1.96*SE_hat, covered = CI_l &lt;= ATE &amp; ATE &lt;= CI_h, width = CI_h - CI_l ) %&gt;% group_by( method ) %&gt;% summarise( coverage = mean( covered ), width = mean( width )) ## # A tibble: 3 × 3 ## method coverage width ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Agg 0.942 0.677 ## 2 LR 0.908 0.717 ## 3 MLM 0.943 0.677 Our coverage is about right for Agg and MLM, and around 5 percentage points too low for LR. Linear regression is taking a hit from the bias term. The CIs of LR are a bit wider than the other methods due to the estimated SEs being slightly larger. 9.7 Additional Thoughts on Measuring Performance In this section we provide some additional thoughts on performance measures. We first discuss relative vs. absolute criteria some more, then touch on robust measures of performance. We finally summarize the measures we discuss in this chapter. 9.7.1 Selecting Relative vs. Absolute Criteria We have primarily examined performance estimators for point estimators using absolute criteria, focusing on measures like bias directly on the scale of the outcome. In contrast, for evaluation things such as estimated standard errors, which are always positive and scale-dependent, it often makes sense to use relative criteria, i.e., criteria calculated as proportions of the target parameter (\\(T/\\theta\\)) rather than as differences (\\(T - \\theta\\)). We typically apply absolute criteria to point estimators and relative criteria to standard error estimators (we are setting aside, for the moment, the relative criteria of a measure from one estimation procedure to another, as we saw earlier when we compared the SEs to a baseline SE of linear regression for the cluster randomized trial simulation. So how do we select when to use what? As a first piece of guidance, establish whether we expect the performance (e.g., bias, standard error, or RMSE) of a point estimate to depend on the magnitude of the estimand. For example, if we are estimating some mean \\(\\theta\\), and we generate data where \\(\\theta = 100\\) vs where \\(\\theta = 1000\\) (or any other arbitrary number), we would not generally expect the value of \\(\\theta\\) to change the magnitude of bias, variance, or MSE. On the other hand, these different \\(\\theta\\)s would have a large impact on the relative bias and relative MSE. (Want smaller relative bias? Just add a million to the parameter!) For these sorts of “location parameters” we generally use absolute measures of performance. That being said, a more principled approach for determining whether to use absolute or relative performance criteria depends on assessing performance for multiple values of the parameter. In many simulation studies, replications are generated and performance criteria are calculated for several different values of a parameter, say \\(\\theta = \\theta_1,...,\\theta_p\\). Let’s focus on bias for now, and say that we’ve estimated (from a large number of replications) the bias at each parameter value. We present two hypothetical scenarios, A and B, in the figures below. If the absolute bias is roughly the same for all values of \\(\\theta\\) (as in Scenario A), then it makes sense to report absolute bias as the summary performance criterion. On the other hand, if the bias grows roughly in proportion to \\(\\theta\\) (as in Scenario B), then relative bias might be a better summary criterion. Performance relative to a baseline estimator. Another relative measure, as we saw earlier, is to calculate performance relative to some baseline. For example, if one of the estimators is the “generic method,” we could calculate ratios of the RMSE of our estimators to the baseline RMSE. This can provide a way of standardizing across simulation scenarios where the overall scale of the RMSE changes radically. This could be critical to, for example, examining trends across simulations that have different sample sizes, where we would expect all estimators’ performance measures to improve as sample size grows. This kind of relative standardization allows us to make statements such as “Aggregation has standard errors around 8% smaller than linear regression”–which is very interpretable, more interpretable than saying “Aggregation has standard errors around 0.01 smaller than linear regression.” In the latter case, we do not know if that is big or small. While a powerful tool, standardization is not without risks: if you scale relative to something, then higher or lower ratios can either be due to the primary method of interest (the numerator) or due to the behavior of the reference method in the denominator. These relative ratios can end up being confusing to interpret due to this tension. They can also break when everything is on a constrained scale, like power. If we have a power of 0.05, and we improve it to 0.10, we have doubled our power, but if it is 0.10 and we increase to 0.15, we have only increased by 50%. Ratios when near zero can be very deceiving. 9.7.2 Robust Measures of Performance Depending on the model and estimation procedures being examined, a range of different criteria might be used to assess estimator performance. For point estimation, we have seen bias, variance and MSE as the three core measures of performance. Other criteria exist, such as the median bias and the median absolute deviation of \\(T\\), where we use the median \\(\\tilde{T}\\) of our estimates rather than the mean \\(\\bar{T}\\). The usual bias, variance and MSE measures can be sensitive to outliers. If an estimator generally does well, except for an occasional large mistake, these classic measures can return very poor overall performance. Instead, we might turn to quantities such as the median bias (sort all the estimation errors across the simulation scenarios, and take the middle), or the Median Absolute Distance (MAD, where you take the median of the absolute values of the errors, which is an alternative to RMSE) as a measure of performance. Other robust measures are also possible, such as simply truncating all errors to a maximum size (this is called Windsorizing). This is a way of saying “I don’t care if you are off by 1000, I am only going to count it as 10.” 9.7.3 Summary of Peformance Measures We list most of the performance criteria we saw in this chapter in the table below, for reference: Criterion Definition Estimate Bias \\(\\text{E}(T) - \\theta\\) \\(\\bar{T} - \\theta\\) Median bias \\(\\text{M}(T) - \\theta\\) \\(\\tilde{T} - \\theta\\) Variance \\(\\text{E}\\left[\\left(T - \\text{E}(T)\\right)^2\\right]\\) \\(S_T^2\\) MSE \\(\\text{E}\\left[\\left(T - \\theta\\right)^2\\right]\\) \\(\\left(\\bar{T} - \\theta\\right)^2 + S_T^2\\) MAD \\(\\text{M}\\left[\\left|T - \\theta\\right|\\right]\\) \\(\\left[\\left|T - \\theta\\right|\\right]_{R/2}\\) Relative bias \\(\\text{E}(T) / \\theta\\) \\(\\bar{T} / \\theta\\) Relative median bias \\(\\text{M}(T) / \\theta\\) \\(\\tilde{T} / \\theta\\) Relative MSE \\(\\text{E}\\left[\\left(T - \\theta\\right)^2\\right] / \\theta^2\\) \\(\\frac{\\left(\\bar{T} - \\theta\\right)^2 + S_T^2}{\\theta^2}\\) Bias and median bias are measures of whether the estimator is systematically higher or lower than the target parameter. Variance is a measure of the precision of the estimator—that is, how far it deviates from its average. We might look at the square root of this, to assess the precision in the units of the original measure. This is the true SE of the estimator. Mean-squared error is a measure of overall accuracy, i.e. is a measure how far we typically are from the truth. We more frequently use the root mean-squared error, or RMSE, which is just the square root of the MSE. The median absolute deviation (MAD) is another measure of overall accuracy that is less sensitive to outlier estimates. The RMSE can be driven up by a single bad egg. The MAD is less sensitive to this. 9.8 Uncertainty in Performance Estimates (the MCSE) Our performance criteria are defined as average performance across an infinite number of trials. Of course, in our simulations we only run a finite number of trials, and estimate the performance criteria with the sample of trials we generate. For example, if we are assessing coverage across 100 trials, we can calculate what fraction rejected the null for that 100. This is an estimate of the true coverage rate. Due to random chance, we might see a higher, or lower, proportion rejected than what we would see if we ran the simulation forever. To account for estimation uncertainty we want associated uncertainty estimates to go with our point estimates of performance. We want to, in other words, treat our simulation results as a dataset in its own right. (And yes, this is quite meta!) Once we frame the problem in these terms, it is relatively straightforward to calculate standard errors for most of the performance critera because we have an independent and identically distributed set of measurements. We call these standard errors Monte Carlo Simulation Errors, or MCSEs. For some of the performance criteria we have to be a bit more clever, as we will discuss below. We list MCSE expressions for many of our straightforward performance measures on the following table. In reading the table, recall that, for an estimator \\(T\\), we have \\(S_T\\) being the standard deviation of \\(T\\) across our simulation runs (i.e., our estimated true Standard Error). We also have Sample skewness (standardized): \\(\\displaystyle{g_T = \\frac{1}{R S_T^3}\\sum_{r=1}^R \\left(T_r - \\bar{T}\\right)^3}\\) Sample kurtosis (standardized): \\(\\displaystyle{k_T = \\frac{1}{R S_T^4} \\sum_{r=1}^R \\left(T_r - \\bar{T}\\right)^4}\\) Criterion for T MCSE Bias (\\(T-\\theta\\)) \\(\\sqrt{S_T^2/ R}\\) Variance (\\(S_T^2\\)) \\(\\displaystyle{S_T^2 \\sqrt{\\frac{k_T - 1}{R}}}\\) MSE see below MAD - Power &amp; Validity (\\(r_\\alpha\\)) \\(\\sqrt{ r_\\alpha \\left(1 - r_\\alpha\\right) / R}\\) Coverage (\\(\\omega_\\beta\\)) \\(\\sqrt{\\omega_\\beta \\left(1 - \\omega_\\beta\\right) / R}\\) Average length (\\(\\text{E}(W)\\)) \\(\\sqrt{S_W^2 / R}\\) The MCSE for the MSE is a bit more complicated, and does not quite fit on our table: \\[ \\widehat{MCSE}( \\widehat{MSE} ) = \\displaystyle{\\sqrt{\\frac{1}{R}\\left[S_T^4 (k_T - 1) + 4 S_T^3 g_T\\left(\\bar{T} - \\theta\\right) + 4 S_T^2 \\left(\\bar{T} - \\theta\\right)^2\\right]}} .\\] For relative quantities with respect to an estimand, simply divide the criterion by the target estimand. E.g., for relative bias \\(T / \\theta\\), the standard error would be \\[ SE\\left( \\frac{T}{\\theta} \\right) = \\frac{1}{\\theta} SE(T) = \\sqrt{\\frac{S_T^2}{R\\theta^2}} .\\] For square rooted quantities, such as the SE for the true SE (square root of the Variance) or the RMSE (square root of MSE) we can use the Delta method. The Delta method says (with some conditions), that if we assume \\(X \\sim N( \\phi, V )\\), then we can approximate the distribution of \\(g(X)\\) for some continuous function \\(g(\\cdot)\\) as \\[ g(X) \\sim N\\left( g(\\phi), \\;\\; g&#39;(\\phi)^2\\cdot V \\right) , \\] where \\(g&#39;(\\phi)\\) is the derivative of \\(g(\\cdot)\\) evaluated at \\(\\phi\\). In other words, \\[ SE( g(\\hat{X}) ) \\approx g&#39;(\\theta) \\times SE(\\hat{X}) .\\] For estimation, we plug in \\(\\hat{\\theta}\\) and our estimate of \\(SE(\\hat{X})\\) into the above. Back to the square root, we have \\(g(x) = \\sqrt(x)\\) and \\(g&#39;(x) = 1/2\\sqrt(x)\\). This gives, for example, the estimated MCSE of the SE as \\[ \\widehat{SE}( \\widehat{SE} ) = \\widehat{SE}( S^2_T ) = \\frac{1}{2S^2_T} \\widehat{SE}( S^2_T ) = \\frac{1}{2S^2_T} S_T^2 \\sqrt{\\frac{k_T - 1}{R}} = \\frac{1}{2} \\sqrt{\\frac{k_T - 1}{R}} .\\] 9.8.1 MCSE for Relative Variance Estimators Estimating the MCSE of the relative bias or relative MSE of a (squared) standard error estimator, i.e., of \\(E( \\widehat{SE^2} - SE^2 ) / SE^2 )\\) or \\(\\widehat{MSE} / MSE\\), is complicated by the appearance of an estimated quantity, \\(SE^2\\) or \\(MSE\\), in the denominator of the ratio. This renders the simple division approach from above unusable, technically speaking. The problem is we cannot use our clean expressions for MCSEs of relative performance measures since we are not taking the uncertainty of our denominator into account. To properly assess the overall MCSE, we need to do something else. One approach is to use the jackknife technique. Let \\(\\bar{V}_{(j)}\\) and \\(S_{T(j)}^2\\) be the average squared standard error estimate and the true variance estimate calculated from the set of replicates that excludes replicate \\(j\\), for \\(j = 1,...,R\\). The relative bias estimate, excluding replicate \\(j\\) would then be \\(\\bar{V}_{(j)} / S_{T(j)}^2\\). Calculating all \\(R\\) versions of this relative bias estimate and taking the variance of these \\(R\\) versions yields the jackknife variance estimator: \\[ MCSE\\left( \\frac{ \\widehat{SE}^2 }{SE^2} \\right) = \\frac{1}{R} \\sum_{j=1}^R \\left(\\frac{\\bar{V}_{(j)}}{S_{T(j)}^2} - \\frac{\\bar{V}}{S_T^2}\\right)^2. \\] This would be quite time-consuming to compute if we did it by brute force. However, a few algebra tricks provide a much quicker way. The tricks come from observing that \\[ \\begin{aligned} \\bar{V}_{(j)} &amp;= \\frac{1}{R - 1}\\left(R \\bar{V} - V_j\\right) \\\\ S_{T(j)}^2 &amp;= \\frac{1}{R - 2} \\left[(R - 1) S_T^2 - \\frac{R}{R - 1}\\left(T_j - \\bar{T}\\right)^2\\right] \\end{aligned} \\] These formulas can be used to avoid re-computing the mean and sample variance from every subsample. Instead, you calculate the overall mean and overall variance, and then do a small adjustment with each jackknife iteration. You can even implement this with vector processing in R! 9.8.2 Calculating MCSEs With the simhelpers Package The simhelper package is designed to calculate MCSEs (and the performance metrics themselves) for you. It is easy to use: take this set of simulation runs on the Welch dataset: library( simhelpers ) data( welch_res ) welch &lt;- welch_res %&gt;% filter( method == &quot;t-test&quot; ) %&gt;% dplyr::select( -method, -seed, -iterations ) welch ## # A tibble: 8,000 × 8 ## n1 n2 mean_diff est var p_val ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 50 50 0 0.0258 0.0954 0.934 ## 2 50 50 0 0.00516 0.0848 0.986 ## 3 50 50 0 -0.0798 0.0818 0.781 ## 4 50 50 0 -0.0589 0.102 0.854 ## 5 50 50 0 0.0251 0.118 0.942 ## 6 50 50 0 -0.115 0.106 0.725 ## 7 50 50 0 0.157 0.115 0.645 ## 8 50 50 0 -0.213 0.121 0.543 ## 9 50 50 0 0.509 0.117 0.139 ## 10 50 50 0 -0.354 0.0774 0.206 ## # ℹ 7,990 more rows ## # ℹ 2 more variables: lower_bound &lt;dbl&gt;, ## # upper_bound &lt;dbl&gt; We can calculate performance metrics across all the range of scenarios. Here is the rejection rate: welch_sub = filter( welch, n1 == 50, n2 == 50, mean_diff==0 ) calc_rejection(welch_sub, p_val) ## K_rejection rej_rate rej_rate_mcse ## 1 1000 0.048 0.006759882 And coverage: calc_coverage(welch_sub, lower_bound, upper_bound, mean_diff) ## # A tibble: 1 × 5 ## K_coverage coverage coverage_mcse width ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1000 0.952 0.00676 1.25 ## # ℹ 1 more variable: width_mcse &lt;dbl&gt; Using tidyverse it is easy to process across scenarios (more on experimental design and multiple scenarios later): welch %&gt;% group_by(n1,n2,mean_diff) %&gt;% summarise( calc_rejection( p_values = p_val ) ) ## # A tibble: 8 × 6 ## # Groups: n1, n2 [2] ## n1 n2 mean_diff K_rejection rej_rate ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 50 50 0 1000 0.048 ## 2 50 50 0.5 1000 0.34 ## 3 50 50 1 1000 0.876 ## 4 50 50 2 1000 1 ## 5 50 70 0 1000 0.027 ## 6 50 70 0.5 1000 0.341 ## 7 50 70 1 1000 0.904 ## 8 50 70 2 1000 1 ## # ℹ 1 more variable: rej_rate_mcse &lt;dbl&gt; 9.8.3 MCSE Calculation in our Cluster RCT Example We can check our MCSEs for our performance measures to see if we have enough simulation trials to give us precise enough estimates to believe the differences we reported earlier. In particular, we have: library( simhelpers ) runs$ATE = ATE runs %&gt;% summarise( calc_absolute( estimates = ATE_hat, true_param = ATE, criteria = c(&quot;bias&quot;,&quot;stddev&quot;, &quot;rmse&quot;)) ) %&gt;% dplyr::select( -K_absolute ) %&gt;% knitr::kable(digits=3) bias bias_mcse stddev stddev_mcse rmse rmse_mcse 0.034 0.003 0.178 0.002 0.181 0.003 We see the MCSEs are quite small relative to the linear regression bias term and all the SEs (stddev) and RMSEs: we have simulated enough runs to see the gross trends identified. We have not simulated enough to for sure know if MLM and Agg are not slightly biased. Given our MCSEs, they could have true bias of around 0.01 (two MCSEs). 9.9 Exercises Continuing the exercises from the prior chapters, estimate rejection rates of the BFF* test for the parameter values in the fifth line of Table 1 of Brown and Forsythe (1974). Implement the jackknife as described above in code. Check your answers against the simhelpers package for the built-in t_res dataset: library( simhelpers ) calc_relative(data = t_res, estimates = est, true_param = true_param) ## # A tibble: 1 × 7 ## K_relative rel_bias rel_bias_mcse rel_mse ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1000 1.00 0.0128 0.163 ## # ℹ 3 more variables: rel_mse_mcse &lt;dbl&gt;, ## # rel_rmse &lt;dbl&gt;, rel_rmse_mcse &lt;dbl&gt; As foreground to the following chapters, can you explore multiple scenarios for the cluster RCT example to see if the trends are common? First write a function that takes a parameter, runs the entire simulation, and returns the results as a small table. You pick which parameter, e.g., average treatment effect, alpha, or whatever you like), that you wish to vary. Here is a skeleton for the function: my_simulation &lt;- function( my_param ) { # call the sim_function() simulation function from the end of last # chapter, setting the parameter you want to vary to my_param # Analyze the results, generating a table of performance metrics, # e.g., bias or coverage. Make sure your analysis is a data frame, # like we saw earlier this chapter. # Return results } Then use code like the following to generate a set of results measured as a function of a varying parameter: vals = seq( start, stop, length.out = 5 ) res = map_df( vals, my_simulation ) The above code will give you a data frame of results, one column for each performance measure. Finally, you can use this table and plot the performance measure as a function of the varying parameter. References Sundberg, Rolf. 2003. “Conditional statistical inference and quantification of relevance.” Journal of the Royal Statistical Society: Series B (Statistical Methodology) 65 (1): 299–315. Westfall, Peter H, and Kevin SS Henning. 2013. Understanding Advanced Statistical Methods. Vol. 543. CRC Press Boca Raton, FL. "],["case_Cronbach.html", "Chapter 10 Project: Cronbach Alpha 10.1 Background 10.2 Getting started 10.3 The data-generating function 10.4 The estimation function 10.5 Estimator performance 10.6 Replication (and the simulation) 10.7 Extension: Confidence interval coverage 10.8 A taste of multiple scenarios", " Chapter 10 Project: Cronbach Alpha In this section we walk through a case study of Cronbach Alpha to give an extended “project,” or series of exercises, that illustrate writing a complete simulation generated by the filling out of the code skeleton we get from simhelpers’s create_skeleton() package. 10.1 Background Cronbach’s \\(\\alpha\\) coefficient is commonly reported as a measure of the internal consistency among a set of test items. Consider a set of \\(p\\) test items with population variance-covariance matrix \\(\\boldsymbol\\Phi = \\left[\\phi_{ij}\\right]_{i,j=1}^p\\), where \\(\\phi_{ij}\\) is the covariance of item \\(i\\) and item \\(j\\) on the test, across all students taking the test. This population variance-covariance matrix describes how our \\(p\\) test items co-vary. Cronback’s \\(\\alpha\\) is, under this model, defined as \\[ \\alpha = \\frac{p}{p - 1}\\left(1 - \\frac{\\sum_{i=1}^p \\phi_{ii}}{\\sum_{i=1}^p \\sum_{j=1}^p \\phi_{ij}}\\right). \\] Given a sample of size \\(n\\), the usual estimate of \\(\\alpha\\) is obtained by replacing the population variances and covariances with corresponding sample estimates. Letting \\(s_{ij}\\) denote the sample covariance of items \\(i\\) and \\(j\\) \\[ A = \\frac{p}{p - 1}\\left(1 - \\frac{\\sum_{i=1}^p s_{ii}}{\\sum_{i=1}^p \\sum_{j=1}^p s_{ij}}\\right). \\] If we assume that the items follow a multivariate normal distribution, then \\(A\\) corresponds to the maximum likelihood estimator of \\(\\alpha\\). Our goal is to examine the properties of \\(A\\) when the set of \\(P\\) items is not multi-variate normal, but rather follows a multivariate \\(t\\) distribution with \\(v\\) degrees of freedom. For simplicity, we shall assume that the items have common variance and have a compound symmetric covariance matrix, such that \\(\\phi_{11} = \\phi_{22} = \\cdots = \\phi_{pp} = \\phi\\) and \\(\\phi_{ij} = \\rho \\phi\\). In this case we can simplify our expression for \\(\\alpha\\) to \\[ \\alpha = \\frac{p \\rho}{1 + \\rho (p - 1)}. \\] 10.2 Getting started First create the skeleton of our simulation. We will then walk through filling in all the pieces. library( simhelpers ) create_skeleton() 10.3 The data-generating function The first two sections in the skeleton are about the data-generating model: rm(list = ls()) #------------------------------------------------------ # Set development values for simulation parameters #------------------------------------------------------ # What are your model parameters? # What are your design parameters? #------------------------------------------------------ # Data Generating Model #------------------------------------------------------ dgm &lt;- function(model_params) { return(dat) } # Test the data-generating model - How can you verify that it is correct? We need to create and test a function that takes model parameters (and sample sizes and such) as inputs, and produces a simulated dataset. The following function generates a sample of \\(n\\) observations of \\(p\\) items from a multivariate \\(t\\)-distribution with a compound symmetric covariance matrix, intra-class correlation \\(\\rho\\), and \\(v\\) degrees of freedom: # model parameters alpha &lt;- 0.73 # true alpha df &lt;- 12 # degrees of freedom # design parameters n &lt;- 50 # sample size p &lt;- 6 # number of items library(mvtnorm) r_mvt_items &lt;- function(n, p, alpha, df) { icc &lt;- alpha / (p - alpha * (p - 1)) V_mat &lt;- icc + diag(1 - icc, nrow = p) X &lt;- rmvt(n = n, sigma = V_mat, df = df) colnames(X) &lt;- LETTERS[1:p] X } Note how we translate the target \\(\\alpha\\) to \\(ICC\\) for our DGP; we will see this type of translation more later on. We check our method first to see if we get the right kind of data: small_sample &lt;- r_mvt_items(n = 8, p = 3, alpha = 0.73, df = 5) small_sample ## A B C ## [1,] 2.3124033 1.4871021 0.31446430 ## [2,] -1.4587950 -1.3283014 0.63908069 ## [3,] 1.5629021 -0.8914364 -0.54087633 ## [4,] -0.3940601 -0.5341222 0.67531815 ## [5,] 0.3540992 1.0526006 0.30111128 ## [6,] -0.6923360 -2.4674208 -0.83354515 ## [7,] 1.0175186 1.3437649 1.02493679 ## [8,] -0.7536926 -0.8084425 -0.09497557 It looks like we have 8 observations of 3 items, as desired. To check that the function is indeed simulating data following the intended distribution, let’s next generate a very large sample of items. We can then verify that the correlation matrix of the items is compound-symmetric and that the marginal distributions of the items follow \\(t\\)-distributions with specified degrees of freedom. big_sample &lt;- r_mvt_items(n = 100000, p = 4, alpha = 0.73, df = 5) round(cor(big_sample), 3) ## A B C D ## A 1.000 0.398 0.395 0.396 ## B 0.398 1.000 0.393 0.400 ## C 0.395 0.393 1.000 0.402 ## D 0.396 0.400 0.402 1.000 Is this what it should look like? We can also check normality: qqplot(qt(ppoints(200), df = 5), big_sample[,2], ylim = c(-4,4)) Looks good! A nice straight line. 10.4 The estimation function The next section of the template looks like this: #------------------------------------------------------ # Model-fitting/estimation/testing functions #------------------------------------------------------ estimate &lt;- function(dat, design_params) { return(result) } # Test the estimation function van Zyl, Neudecker, and Nel (2000) demonstrate that, if the items have a compound-symmetric covariance matrix, then the asymptotic variance of \\(A\\) is \\[ \\text{Var}(A) \\approx \\frac{2p(1 - \\alpha)^2}{(p - 1) n}. \\] Substituting \\(A\\) in place of \\(\\alpha\\) on the right hand side gives an estimate of the variance of \\(A\\). The following function calculates \\(A\\) and its variance estimator from a sample of data: estimate_alpha &lt;- function(dat) { V &lt;- cov(dat) p &lt;- ncol(dat) n &lt;- nrow(dat) # Calculate A with our formula A &lt;- p / (p - 1) * (1 - sum(diag(V)) / sum(V)) # Calculate our estimate of the variance (SE^2) of A Var_A &lt;- 2 * p * (1 - A)^2 / ((p - 1) * n) # Pack up our results data.frame(A = A, Var = Var_A) } estimate_alpha(small_sample) ## A Var ## 1 0.7080628 0.03196024 The psych package provides a function for calculating \\(\\alpha\\), which can be used to verify that the calculation of \\(A\\) in estimate_alpha is correct: library(psych) summary(alpha(x = small_sample))$raw_alpha ## Number of categories should be increased in order to count frequencies. ## ## Reliability analysis ## raw_alpha std.alpha G6(smc) average_r S/N ase ## 0.71 0.7 0.87 0.44 2.4 0.13 ## mean sd median_r ## 0.054 0.93 0.63 ## NULL The next step is to evaluate these individual estimates and see how well our estimator \\(A\\) performs. 10.4.1 Exercices (Naive confidence intervals) One way to obtain an approximate confidence interval for \\(\\alpha\\) would be to take \\(A \\pm z \\sqrt{\\text{Var}(A)}\\), where \\(\\text{Var}(A)\\) is estimated as described above and \\(z\\) is a standard normal critical value at the appropriate level (i.e., \\(z = 1.96\\) for a 95% CI). Extend your simulation to calculate a confidence interval for each simulation round (put this code inside estimate_alpha()) and then calculate confidence interval coverage. Your estimate_alpha would then give a result like this: set.seed(40200) dat = r_mvt_items(n = 50, p = 5, alpha = 0.9, df = 3 ) estimate_alpha(dat) ## A Var CI_low CI_high ## 1 0.9425904 0.0001647933 0.916916 0.9682647 You can calculate confidence intervals with coverage other than 95% by calculating an appropriate number of standard errors, \\(z\\) (usually just taken as 2, as above, for a nominal 95%), with coverage = 0.95 z = qnorm( (1-coverage) / 2, lower.tail = FALSE ) z ## [1] 1.959964 Extend estimate_alpha() to allow for a specified coverage by adding a parameter, coverage, along with a default of 0.95. Revise the body of estimate_alpha to calculate a confidence interval with the specified coverage rate. 10.5 Estimator performance The next section of the template deals with performance calculations. #------------------------------------------------------ # Calculate performance measures # (For some simulations, it may make more sense # to do this as part of the simulation driver.) #------------------------------------------------------ performance &lt;- function(results, model_params) { return(performance_measures) } # Check performance calculations The performance() function takes as input a bunch of simulated data (which we might call results) and the true values of the model parameters (model_params) and returns as output a set of summary performance measures. As noted in the comments above, for simple simulations it might not be necessary to write a separate function to do these calculations. For more complex simulations, though, it can be helpful to break these calculations out in a function. To start to get the code working that we would put into this function, it is useful to start with some simulation replicates to practice on. We can generate 1000 replicates using samples of size \\(n = 40\\), \\(p = 6\\) items, a true \\(\\alpha = 0.8\\), and \\(v = 5\\) degrees of freedom: one_run &lt;- function( n, p, alpha, df ) { dat &lt;- r_mvt_items(n = n, p = p, alpha = alpha, df = df) estimate_alpha(dat) } true_alpha = 0.7 results = rerun( 1000, one_run(40, 6, alpha=true_alpha, df=5) ) %&gt;% bind_rows() ## Warning: `rerun()` was deprecated in purrr 1.0.0. ## ℹ Please use `map()` instead. ## # Previously ## rerun(1000, one_run(40, 6, alpha = true_alpha, ## df = 5)) ## ## # Now ## map(1:1000, ~ one_run(40, 6, alpha = true_alpha, ## df = 5)) ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to ## see where this warning was generated. 10.5.1 Exercises (Calculating Performance) For the Cronbach alpha simulation, we might want to calculate the following performance measures: With the parameters specified above, calculate the bias of \\(A\\). Also calculate the Monte Carlo standard error (MCSE) of the bias estimate. Estimate the true Standard Error of \\(A\\). Calculate the mean squared error of \\(A\\). Calculate the relative bias of the asymptotic variance estimator. Using the work from above, wrap your code in an alpha_performance() function that takes the results of uses run_alpha_sim and returns a one-row data frame with columns corresponding to the bias, mean squared error, relative bias of the asymptotic variance estimator. E.g., alpha_performance(results, true_alpha) ## bias bias_SE SE MSE ## 1 -0.02329445 0.003741931 0.1183302 0.1205433 ## bias_Var ## 1 0.5078144 Extend your function to add in the MCSEs for the SE and MSE. Code up the skewness and kurtosis values by hand, using the formula in the MCSE section of the performance measure chapter. (Challenge problem) Code up a jackknife MCSE function to calculate the MCSE for the relative bias of the asymptotic variance estimator. Use the following template that takes a vector of point estimates and associated standard errors. jackknife_MCSE &lt;- function( estimates, SEs ) { # code } You would use this function as: jackknife_MCSE( alpha_reps$A, sqrt( alpha_reps$Var ) ) 10.6 Replication (and the simulation) We now have all the components we need to get simulation results, given a set of parameter values. In the next section of the template, we put all these pieces together in a function—which we might call the simulation driver—that takes as input 1) parameter values, 2) the desired number of replications, and 3) optionally, a seed value (this allows for reproducability, see Chapter 16. The function produces as output a single set of performance estimates. Generically, the function looks like this: #----------------------------------------------------------- # Simulation Driver - should return a data.frame or tibble #----------------------------------------------------------- runSim &lt;- function(iterations, model_params, design_params, seed = NULL) { if (!is.null(seed)) set.seed(seed) results &lt;- rerun(iterations, { dat &lt;- dgm(model_params) estimate(dat, design_params) }) %&gt;% bind_rows() performance(results, model_params) } # demonstrate the simulation driver The runSim function should require very little modification for a new simulation. Essentially, all we need to change is the names of the functions that are called, so that they line up with the functions we have designed for our simulation. Here’s what this looks like for the Cronbach alpha simulation (we pull out the code to replicate into its own method, one_run(), which helps with debugging): #----------------------------------------------------------- # Simulation Driver - should return a data.frame or tibble #----------------------------------------------------------- one_run &lt;- function( n, p, alpha, df ) { dat &lt;- r_mvt_items(n = n, p = p, alpha = alpha, df = df) estimate_alpha(dat) } run_alpha_sim &lt;- function(iterations, n, p, alpha, df, seed = NULL) { if (!is.null(seed)) set.seed(seed) results &lt;- rerun(iterations, one_run(n, p, alpha, df) ) %&gt;% bind_rows() alpha_performance(results, alpha = alpha) } 10.7 Extension: Confidence interval coverage However, van Zyl, Neudecker, and Nel (2000) suggest that a better approximation involves first applying a transformation to \\(A\\) (to make it more normal in shape), then calculating a confidence interval, then back-transforming to the original scale (this is very similar to the procedure for calculating confidence intervals for correlation coefficients, using Fisher’s \\(z\\) transformation). Let our transformed parameter and estimator be \\[ \\begin{aligned} \\beta &amp;= \\frac{1}{2} \\ln\\left(1 - \\alpha\\right) \\\\ B &amp;= \\frac{1}{2} \\ln\\left(1 - A\\right) \\end{aligned} \\] and our transformed variance estimator be \\[ V^B = \\frac{p}{2 n (p - 1)}. \\] (This expression comes from a Delta method expansion on \\(A\\).) An approximate confidence interval for \\(\\beta\\) is given by \\([B_L, B_U]\\), where \\[ B_L = B - z \\sqrt{V^B}, \\qquad B_U = B + z \\sqrt{V^B}. \\] Applying the inverse of the transformation gives a confidence interval for \\(\\alpha\\): \\[ \\left[1 - \\exp(2B_U), \\ 1 - \\exp(2 B_L)\\right]. \\] 10.8 A taste of multiple scenarios In the previous sections, we’ve created code that will generate a set of performance estimates, given a set of parameter values. We can created a dataset that represents every combination of parameter values that we want to examine. How do we put the pieces together? If we only had a couple of parameter combinations, it would be easy enough to just call our run_alpha_sim function a couple of times: run_alpha_sim(iterations = 100, n = 50, p = 4, alpha = 0.7, df = 5) ## Warning: `rerun()` was deprecated in purrr 1.0.0. ## ℹ Please use `map()` instead. ## # Previously ## rerun(100, one_run(n, p, alpha, df)) ## ## # Now ## map(1:100, ~ one_run(n, p, alpha, df)) ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to ## see where this warning was generated. ## bias bias_SE SE MSE ## 1 -0.01211522 0.01088426 0.1088426 0.1089725 ## bias_Var ## 1 0.4913622 run_alpha_sim(iterations = 100, n = 100, p = 4, alpha = 0.7, df = 5) ## bias bias_SE SE MSE ## 1 -0.0117337 0.00761985 0.0761985 0.07671916 ## bias_Var ## 1 0.4727169 run_alpha_sim(iterations = 100, n = 50, p = 8, alpha = 0.7, df = 5) ## bias bias_SE SE MSE ## 1 -0.02601087 0.01120983 0.1120983 0.1145292 ## bias_Var ## 1 0.4319068 run_alpha_sim(iterations = 100, n = 100, p = 8, alpha = 0.7, df = 5) ## bias bias_SE SE MSE ## 1 0.007758062 0.006203414 0.06203414 0.06220884 ## bias_Var ## 1 0.5299059 But in an actual simulation we will probably have too many different combinations to do this “by hand.” The final sections of the simulation template demonstrate two different approaches to doing the calculations for every combination of parameter values, given a set of parameter values one wants to explore. This is discussed further in Chapter @ref(exp_design), but let’s get a small taste of doing this now. In particular, the following code will evaluate the performance of \\(A\\) for true values of \\(\\alpha\\) ranging from 0.5 to 0.9 (i.e., alpha_true_seq &lt;- seq(0.5, 0.9, 0.1)) via map_df(): alpha_true_seq &lt;- seq(0.5, 0.9, 0.1) results &lt;- map_df( alpha_true_seq, run_simulation, R = 100, n = 50, p = 5, df = 5 ) How does coverage change for different values of \\(A\\)? 10.8.1 Exercises Show the inverse transform of \\(B = g(A)\\) gives the above expression. Make a new function, estimate_alpha_xform() that, given a dataset, calculates a confidence interval for \\(\\alpha\\) following the method described above. Using the modified estimate_alpha_xform(), generate 1000 replicated confidence intervals for \\(n = 40\\), \\(p = 6\\) items, a true \\(\\alpha = 0.8\\), and \\(v = 5\\) degrees of freedom. Using these replicates, calculate the true coverage rate of the confidence interval. Also calculate the Monte Carlo standard error (MCSE) of this coverage rate. Calculate the average length of the confidence interval for \\(\\alpha\\), along with its MCSE. Compare the results of this approach to the more naive approach. Are there gains in performance? Challenge Derive the variance expression for the transformed estimator using the Delta method on the variance expression for \\(A\\) coupled with the transform. The Delta method says that: \\[ var( f(A) ) \\approx \\frac{1}{f&#39;(\\alpha)} (A - \\alpha)^2 . \\] "],["case-study-attrition-in-a-simple-randomized-experiment.html", "Chapter 11 Case study: Attrition in a simple randomized experiment 11.1 The data generating process 11.2 Estimators 11.3 Performance criteria", " Chapter 11 Case study: Attrition in a simple randomized experiment Missingness of the outcome variable is a common problem in randomized experiments conducted with human participants. For experiments where the focus is on estimating average causal effects, many different strategies for handling attrition have been proposed. Gerber and Green (2012) describe several strategies, including: Complete-case analysis, in which observations with missing outcome data are simply dropped from analysis; Regression estimation under the assumption that missingness is independent of potential outcomes, conditional on a set of pre-treatment covariates; and Monotone treatment response bounds, which provides bounds on the average treatment effect among participants who would provide outcome data under any treatment condition, under the assumption that that the effect of treatment on providing outcome data is strictly non-negative. In this case study, we will develop a data-generating process that allows us to study these different estimation strategies. To make things interesting, we will examine a scenario in which the data include covariates that influence the probability of providing outcome data under treatment and under control, as well as being predictive of the outcome. To formalize these notions, let us define the following variables: \\(X\\): a continuous covariate \\(C\\): a binary covariate \\(A\\): an indicator for whether a participant provides outcome data if assigned to treatment (latent) \\(R\\): an indicator for whether a participant provides outcome data if assigned to control, given that \\(A = 1\\) (latent) \\(Z\\): a randomized treatment indicator \\(Y^0, Y^1\\): potential outcomes (latent) \\(Y^F\\): the outcome that would be observed if all participants were to respond (latent) \\(Y\\): the measured outcome, which is only observed for some participants \\(O\\): an indicator for whether the outcome \\(Y\\) is observed We will posit that these variables are related as follows: TODO / NOTE: Dag code broken – need to fix Now, let’s lay out a more specific distributional model: \\[ \\begin{aligned} X &amp;\\sim N(0,1) \\\\ C &amp;\\sim Bern(\\kappa) - \\kappa\\\\ Z &amp;\\sim Bern(0.5) \\\\ A &amp;\\sim Bern\\left(\\pi_A(C,X)\\right) \\\\ R &amp;\\sim Bern\\left(\\pi_R(C,X)\\right) \\end{aligned} \\] where the response indicators follow the models \\[ \\begin{aligned} \\text{logit} \\ \\pi_A(C,X) &amp;= \\alpha_{A0} + \\alpha_{A1} C + \\alpha_{A2} X \\\\ \\text{logit} \\ \\pi_R(C,X) &amp;= \\alpha_{R0} + \\alpha_{R1} C + \\alpha_{R2} X. \\end{aligned} \\] Next, let \\(B\\) denote \\(\\text{E}(Y^0 | A, R, C, X)\\) and suppose that \\[ B = \\beta_0 + \\beta_1 C + \\beta_2 X + \\beta_3 R + \\beta_4 C \\times R + \\beta_5 X \\times R. \\] Let \\(D\\) denote the the treatment effect surface, \\(\\text{E}(Y^1 - Y^0 | A, R, C, X)\\), and suppose that \\[ D = \\delta_0 + \\delta_1 C + \\delta_2 X + \\delta_3 R + \\delta_4 C \\times R + \\delta_5 X \\times R. \\] Note that these models do not differentiate between the never-responders (who have \\(A = 0\\)) and those who respond only if assigned to treatment (who have \\(A = 1, R = 0\\)) because the outcome will never be observed for never-responders. With these functions, we define the potential outcomes as \\[ \\begin{aligned} Y^0 &amp;= B + e_0 \\\\ Y^1 &amp;= B + D + e_1, \\end{aligned} \\] where \\((e_0, e_1)\\) are bivariate normal with means of zero, standard deviations \\(\\sigma_0, \\sigma_1\\), and correlation \\(\\rho\\). The remaining variables in the model are structurally related to those previously defined: \\[ \\begin{aligned} O &amp;= (1 - Z) R A + Z A \\\\ Y^F &amp;= (1 - Z) Y^0 + Z Y^1 \\\\ Y &amp;= \\begin{cases} Y^F &amp; \\text{if} \\quad O = 1 \\\\ \\cdot &amp; \\text{if} \\quad O = 0. \\end{cases} \\end{aligned} \\] The observed data include the variables \\(X, C, Z, O\\), and \\(Y\\). 11.1 The data generating process Let’s write a function to generate data based on this model. Here’s a skeleton to get started: sim_attrition_data &lt;- function( N, # sample size kappa, # probability of C alpha_A, # regression for response under treatment alpha_R, # regression for response under control beta, # regression parameters for Y0 delta, # regression parameters for treatment response sigma0 = 1, sigma1 = 1, # conditional standard deviation of potential outcomes rho # conditional correlation between potential outcomes ) { # generate data frame return(df) } 11.2 Estimators What estimators might we use with these data? 11.3 Performance criteria What performance criteria should we look at? "],["exp-design.html", "Chapter 12 Designing the multifactor simulation experiment 12.1 Choosing parameter combinations 12.2 Using pmap to run multifactor simulations 12.3 Ways of repeating oneself 12.4 Running the Cluster RCT multifactor experiment", " Chapter 12 Designing the multifactor simulation experiment So far, we’ve created code that will give us results for a single combination of parameter values. In practice, simulation studies typically examine a range of different values, including varying the level of the true parameter values and perhaps also varying sample sizes, to explore a range of different scenarios. We either want reassurance that our findings are general, or we want to understand what aspects of the context lead to our found results. A single simulation gives us no hint as to either of these questions. It is only by looking across a range of settings that we can fully understand trade-offs, general rules, and limits. Let’s now look at the remaining piece of the simulation puzzle: the study’s experimental design. Simulation studies often take the form of full factorial designed experiments. In full factorials, each factor (a particular knob a researcher might turn to change the simulation conditions) is varied across multiple levels, and the design includes every possible combination of the levels of every factor. One way to represent such a design is as a list of factors and levels. For example, for the Cronbach alpha simulation, we might want to vary: the sample size, with values of 50 or 100; and the number of items, with values of 4 or 8. the true value of alpha, with values ranging from 0.1 to 0.9; the degrees of freedom of the multivariate \\(t\\) distribution, with values of 5, 10, 20, or 100; We first express the simulation parameters as a list of factors, each factor having a list of values to explore. We will then run a simulation for every possible combination of these values. We call this a \\(2 \\times 2 \\times 9 \\times 4\\) factorial design, where each element is the number of options for that factor. Here is code that generates all the scenarios we will run given the above design, storing these combinations in a data frame, params, that represents the full experimental design: design_factors &lt;- list( n = c(50, 100), p = c(4, 8), alpha = seq(0.1, 0.9, 0.1), df = c(5, 10, 20, 100) ) params &lt;- cross_df(design_factors) params ## # A tibble: 144 × 4 ## n p alpha df ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 50 4 0.1 5 ## 2 100 4 0.1 5 ## 3 50 8 0.1 5 ## 4 100 8 0.1 5 ## 5 50 4 0.2 5 ## 6 100 4 0.2 5 ## 7 50 8 0.2 5 ## 8 100 8 0.2 5 ## 9 50 4 0.3 5 ## 10 100 4 0.3 5 ## # ℹ 134 more rows See what we get? The parameters we would pass to run.experiment() correspond to the columns of our dataset. We have a total of \\(2 \\times 2 \\times 9 \\times 4 = 144\\) rows, each row corresponding to a simulation scenario to explore. With multifactor experiments, it is easy to end up running a lot of experiments! 12.1 Choosing parameter combinations How do we go about choosing parameter values to examine? Choosing which parameters to use is a central part of good simulation design because the primary limitation of simulation studies is always their generalizability. On the one hand, it’s difficult to extrapolate findings from a simulation study beyond the set of simulation conditions that were examined. On the other hand, it’s often difficult or impossible to examine the full space of all possible parameter values, except for very simple problems. Even in the Cronbach alpha simulation, we’ve got four factors, and the last three could each take an infinite number of different levels, in theory. How can we come up with a defensible set of levels to examine? The choice of simulation conditions needs to be made in the context of the problem or model that you’re studying, so it’s a bit difficult to offer valid, decontextualized advice. We can provide a few observations all the same: For research simulations, it often is important to be able to relate your findings to previous research. This suggests that you should select parameter levels to make this possible, such as by looking at sample sizes similar to those examined in previous studies. That said, previous simulation studies are not always perfect (actually, there’s a lot of really crummy ones out there!), and so prior work should not geneally be your sole guide or justification. Generally, it is better to err on the side of being more comprehensive. You learn more by looking at a broader range of conditions, and you can always boil down your results to a more limited set of conditions for purposes of presentation. It is also important to explore breakdown points (e.g., what sample size is too small for a method to work?) rather than focusing only on conditions where a method might be expected to work well. Pushing the boundaries and identifying conditions where estimation methods break will help you to provide better guidance for how the methods should be used in practice. An important point regarding (2) is that you can be more comprehensive and then have fewer replications per scenario. For example, say you were planning on doing 1000 simulations per scenario, but then you realize there is some new factor that you don’t think matters, but that you believe other researchers will worry about. You could add in that factor, say with four levels, and then do 250 simulations per scenario. The total work remains the same. When analyzing the final simulation you can then first verify you do not see trends along this new factor, and then marganalize out the factor in your summaries of results. Marginalizing out a factor (i.e., averaging your performance metrics across the additional factor) is a powerful technique of making a claim about how your methods work on average across a range of scenarios, rather than for a specific scenario. Overall, you generally want to vary parameters that you believe matter, or that you think other people will believe matter. The first is so you can learn. The second is to build your case. Once you have identified your parameters you then have to decide on the levels of the parameter you will include in the simulation. There are three strategies you might take: Vary a parameter over its entire range (or nearly so). Choose parameter levels to represent realistic practical range. Empirical justification based on systematic reviews of applications Or at least informal impressions of what’s realistic in practice Choose parameters to emulate one important application. In the above (1) is the most general—but also the most computationally intensive. (2) will focus attention, ideally, on what is of practical relevance to a practitioner. (3) is usually coupled with a subsequent applied data analysis, and in this case the simulation is often used to enrich that analysis. For example, if the simulation shows the methods work for data with the given form of the target application, people may be more willing to believe the application’s findings. Regardless of how you select your primary parameters, you should also vary nuisance parameters (at least a little) to test sensitivity of results. While simulations will (generally) never be fully generalizable, you can certainly make them so they avoid the obvious things a critic might identify as an easy dismissal of your findings. To recap, as you think about your parameter selection, always keep the following design principles and acknowledgements: The primary limitation of simulation studies is generalizability. Choose conditions that allow you to relate findings to previous work. Err towards being comprehensive. The goal should be to build an understanding of the major moving parts. Presentation of results can always be tailored to illustrate trends. Explore breakdown points (e.g., what sample size is too small for applying a given method?). And fully expect to add and subtract from your set of parameters as you get your initial simulation results! No one ever runs just a single simulation. 12.1.1 Choosing parameters for the Clustered RCT Extending our case study presented in Section 6.3 to a multifactor simulation, let’s think about how to design our full experiment. So far, we have only investigated a single scenario at a time, although our modular approach does make exploring a range of scenarios by re-calling our simulation function relatively straightforward. But how do our findings generalize? When are the different methods differently appropriate? To answer this, we need to extend to a multifactor simulation to systematically explore trends across contexts for our three estimators. We begin by identifying some questions we might have, given our preliminary results. Regarding bias, in our initial simulation, we noticed that Linear Regression is estimating a person-weighted quantity, and so would be considered biased for the site-average ATE. We might next ask, how much does bias change if we change the site-size by impact relationship? For precision, we also saw that Linear Regression has a higher standard error. But is this a general finding? When does this occur? Are there contexts where linear regression will do better than the others? Originally we thought aggregation would lose information becuase little sites will have the same weight as big sites, but be more imprecisely estimated. Were we wrong? Or perhaps if site size was even more variable, Agg might do worse and worse. Finally, the estimated SEs all appeared to be good, although they were rather variable, relative to the true SE. We might then ask, is this always the case? Will the estimated SEs fall apart (e.g., be way too large or way too small, in general) in different contexts? To answer these questions we need to more systematically explore the space of models. But we have a lot of knobs to turn. In our simulation, we can generate fake cluster randomized data with the following features: The treatment impact of the site can vary, and vary with the site size We can have sites of different sizes if we want We can also vary: the site intercept variance the residual variance, the treatment impact the site size the number of sites, … We cannot easily vary all of these. We instead reflect on our research questions, speculate as to what is likely to matter, and then consider varying the following: Average site size: Does the number of students/site matter? Number of sites: Do cluster-robust SEs work with fewer sites? Variation in site size: Varying site sizes cause bias or break things? Correlation of site size and site impact: Will correlation cause bias? Cross site variation: Does the amount of site variation matter? When designing the final factors, it is important to ensure those factors are isolated, in that changing one of them is not changing a host of other things that might impact performance. For example, in our case, if we simply added more cross site variation by directly increasing the random effects for the clusters, our total variation will increase. If we see that methods deteriorate, we then have a confound: is it the cross site variation causing the problem, or is it the total variation? We therefore want to vary site variation while controlling total variation; this is why we use the ICC knob discussed in the section on the data generation process. We might thus end up with the following for our factors: crt_design_factors &lt;- list( n_bar = c( 20, 80, 320 ), J = c( 5, 20, 80 ), ATE = c( 0.2 ), size_coef = c( 0, 0.2 ), ICC = c( 0, 0.2, 0.4, 0.6, 0.8 ), alpha = c( 0, 0.5, 0.8 ) ) 12.2 Using pmap to run multifactor simulations To run simulations across all of our factor combinations, we are going to use a very useful method in the purrr package called pmap(). pmap() marches down a set of lists, running a function on each \\(p\\)-tuple of elements, taking the \\(i^{th}\\) element from each list for iteration \\(i\\), and passing them as parameters to the specified function. pmap() then returns the results of this sequence of function calls as a list of results. Here is a small illustration: my_function &lt;- function( a, b, theta, scale ) { scale * (a + theta*(b-a)) } args = list( a = 1:3, b = 5:7, theta = c(0.2, 0.3, 0.7) ) purrr::pmap_dbl( args, my_function, scale = 10 ) ## [1] 18 32 58 One important note is the variable names for the lists being iterated over must correspond exactly to function arguments of the called function. Extra parameters can be passed after the function name; these will be held constant, and passed to each function call. See how scale is the same for all calls. As we see above, pmap() has variants such as _dbl or _df just like the map() and map2() methods. These variants will automatically stack or convert the list of things returned into a tidier collection (for _dbl it will convert to a vector of numbers, for _df it will stack the results to make a large dataframe, assuming each thing returned is a little dataframe). So far, this is great, but it does not quite look like what we want: our factors are stored as a dataframe, not three lists. This is where R gets interesting: in R, the columns of a dataframe are stored as a list of vectors or lists (with each of the vectors or lists having the exact same length). This works beautifully with pmap(). Witness: args[[2]] ## [1] 5 6 7 a_df = as.data.frame(args) a_df ## a b theta ## 1 1 5 0.2 ## 2 2 6 0.3 ## 3 3 7 0.7 a_df[[2]] ## [1] 5 6 7 purrr::pmap_dbl( a_df, my_function, scale = 10) ## [1] 18 32 58 We can pass a_df to pmap, and pmap takes it as a list of lists, and therefore does exactly what it did before. All of this means pmap() can run a specified function on each row of a dataset. Continuing the Cronbach Alpha simulation from above, we would have the following: params$iterations &lt;- 500 sim_results &lt;- params %&gt;% mutate(res = pmap(., run_alpha_sim ) ) We add a column to params to record the desired 500 replications per condition. The above code calls our run_alpha_sim() method for each row of our list of scenarios we want to explore. Even better, we are storing the results as a new variable in the same dataset. sim_results ## # A tibble: 144 × 6 ## n p alpha df iterations res ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; ## 1 50 4 0.1 5 500 NA ## 2 100 4 0.1 5 500 NA ## 3 50 8 0.1 5 500 NA ## 4 100 8 0.1 5 500 NA ## 5 50 4 0.2 5 500 NA ## 6 100 4 0.2 5 500 NA ## 7 50 8 0.2 5 500 NA ## 8 100 8 0.2 5 500 NA ## 9 50 4 0.3 5 500 NA ## 10 100 4 0.3 5 500 NA ## # ℹ 134 more rows We are creating a list-column, where each element in our list column is the little summary of our simulation results for that scenario. Here is the third scenario, for example: sim_results$res[[3]] ## [1] NA We finally use unnest() to expand the res variable, replicating the values of the main variables once for each row in the nested dataset: library(tidyr) sim_results &lt;- unnest(sim_results, cols = res) %&gt;% dplyr::select( -iterations ) sim_results ## # A tibble: 144 × 5 ## n p alpha df res ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt; ## 1 50 4 0.1 5 NA ## 2 100 4 0.1 5 NA ## 3 50 8 0.1 5 NA ## 4 100 8 0.1 5 NA ## 5 50 4 0.2 5 NA ## 6 100 4 0.2 5 NA ## 7 50 8 0.2 5 NA ## 8 100 8 0.2 5 NA ## 9 50 4 0.3 5 NA ## 10 100 4 0.3 5 NA ## # ℹ 134 more rows We can put all of this together in a a tidy workflow as follows: sim_results &lt;- params %&gt;% mutate(res = pmap(., .f = run_alpha_sim)) %&gt;% unnest(cols = res) If we wanted to use parallel processing (more on this later) we can also simply use the simhelpers package (the following code is auto-generated by the create_skeleton() method as well): plan(multisession) # choose an appropriate plan from the future package evaluate_by_row(params, run_alpha_sim) We finally save our results using tidyverse’s write_csv(); see “R for Data Science” textbook, 11.5. We can ensure we have a directory by making one via dir.create() (see Section 19 for more on files): dir.create(&quot;results&quot;, showWarnings = FALSE ) write_csv( sim_results, file = &quot;results/cronbach_results.csv&quot; ) 12.3 Ways of repeating oneself We have three core elements in our simulation: - Generate data - Analyze data - Assess performance In arranging these elements, we have a choice: do we compute performance measures for each simulation scenario as we go (inside) vs. computing after we get all of our individual results (outside)? INSIDE (aggregate as you simulate): In this approach, illustrated above, we, for each scenario defined by a specific combination of factors, run our simulation for that scenario, assess the performance, and then return a nice summary table of how well our methods did. This is the most straightforward, given what we have done so far: we have a method to run a simulation for a scenario, and we simply run that method for a bunch of scenarios and collate. After the pmap() call, we end up with a dataframe with all our simulations, one simulation context per row (or maybe bundles, one for each method), with our measured performance outcomes. This is ideally all we need to analyze. We have less data to store, and it is easier to compartmentalize. On the cons side, we have no ability to add new performance measures on the fly. Overall, this seems pretty good. That being said, sometimes we might want to use a lot of disk space and keep much more. In particular, each row of the above corresponds to the summary of a whole collection of individual runs. We might instead store all of these runs, which brings us to the other approach. OUTSIDE (keep all simulation runs): In this approach we do not aggregate, but instead, for each scenario, return the entire set of individual estimates. The benefit of this is, given the raw estimates, you can dynamically add or change how you calculate performance measures. You do, however, end up with massive amounts of data to store and manipulate. To move from inside to outside, we just take the summarizing step out of run_alpha_sim(). E.g.,: run_alpha_sim_raw &lt;- function(iterations, n, p, alpha, df, coverage = 0.95, seed = NULL) { if (!is.null(seed)) set.seed(seed) results &lt;- replicate(n = iterations, { dat &lt;- r_mvt_items(n = n, p = p, alpha = alpha, df = df) estimate_alpha(dat, coverage = coverage) }, simplify = FALSE) %&gt;% bind_rows() results } Each call to run_alpha_sim_raw() now gives one row per simulation trial. We replicate our simulation parameters for each row. run_alpha_sim_raw( 4, 50, 6, 0.5, 3 ) ## A Var_A CI_L CI_U ## 1 0.5402995 0.01014358 0.29374115 0.7007831 ## 2 0.3867717 0.01805035 0.05786946 0.6008526 ## 3 0.4617342 0.01390704 0.17303773 0.6496454 ## 4 0.4810237 0.01292815 0.20267301 0.6622008 The primary advantage of this is we can then generate new performance measures, as they occur to us, later on. The disadvantage is this result file will be \\(R\\) times as many rows as the older file, which can get quite, quite large. But disk space is cheap! Here we run the same experiment with our more complete storage. Note how the pmap_df stacks the multiple rows from each run, giving us everything nicely bundled up: params$res &lt;- params %&gt;% pmap( run_alpha_sim_raw, iterations = 500 ) sim_results_full &lt;- unnest( params, cols = res ) write_csv( sim_results_full, &quot;results/cronbach_results_full.csv&quot; ) We end up with a lot more rows: nrow( sim_results_full ) ## [1] 72000 nrow( sim_results ) ## [1] 144 Compare the file sizes: one is several k, the other is around 20 megabytes. file.size(&quot;results/cronbach_results.csv&quot;) / 1024 ## [1] 4.103516 file.size(&quot;results/cronbach_results_full.csv&quot;) / 1024 ## [1] 7516.222 12.3.1 Getting raw results ready for analysis If we generated raw results then we need to collapse them by experimental run before calculating performance measures so we can explore the trends across the experiments. We do this by grouping our data and calling alpha_performance() for each group: results &lt;- sim_results_full %&gt;% nest_by( n, p, alpha, df, .key = &quot;alpha_sims&quot; ) results ## # A tibble: 144 × 5 ## # Rowwise: n, p, alpha, df ## n p alpha df alpha_sims ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;list&lt;tibble[,6]&gt;&gt; ## 1 50 4 0.1 5 [500 × 6] ## 2 50 4 0.1 10 [500 × 6] ## 3 50 4 0.1 20 [500 × 6] ## 4 50 4 0.1 100 [500 × 6] ## 5 50 4 0.2 5 [500 × 6] ## 6 50 4 0.2 10 [500 × 6] ## 7 50 4 0.2 20 [500 × 6] ## 8 50 4 0.2 100 [500 × 6] ## 9 50 4 0.3 5 [500 × 6] ## 10 50 4 0.3 10 [500 × 6] ## # ℹ 134 more rows results$performance = map2( results$alpha_sims, results$alpha, alpha_performance ) results &lt;- results %&gt;% dplyr::select( -alpha_sims ) %&gt;% unnest( cols=&quot;performance&quot; ) results ## # A tibble: 576 × 7 ## # Groups: n, p, alpha, df [144] ## n p alpha df criterion est ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 50 4 0.1 5 alpha bias -0.103 ## 2 50 4 0.1 5 alpha RMSE 0.388 ## 3 50 4 0.1 5 V relative bias 0.436 ## 4 50 4 0.1 5 coverage 0.826 ## 5 50 4 0.1 10 alpha bias -0.0527 ## 6 50 4 0.1 10 alpha RMSE 0.263 ## 7 50 4 0.1 10 V relative bias 0.780 ## 8 50 4 0.1 10 coverage 0.908 ## 9 50 4 0.1 20 alpha bias -0.0190 ## 10 50 4 0.1 20 alpha RMSE 0.221 ## # ℹ 566 more rows ## # ℹ 1 more variable: MCSE &lt;dbl&gt; # NOTE: This is HORRIBLE. There has to be a better way. Now, if we want to add a performance metric, we can simply change alpha_performance and recalculate, without running the time-intensive simulations. Being able to re-analyze your results is generally a far easier fix than running all the simulations again after changing the run_alpha_sim() method. The results of summarizing during the simulation vs. after as we just did leads to essentially the same place, however, although our old results are in long format (with one row per simulation metric vs. the metrics being columns). 12.4 Running the Cluster RCT multifactor experiment Running our cluster RCT simulation is the exact same code as we have used before. Simulations take awhile to run so we save them so we can analyze at our leisure. Because we are not exactly sure what performance metrics we want, we will save our individual results, and calculate performance metrics on the full data. I.e., we are storing the individual runs, not the analyzed results! The code is as follows: params &lt;- cross_df(crt_design_factors) %&gt;% mutate( reps = 100, seed = 20200320 + 1:n() ) params$res = pmap(params, .f = run_CRT_sim ) res = params %&gt;% unnest( cols=c(data) ) saveRDS( res, file = &quot;results/simulation_CRT.rds&quot; ) The seed is for reproducibility; we discuss this more later on. We then group by our simulation factors and calculate all our performance metrics at once directly. For example, here is the code for calculating performance measures across our simulation for the cluster randomized experiments example: res &lt;- readRDS( file = &quot;results/simulation_CRT.rds&quot; ) sres &lt;- res %&gt;% group_by( n_bar, J, ATE, size_coef, ICC, alpha, method ) %&gt;% summarise( bias = mean(ATE_hat - ATE), SE = sd( ATE_hat ), RMSE = sqrt( mean( (ATE_hat - ATE )^2 ) ), ESE_hat = sqrt( mean( SE_hat^2 ) ), SD_SE_hat = sqrt( sd( SE_hat^2 ) ), power = mean( p_value &lt;= 0.05 ), R = n(), .groups = &quot;drop&quot; ) sres ## # A tibble: 810 × 14 ## n_bar J ATE size_coef ICC alpha method ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 20 5 0.2 0 0 0 Agg ## 2 20 5 0.2 0 0 0 LR ## 3 20 5 0.2 0 0 0 MLM ## 4 20 5 0.2 0 0 0.5 Agg ## 5 20 5 0.2 0 0 0.5 LR ## 6 20 5 0.2 0 0 0.5 MLM ## 7 20 5 0.2 0 0 0.8 Agg ## 8 20 5 0.2 0 0 0.8 LR ## 9 20 5 0.2 0 0 0.8 MLM ## 10 20 5 0.2 0 0.2 0 Agg ## # ℹ 800 more rows ## # ℹ 7 more variables: bias &lt;dbl&gt;, SE &lt;dbl&gt;, ## # RMSE &lt;dbl&gt;, ESE_hat &lt;dbl&gt;, SD_SE_hat &lt;dbl&gt;, ## # power &lt;dbl&gt;, R &lt;int&gt; 12.4.1 Making analyze_data() quiet If we run our simulation when there is little cluster variation, we start getting a lot of messages and warnings from our MLM estimator. For example, from a single call we get: res &lt;- analyze_data(dat) When we scale up to our full simulations, these warnings can become a nuisance. Furthermore, we have found that the lmer command can sometimes just fail (we believe there is some bug in the optimizer that fails if things are just perfectly wrong). If this was on simulation run 944 out of 1000, we would lose everything! To protect ourselves, we trap messages and warnings as so (see Chapter @(#safe_code) for more on this): quiet_lmer = quietly( lmer ) analyze_data &lt;- function( dat ) { # MLM M1 &lt;- quiet_lmer( Yobs ~ 1 + Z + (1|sid), data=dat ) message1 = ifelse( length( M1$message ) &gt; 0, 1, 0 ) warning1 = ifelse( length( M1$warning ) &gt; 0, 1, 0 ) ... # Compile our results tibble( method = c( &quot;MLM&quot;, &quot;LR&quot;, &quot;Agg&quot; ), ATE_hat = c( est1, est2, est3 ), SE_hat = c( se1, se2, se3 ), p_value = c( pv1, pv2, pv3 ), message = c( message1, 0, 0 ), warning = c( warning1, 0, 0 ) ) } We now get a note about the message regarding convergence saved in our results: res &lt;- analyze_data(dat) res ## # A tibble: 3 × 6 ## method ATE_hat SE_hat p_value message warning ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 MLM -0.376 1.44 0.842 0 0 ## 2 LR -0.0973 0.784 0.921 0 0 ## 3 Agg -0.440 0.856 0.698 0 0 See? No more warnings, but we see the message as a variable in our results. "],["analyzing-the-multifactor-experiment.html", "Chapter 13 Analyzing the multifactor experiment 13.1 Bundling 13.2 Aggregation 13.3 Regression Summarization 13.4 Focus on subset, kick rest to supplement 13.5 Analyzing results when some trials have failed 13.6 A demonstration of visualization 13.7 Exercises", " Chapter 13 Analyzing the multifactor experiment Once we have performance measures for all our simulation scenarios, how do we explore them? For our Cluster RCT simulation, we have 270 different simulation runs across our factors (with three rows per simulation run, one for each method). How can we visualize and understand trends across this complex domain? There are several techniques for summarizing across the data that one might use. 13.1 Bundling As a first step, we might bundle the simulations by the primary factors of interest. We would then plot these bundles as box plots to see central tendency along with variation. With bundling, we would need a good number of simulation runs per scenario, so that the MCSE in the performance measures does not make our boxplots look substantially more variable than the truth. For example, as a first step to understanding bias, we might bundle our results by ICC. In this code we are making groups of method by ICC level so we get side-by-side boxplots for each ICC level considered: res &lt;- readRDS( &quot;results/simulation_CRT.rds&quot; ) ggplot( sres, aes( ICC, bias, col=method, group=paste0(ICC,method) ) ) + facet_grid( alpha ~ size_coef, labeller = label_both ) + geom_boxplot(coef = Inf) + geom_hline( yintercept = 0 ) + theme_minimal() + scale_x_continuous( breaks = unique( sres$ICC) ) Each box is a collection of simulation trials. E.g., for ICC = 0.6, size_coef = 0.2, and alpha = 0.8 we have 9 scenarios representing the varying level 1 and level 2 sample sizes: filter( sres, ICC == 0.6, size_coef == 0.2, alpha == 0.8, method==&quot;Agg&quot; ) %&gt;% dplyr::select( n_bar:alpha, bias ) ## # A tibble: 9 × 7 ## n_bar J ATE size_coef ICC alpha bias ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 20 5 0.2 0.2 0.6 0.8 0.00799 ## 2 20 20 0.2 0.2 0.6 0.8 -0.0445 ## 3 20 80 0.2 0.2 0.6 0.8 0.0206 ## 4 80 5 0.2 0.2 0.6 0.8 0.111 ## 5 80 20 0.2 0.2 0.6 0.8 -0.0144 ## 6 80 80 0.2 0.2 0.6 0.8 0.0132 ## 7 320 5 0.2 0.2 0.6 0.8 0.151 ## 8 320 20 0.2 0.2 0.6 0.8 0.0361 ## 9 320 80 0.2 0.2 0.6 0.8 0.0394 We are seeing a few outliers for some of the boxplots, suggesting that there are other factors driving bias. We could try bundling along different aspects to see: ggplot( sres, aes( as.factor(n_bar), bias, col=method, group=paste0(n_bar,method) ) ) + facet_grid( alpha ~ size_coef, labeller = label_both ) + geom_boxplot(coef = Inf) + geom_hline( yintercept = 0 ) + theme_minimal() No progress there. Perhaps it is instability or MCSE. We make a note to investigate further, later on. 13.2 Aggregation The boxplots are hard for seeing trends. Instead of bundling, we can therefore aggregate, to look at overall trends rather than individual simulation variation. This is especially important if the number of replicates within each scenario is small, because then each scenario’s performance is measured with a lot of error. With aggregation, we average over some of the factors, collapsing our simulation results down to fewer moving parts. This is better than having not had those factors in the first place! Averaging over a factor is a more general answer than having not varied the factor at all. For example, if we average across ICC and site variation, and see how the methods change performance as a function of \\(J\\), we would know that this is a general trend across a range of scenarios defined by different ICC and site variation levels. Our conclusions would then be more general than if we picked a single ICC and amount of site variation: in this latter case we would not know if we would see our trend more broadly. Also, with aggregation, we can have a smaller number of replications per factor combination. The averaging will, in effect, give a lot more reps per aggregated performance measure. A caution with aggregation is that it can be deceitful if you have scaling issues or extreme outliers. With bias, our scale is fairly well set, so we are good! But if we were aggregating standard errors over sample size, then the larger standard errors of the smaller sample size simulations (and the greater variability in estimating those standard errors) would swamp the standard errors of the larger sample sizes. Usually, with aggregation, we want to average over something we believe will not change massively over the marginalized-out factors. Alternatively, we can average over a relative measure, which tend to be more invariant and comparable across scenarios. For our cluster RCT, we might aggregate as follows: ssres &lt;- sres %&gt;% group_by( ICC, method, alpha, size_coef ) %&gt;% summarise( bias = mean( bias ) ) ggplot( ssres, aes( ICC, bias, col=method ) ) + facet_grid( alpha ~ size_coef, labeller = label_both ) + geom_point( alpha=0.75 ) + geom_line( alpha=0.75 ) + geom_hline( yintercept = 0 ) + theme_minimal() This shows that site variation leads to greater bias, but only if the coefficient for size is nonzero. We also see that all the estimators must be the same if site variation is 0, with the overplotted lines on the top row of the figure. 13.3 Regression Summarization One can treat the simulation results as a dataset in its own right. In this case we can regress a performance measure against the methods and various factor levels to get “main effects” of how the different levels impact performance holding the other levels constant. The main effect of the method will tell us if a method is, on average, higher or lower than the baseline method. The main effect of the factors will tell us if that factor impacts the performance measure. These regressions can also include interactions between method and factor, to see if some factors impact different methods differently. They can also include interactions between factors, which allows us to explore how the impact of a factor can matter more or less, depending on other aspects of the context. For our cluster RCT, we might have, for example: sres_f = sres %&gt;% mutate( across( c( n_bar, J, size_coef, ICC, alpha ), factor ) ) M &lt;- lm( bias ~ (n_bar + J + size_coef + ICC + alpha) * method, data = sres_f ) stargazer::stargazer(M, type = &quot;text&quot;, single.row = TRUE ) ## ## ================================================== ## Dependent variable: ## --------------------------- ## bias ## -------------------------------------------------- ## n_bar80 -0.009 (0.007) ## n_bar320 -0.006 (0.007) ## J20 0.004 (0.007) ## J80 0.006 (0.007) ## size_coef0.2 -0.035*** (0.006) ## ICC0.2 -0.004 (0.009) ## ICC0.4 -0.002 (0.009) ## ICC0.6 -0.003 (0.009) ## ICC0.8 0.001 (0.009) ## alpha0.5 0.055*** (0.007) ## alpha0.8 0.053*** (0.007) ## methodLR -0.007 (0.014) ## methodMLM 0.006 (0.014) ## n_bar80:methodLR -0.001 (0.010) ## n_bar320:methodLR 0.001 (0.010) ## n_bar80:methodMLM -0.001 (0.010) ## n_bar320:methodMLM -0.002 (0.010) ## J20:methodLR 0.006 (0.010) ## J80:methodLR 0.005 (0.010) ## J20:methodMLM 0.002 (0.010) ## J80:methodMLM 0.002 (0.010) ## size_coef0.2:methodLR 0.030*** (0.008) ## size_coef0.2:methodMLM 0.006 (0.008) ## ICC0.2:methodLR 0.003 (0.013) ## ICC0.4:methodLR 0.0004 (0.013) ## ICC0.6:methodLR 0.005 (0.013) ## ICC0.8:methodLR 0.002 (0.013) ## ICC0.2:methodMLM -0.006 (0.013) ## ICC0.4:methodMLM -0.008 (0.013) ## ICC0.6:methodMLM -0.008 (0.013) ## ICC0.8:methodMLM -0.008 (0.013) ## alpha0.5:methodLR -0.007 (0.010) ## alpha0.8:methodLR 0.004 (0.010) ## alpha0.5:methodMLM -0.002 (0.010) ## alpha0.8:methodMLM -0.0003 (0.010) ## Constant -0.034*** (0.010) ## -------------------------------------------------- ## Observations 810 ## R2 0.302 ## Adjusted R2 0.270 ## Residual Std. Error 0.046 (df = 774) ## F Statistic 9.547*** (df = 35; 774) ## ================================================== ## Note: *p&lt;0.1; **p&lt;0.05; ***p&lt;0.01 We can quickly get a lot of features, and this approach can be hard to interpret. But picking out the significant coefficents does provide a lot of clues, rather rapidly. E.g., many features interact with the LR method for bias. The other methods seem less impacted. 13.4 Focus on subset, kick rest to supplement Frequently researchers might simply filter the simulation results to a single factor level for some nuisance parameter. For example, we might examine ICC of 0.20 only, as this is a “reasonable” value given substance matter knowledge. We would then consider the other levels as a “sensitivity” analysis vaguely alluded to in our main report and placed elsewhere, such as an online supplemental appendix. It would be our job, in this case, to verify that our reported findings on the main results indeed were echoed in our other, set-aside, simulation runs. 13.5 Analyzing results when some trials have failed If methods fail, then this is something to investigate in its own right. Ideally, failure is not too common, so we can drop those trials, or keep them, without really impacting our overall results. But one should at least know what one is ignoring. For example, in our cluster RCT, we know we have, at least sometimes, convergence issues. We know that ICC is an important feature, so we can explore how often we get a convergence message by ICC level: res %&gt;% group_by( method, ICC ) %&gt;% summarise( message = mean( message ) ) %&gt;% pivot_wider( names_from = &quot;method&quot;, values_from=&quot;message&quot; ) ## Warning: There were 15 warnings in `summarise()`. ## The first warning was: ## ℹ In argument: `message = mean(message)`. ## ℹ In group 1: `method = &quot;Agg&quot;` and `ICC = 0`. ## Caused by warning in `mean.default()`: ## ! argument is not numeric or logical: returning NA ## ℹ Run `dplyr::last_dplyr_warnings()` to see the ## 14 remaining warnings. ## # A tibble: 5 × 4 ## ICC Agg LR MLM ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0 NA NA NA ## 2 0.2 NA NA NA ## 3 0.4 NA NA NA ## 4 0.6 NA NA NA ## 5 0.8 NA NA NA We see that when the ICC is 0 we get a lot of convergence issues, but as soon as we pull away from 0 it drops off considerably. At this point we might decide to drop those runs with a message or keep them. In this case, we decide to keep. It shouldn’t matter much in any case except the ICC = 0 case, and we know the convergence is due to trying to estimate a 0 variance, and thus is in some sense expected. Furthermore, we know people using these methods would likely ignore these messages, and thus we are faithfully capturing how these methods would be used in practice. We might eventually, however, want to do a separate analysis of the ICC = 0 context to see if the MLM approach actually falls apart, or if it is just throwing error messages. 13.6 A demonstration of visualization We next explore a case study comparing different visualizations of the same performance metric (in this case, power). The goal is to see how to examine a metric from several perspectives, and to see how to explore simulation results across scenarios. For this example, we are going to look at a randomized experiment. We will generate control potential outcomes, and then add a treatment effect to the treated units. We assume the control group is normally distributed. We will generate a random data set, estimate the treatment effect by taking the difference in means and calculating the associated standard error, and generating a \\(p\\)-value using the normal approximation. (As we will see, this is not a good idea for small sample size since we should be using a \\(t\\)-test style approach.) Violating our usual modular approach, we ae going to have a single function that does an entire step: it generates two groups of the given sizes, one treatment and one control, and then calculates the difference in means. It will then test this difference using the normal approximation. The function also calculates and returns the true effect size of the DGP as the true treatment effect divided by the control standard deviation (useful for understanding power, shown later on). run.one = function( nC, nT, sdC, tau, mu = 5, sdTau = 0 ) { Y0 = mu + rnorm( nC, sd=sdC ) Y1 = mu + rnorm( nT, sd=sdC ) + tau + rnorm( nT, sd=sdTau ) tau.hat = mean( Y1 ) - mean( Y0 ) SE.hat = sqrt( var( Y0 ) / ( nC ) + var( Y1 ) / ( nT ) ) z = tau.hat / SE.hat pv = 2 * (1 - pnorm( abs( z ) )) data.frame( tau.hat = tau.hat, SE.hat = SE.hat, z=z, p.value=pv ) } Our function generates a data set, analyzes it, and give us back a variety of results as a one-row dataframe, as per usual: run.one( nT=5, nC=10, sdC=1, tau=0.5 ) ## tau.hat SE.hat z p.value ## 1 -0.246767 0.6607213 -0.3734812 0.7087903 In this case, our results are a mix of the parameters and estimated quantities. We then write a function that runs our single trial multiple times and summarizes the results: run.experiment = function( nC, nT, sdC, tau, mu = 5, sdTau = 0, R = 500 ) { eres = replicate( R, run.one( nC, nT, sdC, tau, sdTau=sdTau, mu=mu ), simplify=FALSE ) eres = bind_rows( eres ) eres %&gt;% summarise( E.tau.hat = mean( tau.hat ), E.SE.hat = mean( SE.hat ), power = mean( p.value &lt;= 0.05 ) ) %&gt;% mutate( nC=nC, nT=nT, sdC=sdC, tau=tau, mu=mu, sdTau=sdTau, R=R ) } For performance, we have the average average treatment effect estimate E.tau.hat, the average Standard Error estimate E.SE.hat, and the power power (defined as the percent of time we reject at alpha=0.05, i.e., the percent of times our \\(p\\)-value was less than our 0.05 threshold): Our function also adds in the details of the simulation (the parameters we passed to the run.one() call). This is an easy way to keep track of things. We test our function to see what we get: run.experiment( 10, 3, 1, 0.5, 5, 0.2 ) ## E.tau.hat E.SE.hat power nC nT sdC tau mu ## 1 0.497077 0.6284977 0.218 10 3 1 0.5 5 ## sdTau R ## 1 0.2 500 We next use the above to run a multi-factor simulation experiment. We are going to vary four factors: control group size, treatment group size, standard deviation of the units, and the treatment effect. nC = c( 2, 4, 7, 10, 50, 500 ) nT = c( 2, 4, 7, 10, 50, 500 ) sdC = c( 1 ) tau = c( 0, 0.5, 1 ) sdTau = c( 0, 0.5 ) experiments = expand_grid( nC=nC, nT=nT, sdC=sdC, tau=tau, sdTau = sdTau ) experiments ## # A tibble: 216 × 5 ## nC nT sdC tau sdTau ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2 2 1 0 0 ## 2 2 2 1 0 0.5 ## 3 2 2 1 0.5 0 ## 4 2 2 1 0.5 0.5 ## 5 2 2 1 1 0 ## 6 2 2 1 1 0.5 ## 7 2 4 1 0 0 ## 8 2 4 1 0 0.5 ## 9 2 4 1 0.5 0 ## 10 2 4 1 0.5 0.5 ## # ℹ 206 more rows We next run an experiment for each row of our dataframe of experiment factor combinations, and save the results. Note our method of adding the design parametes into our results makes this step arguably moe clean than some of the other templates we have seen. exp.res &lt;- experiments %&gt;% pmap_df( run.experiment, R=2000 ) dir.create(&quot;results&quot;, showWarnings = FALSE ) saveRDS( exp.res, file=&quot;results/Neyman_RCT_results.rds&quot; ) The R=500 after run.experiment passes the same parameter of \\(R=500\\) to each run (we run the same number of trials for each experiment). We can put it there rather than have it be a column in our list of factors to run. Here is a peek at our results: head( exp.res ) ## E.tau.hat E.SE.hat power nC nT sdC tau mu ## 1 -0.001525155 0.8818917 0.1975 2 2 1 0.0 5 ## 2 -0.026286662 0.9307269 0.1915 2 2 1 0.0 5 ## 3 0.485430674 0.8861287 0.2185 2 2 1 0.5 5 ## 4 0.452375661 0.9363909 0.2095 2 2 1 0.5 5 ## 5 1.029038283 0.8915091 0.3120 2 2 1 1.0 5 ## 6 0.957434064 0.9347139 0.3025 2 2 1 1.0 5 ## sdTau R ## 1 0.0 2000 ## 2 0.5 2000 ## 3 0.0 2000 ## 4 0.5 2000 ## 5 0.0 2000 ## 6 0.5 2000 13.6.1 The initial analysis We are ready to analyze. We start with plotting. Plotting is always a good way to vizualize simulation results. We first make our tau into a factor, so ggplot behaves, and then plot all our experiments as two rows based on one factor (sdTau) with the columns being another (nT). (This style of plotting a bunch of small plots is called “many multiples” and is beloved by Tufte.) Within each plot we have the x-axis for one factor (nC) and multiple lines for the final factor (tau). The \\(y\\)-axis is our outcome of interest, power. We add a 0.05 line to show when we are rejecting at rates above our nominal \\(\\alpha\\). This plot shows the relationship of 5 variables. exp.res = exp.res %&gt;% mutate( tau = as.factor( tau ) ) ggplot( exp.res, aes( x=nC, y=power, group=tau, col=tau ) ) + facet_grid( sdTau ~ nT, labeller=label_both ) + geom_point() + geom_line() + scale_x_log10() + geom_hline( yintercept=0.05, col=&quot;black&quot;, lty=2) We ae looking at power for different control and treatment group sizes. The tau is our treatment effect, and so for \\(\\tau = 0\\) we are looking at validity (false rejection of the null) and for the other \\(\\tau\\) power (noticing an effect when it is there). Notice that we are seeing elevated rejection rates under the null for small and even moderate sample sizes! 13.6.2 Focusing on validity We can zoom in on specific simulations run, to get some more detail such as estimated power under the null for larger groups. Here we check and we are seeing rejection rates (power) of around 0.05, which is what we want. filter( exp.res, tau==0, nT &gt;= 50, nC &gt;= 50 ) %&gt;% knitr::kable(digits=2) E.tau.hat E.SE.hat power nC nT sdC tau mu sdTau R 0 0.20 0.06 50 50 1 0 5 0.0 2000 0 0.21 0.05 50 50 1 0 5 0.5 2000 0 0.15 0.06 50 500 1 0 5 0.0 2000 0 0.15 0.05 50 500 1 0 5 0.5 2000 0 0.15 0.05 500 50 1 0 5 0.0 2000 0 0.16 0.06 500 50 1 0 5 0.5 2000 0 0.06 0.04 500 500 1 0 5 0.0 2000 0 0.07 0.06 500 500 1 0 5 0.5 2000 We can get fancy and look at rejection rate (power under tau = 0) as a function of both nC and nT using an interaction-style plot where we average over the other variables: exp.res.rej &lt;- exp.res %&gt;% filter( tau == 0 ) %&gt;% group_by( nC, nT ) %&gt;% summarize( power = mean( power ) ) exp.res.rej = mutate( exp.res.rej, power = round( power * 100 ) ) ggplot( exp.res.rej, aes( x=nC, y=power, group=nT, col=as.factor(nT) ) ) + geom_point() + geom_line() + geom_hline( yintercept = 5 ) + scale_y_continuous( limits = c( 0, 40 ) ) + scale_x_log10( breaks = unique( exp.res.rej$nC ) ) + labs( x = &quot;# C&quot;, y = &quot;Power&quot;, colour = &quot;# T&quot; ) This plot focuses on the validity of our test. It shows that we have massively elevated rates when either the number of treated or control units is small (10 or below). It also shows that as the size of one group increases, if the other is small our rejection rates climb! Note how for 4 control units, the \\(n_T = 500\\) line is above the others (except for the \\(n_T = 2\\) line). 13.6.3 Looking at main effects We can ignore all the other factors while we look at one specific factor of interest. This is looking at the main effect or marginal effect of the factor. The easy way to do this is to let ggplot smooth our individual points on a plot. Be sure to also plot the individual points to see variation, however. ggplot( exp.res, aes( x=nC, y=power, group=tau, col=tau ) ) + geom_jitter( width=0.02, height=0, alpha=0.5 ) + geom_smooth( se = FALSE ) + scale_x_log10( breaks=nC) + geom_hline( yintercept=0.05, col=&quot;black&quot;, lty=2) Note how we see our individual runs that we marginalize over as the dots. To look at our main effects we can also summarize our results, averaging our experimental runs across other factor levels. For example, in the code below we average over the different treatment group sizes and standard deviations, and plot the marginalized results. To marginalize, we group by the things we want to keep. summarise() then averages over the things we want to get rid of. exp.res.sum = exp.res %&gt;% group_by( nC, tau ) %&gt;% summarise( power = mean( power ) ) head( exp.res.sum ) ## # A tibble: 6 × 3 ## # Groups: nC [2] ## nC tau power ## &lt;dbl&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 2 0 0.205 ## 2 2 0.5 0.254 ## 3 2 1 0.395 ## 4 4 0 0.114 ## 5 4 0.5 0.204 ## 6 4 1 0.427 ggplot( exp.res.sum, aes( x=nC, y=power, group=tau, col=tau ) ) + geom_line() + geom_point() + scale_x_log10( breaks=nC) + geom_hline( yintercept=0.05, col=&quot;black&quot;, lty=2) We can try to get clever and look at other aspects of our experimental runs. The above suggests that the smaller of the two groups is dictating things going awry, in terms of elevated rejection rates under the null. We can also look at things in terms of some other more easily interpretable parameter (here we switch to effect size instead of raw treatment effect). Given this, we might decide to look at total sample size or the smaller of the two groups sample size and make plots that way (we are also subsetting to just the sd=1 cases as there is nothing really different about the two options; we probably should average across but this could reduce clarity of the presentation of results): exp.res &lt;- exp.res %&gt;% mutate( n = nC + nT, n.min = pmin( nC, nT ) ) ggplot( exp.res, aes( x=n, y=power, group=tau, col=tau ) ) + geom_jitter( width=0.05, height=0) + geom_smooth( se = FALSE, span = 1) + scale_x_log10() + geom_hline( yintercept=0.05, col=&quot;black&quot;, lty=2) + labs( title = &quot;Total sample size&quot; ) ggplot( exp.res, aes( x=n.min, y=power, group=tau, col=tau ) ) + geom_jitter( width=0.05, height=0) + geom_smooth( se = FALSE, span = 1) + scale_x_log10() + geom_hline( yintercept=0.05, col=&quot;black&quot;, lty=2) + labs( title = &quot;Minimum group size&quot; ) Note the few observations out in the high n.min region for the second plot—this plot is a bit strange in that the different levels along the x-axis are assymetric with respect to each other. It is not balanced. 13.6.4 Recap Overall, this exploration demonstrates the process of looking at a single performance metric (power) and refining a series of plots to get a sense of what the simulation is taking us. There are many different plots we might choose, and this depends on the messages we are trying to convey. The key is to explore, and see what you can learn! 13.7 Exercises For our cluster RCT, use the simulation results to assess how much better (or worse) the different methods are to each other in terms of confidence interval coverage. What scenarios tend to result in the worst coverage? "],["case-study-comparing-different-estimators.html", "Chapter 14 Case study: Comparing different estimators 14.1 The data generating process 14.2 The data analysis methods 14.3 The simulation itself 14.4 Calculating performance measures for all our estimators 14.5 Improving the visualization of the results 14.6 Extension: The Bias-variance tradeoff", " Chapter 14 Case study: Comparing different estimators Features of this case study - Calculating performance metrics by estimator using tidyverse. - Visualization of simulation results. - Construction of the classic Bias + SE + RMSE performance plot. In this case study we examine a simulation where we wish to compare different forms of estimator for estimating the same thing. We still generate data, evaluate it, and see how well our evaluation works. The difference is we now evaluate it multiple ways, storing how the different ways work. For our simple working example we are going to compare estimation of the center of a symmetric distribution via mean, trimmed mean, and median (so the mean and median are the same). These are the three estimation strategies that we might be comparing in a paper (pretend we have “invented” the trimmed mean and want to demonstrate its utility). We are, as usual, going to break building this simulation evaluation down into lots of functions to show the general framework. This framework can readily be extended to more complicated simulation studies. This case study illustrates how methodologists might compare different strategies for estimation, and is closest to what we might see in the “simulation” section of a stats paper. 14.1 The data generating process For our data-generation function we will use the scaled \\(t\\)-distribution so the standard deviation will always be 1 but we will have different fatness of tails (high chance of outliers): gen.data = function( n, df0 ) { rt( n, df=df0 ) / sqrt( df0 / (df0-2) ) } The variance of a \\(t\\) is \\(df/(df-2)\\), so if we divide our observations by the square root of this, we will standardize them so they have unit variance. See, the standard deviation is 1 (up to random error, and as long as df0 &gt; 2)!: sd( gen.data( 100000, df0 = 3 ) ) ## [1] 1.01542 (Normally our data generation code would be a bit more fancy.) We next define the parameter we want (in our case this is the mean, is what we are trying to estimate): mu = 0 14.2 The data analysis methods We then write a function that takes data and uses all our different estimators on it. We return a data frame of the three estimates, with each row being one of our estimators. This is useful if our estimators return an estimate and a standard error, for example. analyze.data = function( data ) { mn = mean( data ) md = median( data ) mn.tr = mean( data, trim=0.1 ) data.frame( estimator = c( &quot;mean&quot;, &quot;trim.mean&quot;, &quot;median&quot; ), estimate = c( mn, mn.tr, md ) ) } Let’s test: dt = gen.data( 100, 3 ) analyze.data( dt ) ## estimator estimate ## 1 mean -0.044891002 ## 2 trim.mean 0.005257327 ## 3 median 0.004890847 Note that we have bundled our multiple methods into a single function. With complex methods we generally advocate a separate function for each method, but sometimes for a target simulation having a host of methods wrapped in a single function is clean and tidy code. Also note the three lines of output for our returned value. This long-form output will make processing the simulation results easier. That being said, returning in wide format is also completely legitimate. 14.3 The simulation itself To evaluate, do a bunch of times, and assess results. Let’s start by looking at a specific case. We generate 1000 datasets of size 10, and estimate the center using our three different estimators. raw.exps &lt;- replicate( 1000, { dt = gen.data( n=10, df0=5 ) analyze.data( dt ) }, simplify = FALSE ) raw.exps = bind_rows( raw.exps, .id = &quot;runID&quot; ) Note how our .id argument gives each simulation run an ID. This can be useful to see how the estimators covary. We now have 1000 estimates for each of our estimators: head( raw.exps ) ## runID estimator estimate ## 1 1 mean -0.09919345 ## 2 1 trim.mean -0.20887036 ## 3 1 median -0.12237738 ## 4 2 mean -0.19312165 ## 5 2 trim.mean -0.22091715 ## 6 2 median -0.18534152 14.4 Calculating performance measures for all our estimators We then want to assess estimator performance for each estimator. We first write a function to calculate what we want from 1000 estimates: estimator.quality = function( estimates, mu ) { RMSE = sqrt( mean( (estimates - mu)^2 ) ) bias = mean( estimates - mu ) SE = sd( estimates ) data.frame( RMSE=RMSE, bias=bias, SE=SE ) } The key is our function is estimation-method agnostic: we will use it for each of our three estimators. Here we evaluate our ‘mean’ estimator: filter( raw.exps, estimator == &quot;mean&quot; ) %&gt;% pull( estimate ) %&gt;% estimator.quality( mu = mu ) ## RMSE bias SE ## 1 0.3318663 -0.01079814 0.3318566 Aside: Perhaps, code-wise, the above is piping having gone too far? If you don’t like this style, you can do this: estimator.quality( raw.exps$estimate[ raw.exps$estimator==&quot;mean&quot;], mu ) ## RMSE bias SE ## 1 0.3318663 -0.01079814 0.3318566 To do all our three estimators, we group by estimator and evaluate for each estimator. In tidyverse 1.0 summarise can handle multiple responses, but they will look a bit weird in our output, hence the ‘unpack()’ argument which makes each column its own column (if we do not unpack, we have a “data frame column” which is an odd thing). raw.exps %&gt;% group_by( estimator ) %&gt;% summarise( qual = estimator.quality( estimate, mu = 0 ) ) %&gt;% tidyr::unpack( cols=c(qual) ) ## # A tibble: 3 × 4 ## estimator RMSE bias SE ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 mean 0.332 -0.0108 0.332 ## 2 median 0.331 -0.00855 0.331 ## 3 trim.mean 0.311 -0.0105 0.311 We then pack up the above into a function, as usual. Our function takes our two parameters of sample size and degrees of freedom, and returns a data frame of results. run.simulation = function( n, df0 ) { raw.exps &lt;- replicate( 1000, { dt = gen.data( n=n, df0=df0 ) analyze.data( dt ) }, simplify = FALSE ) raw.exps = bind_rows( raw.exps, .id = &quot;runID&quot; ) rs &lt;- raw.exps %&gt;% group_by( estimator ) %&gt;% summarise( qual = estimator.quality( estimate, mu = 0 ) ) %&gt;% tidyr::unpack( cols=c( qual ) ) rs } Our function will take our two parameters, run a simulation, and give us the results. We see here that none of our estimators are particularly biased and the trimmed mean has, possibly, the smallest RMSE, although it is a close call. run.simulation( 10, 5 ) ## # A tibble: 3 × 4 ## estimator RMSE bias SE ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 mean 0.318 0.0136 0.318 ## 2 median 0.315 0.00888 0.315 ## 3 trim.mean 0.294 0.0111 0.294 Ok, now we want to see how sample size impacts our different estimators. If we also vary degrees of freedom we have a three-factor experiment, where one of the factors is our estimator itself. We are going to use a new clever trick. As before, we use pmap(), but now we store the entire dataframe of results we get back from our function in a new column of our original dataframe. See R for DS, Chapter 25.3. This trick works best if we have everything as a tibble which is basically a dataframe that prints a lot nicer and doesn’t try to second-guess what you are up to all the time. ns = c( 10, 50, 250, 1250 ) dfs = c( 3, 5, 15, 30 ) lvls = expand_grid( n=ns, df=dfs ) # So it stores our dataframe results in our lvls data properly. lvls = as_tibble(lvls) results &lt;- lvls %&gt;% mutate( results = pmap( lvls, run.simulation ) ) We have stored our results (a bunch of dataframes) in our main matrix of simulation runs. print( results, n=4 ) ## # A tibble: 16 × 3 ## n df results ## &lt;dbl&gt; &lt;dbl&gt; &lt;list&gt; ## 1 10 3 &lt;tibble [3 × 4]&gt; ## 2 10 5 &lt;tibble [3 × 4]&gt; ## 3 10 15 &lt;tibble [3 × 4]&gt; ## 4 10 30 &lt;tibble [3 × 4]&gt; ## # ℹ 12 more rows The unnest() function will stack up our dataframes, replicating the other columns in the main dataframe so it makes a nice rectangular dataset, all nice like. See (hard to read) R for DS Chapter 25.4. results &lt;- unnest( results, cols=&quot;results&quot; ) results ## # A tibble: 48 × 6 ## n df estimator RMSE bias SE ## &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 10 3 mean 0.308 -0.00795 0.308 ## 2 10 3 median 0.244 -0.00403 0.244 ## 3 10 3 trim.mean 0.250 -0.00347 0.250 ## 4 10 5 mean 0.321 -0.00142 0.322 ## 5 10 5 median 0.315 -0.00763 0.315 ## 6 10 5 trim.mean 0.294 -0.000161 0.294 ## 7 10 15 mean 0.316 -0.00903 0.316 ## 8 10 15 median 0.357 0.00890 0.357 ## 9 10 15 trim.mean 0.316 -0.00138 0.316 ## 10 10 30 mean 0.315 -0.00450 0.315 ## # ℹ 38 more rows And plot: ggplot( results, aes(x=n, y=RMSE, col=estimator) ) + facet_wrap( ~ df, nrow=1 ) + geom_line() + geom_point() + scale_x_log10( breaks=ns ) 14.5 Improving the visualization of the results The above doesn’t show differences clearly because all the RMSE goes to zero. It helps to log our outcome, or otherwise rescale. The logging version shows differences are relatively constant given changing sample size. ggplot( results, aes(x=n, y=RMSE, col=estimator) ) + facet_wrap( ~ df, nrow=1 ) + geom_line() + geom_point() + scale_x_log10( breaks=ns ) + scale_y_log10() Better is to rescale using our knowledge of standard errors. If we scale by the square root of sample size, we should get horizontal lines. We now clearly see the trends. results &lt;- mutate( results, scaleRMSE = RMSE * sqrt(n) ) ggplot( results, aes(x=n, y=scaleRMSE, col=estimator) ) + facet_wrap( ~ df, nrow=1) + geom_line() + geom_point() + scale_x_log10( breaks=ns ) Overall, we see the scaled error of the mean it is stable across the different distributions. The trimmed mean is a real advantage when the degrees of freedom are small. We are cropping outliers that destabilize our estimate which leads to great wins. As the distribution grows more normal, this is no longer an advantage and we get closer to the mean in terms of performance. Here we are penalized slightly bye having dropped 10% of our data, so the standard errors will be slightly larger. The median is not able to take advantage of the nuances of a data set because it is entirely determined by the middle value. When outliers cause real concern, this cost is minimal. When outliers are not a concern, the median is just worse. Overall, the trimmed mean seems an excellent choice: in the presence of outliers it is far more stable than the mean, and when there are no outliers the cost of using it is small. In terms of thinking about designing simulation studies, we see clear visual displays of simulation results can tell very clear stories. Eschew complicated tables with lots of numbers. 14.6 Extension: The Bias-variance tradeoff We can use the above simulation to examine these same estimators when we the median is not the same as the mean. Say we want the mean of a distribution, but have systematic outliers. If we just use the median, or trimmed mean, we might have bias if the outliers tend to be on one side or another. For example, consider the exponential distribution: nums = rexp( 100000 ) mean( nums ) ## [1] 1.002233 mean( nums, trim=0.1 ) ## [1] 0.8323088 median( nums ) ## [1] 0.6908992 Our trimming, etc., is biased if we think of our goal as estimating the mean. But if the trimmed estimators are much more stable, we might still wish to use them. Let’s find out. Let’s generate a mixture distribution, just for fun. It will have a nice normal base with some extreme outliers. We will make sure the overall mean, including the outliers, is always 1, however. (So our target, \\(\\mu\\) is now 1, not 0.) gen.data.outliers = function( n, prob.outlier = 0.05 ) { nN = rbinom( 1, n, prob.outlier ) nrm = rnorm( n - nN, mean=0.5, sd=1 ) outmean = (1 - (1-prob.outlier)/2) / prob.outlier outs = rnorm( nN, mean=outmean, sd=10 ) c( nrm, outs ) } Let’s look at our distribution Y = gen.data.outliers( 10000000, prob.outlier = 0.05 ) mean( Y ) ## [1] 1.000522 sd( Y ) ## [1] 3.273068 hist( Y, breaks=30, col=&quot;grey&quot;, prob=TRUE ) We steal the code from above, modifying it slightly for our new function and changing our target parameter from 0 to 1: run.simulation.exp = function( n ) { raw.exps &lt;- replicate( 1000, { dt = gen.data.outliers( n=n ) analyze.data( dt ) }, simplify = FALSE ) raw.exps = bind_rows( raw.exps, .id = &quot;runID&quot; ) rs &lt;- raw.exps %&gt;% group_by( estimator ) %&gt;% summarise( qual = estimator.quality( estimate, mu = 1 ) ) %&gt;% tidyr::unpack( cols = c( qual ) ) rs } res = run.simulation.exp( 100 ) res ## # A tibble: 3 × 4 ## estimator RMSE bias SE ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 mean 0.326 -0.00208 0.326 ## 2 median 0.475 -0.457 0.130 ## 3 trim.mean 0.455 -0.440 0.115 And for our experiment we vary the sample size ns = c( 10, 20, 40, 80, 160, 320 ) lvls = tibble( n=ns ) results &lt;- lvls %&gt;% mutate( results = pmap( lvls, run.simulation.exp ) ) %&gt;% unnest( cols = c(results) ) head( results ) ## # A tibble: 6 × 5 ## n estimator RMSE bias SE ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 10 mean 1.04 -0.0265 1.04 ## 2 10 median 0.593 -0.454 0.381 ## 3 10 trim.mean 0.655 -0.381 0.533 ## 4 20 mean 0.740 -0.000791 0.740 ## 5 20 median 0.536 -0.454 0.285 ## 6 20 trim.mean 0.518 -0.410 0.317 Here we are going to plot multiple outcomes. Often with the simulation study we are interested in different measures of performance. For us, we want to know the standard error, bias, and overall error (RMSE). To plot this we first gather our outcomes to make a long form dataframe of results: res2 = gather( results, RMSE, bias, SE, key=&quot;Measure&quot;,value=&quot;value&quot; ) res2 = mutate( res2, Measure = factor( Measure, levels=c(&quot;SE&quot;,&quot;bias&quot;,&quot;RMSE&quot; ))) And then we plot, making a facet for each outcome of interest: ggplot( res2, aes(x=n, y=value, col=estimator) ) + facet_grid( . ~ Measure ) + geom_hline( yintercept=0, col=&quot;darkgrey&quot; ) + geom_line() + geom_point() + scale_x_log10( breaks=ns ) + labs( y=&quot;&quot; ) We see how different estimators have different biases and different uncertainties. The bias is negative for our trimmed estimators because we are losing the big outliers above and so getting answers that are too low. The RMSE captures the trade-off in terms of what estimator gives the lowest overall error. For this distribution, the mean wins as the sample size increases because the bias basically stays the same and the SE drops. But for smaller samples the trimming is superior. The median (essentially trimming 50% above and below) is overkill and has too much negative bias. From a simulation study point of view, notice how we are looking at three different qualities of our estimators. Some people really care about bias, some care about RMSE. By presenting all results we are transparent about how the different estimators operate. Next steps would be to also examine the associated estimated standard errors for the estimators, seeing if these estimates of estimator uncertainty are good or poor. This leads to investigation of coverage rates and similar. "],["presentation-of-simulation-results.html", "Chapter 15 Presentation of simulation results 15.1 Tabulation 15.2 Visualization 15.3 Modeling", " Chapter 15 Presentation of simulation results Last chapter, we started to investigate how to present a multifactor experiment. In this chapter, we talk about some principles behind the choices one might make in generating final reports of a simulation. There are three primary approaches to the analysis and presentation of simulation results: Tabulation Visualization Modeling There are generally two primary goals for your results: Understand the effects of all of the factors manipulated in the simulation. Develop evidence that addresses your research questions. For your final write-up, you will not want to present everything. A wall of numbers and observations will serve to pummel the reader, rather than inform them; readers rarely enjoy being pummeled, and the solution is quite often to skim such material while feeling hurt and betayed. Instead, you should present selected results that clearly illustrate the main findings from the study and anything unusual/anomolous. This will typically be with a few well-chosen figues. Then, in the text of your write-up, you might include examples that make specific numerical comparisons. Do not include too many of theses, and be sure to say why the numerical comparisons you include are important. Finally, have supplementary materials that contain further detail such as additional figures and analysis, and complete simulation results. If you want to be a moral person worthy of the awards of Heaven, you should also provide reproducible code so others could, if so desired, rerun the simulation and conduct the analysis themselves. This last part provides a great legitimacy bump to your work: even if no one touches your code, knowing that they could builds confidence. People naturally think, “if that researcher is so willing to let me see what they actually did, then they must be fairly confident it does not contain too many horrendous mistakes and it is probably right.” We briefly walk through the three modes of engaging with one’s simulation results, with a few examples taken from the literature. 15.1 Tabulation Traditionally, simulation study results are presented in big tables. We think this doesn’t really make the take-aways of a simulation readily apparent. Perhaps tables are fine if… - they involve only a few numbers, and a few targeted comparisons - it is important to report exact values for some quantities Unfortunately, simulations usually produce lots of numbers, and involve making lots of comparisons. You are going to want to show, for example, the relative performance of alternative estimators, or the performance of your estimators under different conditions for the data-generating model. This means a lot of rows, and a lot of dimensions. Tables can do two dimensions; when you try to cram more than that into a table, no one is particularly well served. Furthermore, in simulation, exact values for your bias/RMSE/type-I error, or whatever, are not usually of interest. And in fact, we rarely have them due to Monte Carlo simulation error. The tables provide a false sense of security, unless you include uncertainty, which clutters your table even further. Tables and simulations do not particularly well mix. In particular, if you are ever tempted into putting your table in landscape mode to get it to fit on the page, think again. It is often more useful and insightful to present results in graphs (Gelman, Pasarica, &amp; Dodhia, 2002). So, onwards. 15.2 Visualization Visualization should nearly always be the first step in analyzing simulation results. This often requires creating a BUNCH of graphs to look at different aspects of the data. Helpful tools/concepts: Boxplots are often useful for depicting range and central tendency across many combinations of parameter values. Use color, shape, and line type to encode different factors Small multiples (faceting) can then encode further factors (e.g., varying sample size) We next present a series of visualizations taken from our published work, illustrating some different themes behind visualization that we believe are important. 15.2.1 Example 1: Biserial correlation estimation Our first example shows the bias of a biserial correlation estimate from an extreme groups design. This simulation was a \\(96 \\times 2 \\times 5 \\times 5\\) factorial design (true correlation for a range of values, cut-off type, cut-off percentile, and sample size). The correlation, with 96 levels, forms the \\(x\\)-axis, giving us nice performance curves. We use line type for the sample size, allowing us to easily see how bias collapses as sample size increases. Finally, the facet grid gives our final factors of cut-off type and cut-off percentile. All our factors, and nearly 5000 explored simulation scenarios, are visible in a single plot. ## `geom_smooth()` using formula = &#39;y ~ x&#39; Source: Pustejovsky, J. E. (2014). Converting from d to r to z when the design uses extreme groups, dichotomization, or experimental control. Psychological Methods, 19(1), 92-112. Note that in our figure, we have smoothed the lines with respect to rho using geom_smooth(). This is a nice tool for taking some of the simulation jitter out of an analysis to show overall trends more directly. 15.2.2 Example 2: Variance estimation and Meta-regression Type-I error rates of small-sample corrected F-tests based on cluster-robust variance estimation in meta-regression Comparison of 5 different small-sample corrections Complex experimental design, varying sample size (\\(m\\)) dimension of hypothesis (\\(q\\)) covariates tested degree of model mis-specification Source: Tipton, E., &amp; Pustejovsky, J. E. (2015). Small-sample adjustments for tests of moderators and model fit using robust variance estimation in meta-regression. Journal of Educational and Behavioral Statistics, 40(6), 604-634. 15.2.3 Example: Heat maps of coverage The visualization below shows the coverage of parametric bootstrap confidence intervals for momentary time sampling data In this simulation study the authors were comparing maximum likelihood estimators to posterior mode (penalized likelihood) estimators of prevalence. We have a 2-dimensional parameter space of prevalence (19 levels) by incidence (10 levels). We also have 15 levels of sample size. One option here is to use a heat map, showing the combinations of prevelance and incidence as a grid for each sample size level. We break coverage into ranges of interest, with green being “good” (near 95%) and yellow being “close” (92.5% or above). For this to work, we need our MCSE to be small enough that our coverage is estimated precisely enough to show structure. ## Warning: `qplot()` was deprecated in ggplot2 3.4.0. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to ## see where this warning was generated. To see this plot IRL, see Pustejovsky, J. E., &amp; Swan, D. M. (2015). Four methods for analyzing partial interval recording data, with application to single-case research. Multivariate Behavioral Research, 50(3), 365-380. 15.3 Modeling Simulations are designed experiments, often with a full factorial structure. We can therefore leverage classic means for analyzing such full factorial experiment. In particular, we in effect model how a performance measure varies as a function of the different experimental factors. We can use regression or other modeling to do this. First, in the language of a full factor experiment, we might be interested in the “main effects” or “interaction effects.” A main effect is whether, averaging across the other factors in our experiment, a factor of interest systematically impacts our peformance measure. When we look at a main effect, the other factors help ensure our main effect is generalizable: if we see a trend when we average over the other varying aspects, then we can state that for a host of simulation contexts, grouped by levels of our main effect, we see a trend. For example, consider the Bias of biserial correlation estimate from an extreme groups design example from above. Visually, we see that most factors appear to matter for bias, but we might want to get a sense of how much. In particular, does the the population vs sample cutoff option matter, on average, for bias? options(scipen = 5) mod = lm( bias ~ fixed + rho + I(rho^2) + p1 + n, data = r_F) summary(mod, digits=2) ## ## Call: ## lm(formula = bias ~ fixed + rho + I(rho^2) + p1 + n, data = r_F) ## ## Residuals: ## Min 1Q Median 3Q ## -0.0215935 -0.0013608 0.0003823 0.0015677 ## Max ## 0.0081802 ## ## Coefficients: ## Estimate Std. Error ## (Intercept) 0.00218473 0.00015107 ## fixedSample cutoff -0.00363520 0.00009733 ## rho -0.00942338 0.00069578 ## I(rho^2) 0.00720857 0.00070868 ## p1.L 0.00461700 0.00010882 ## p1.Q -0.00160546 0.00010882 ## p1.C 0.00081464 0.00010882 ## p1^4 -0.00011190 0.00010882 ## n.L 0.00362949 0.00010882 ## n.Q -0.00103981 0.00010882 ## n.C 0.00027941 0.00010882 ## n^4 0.00001976 0.00010882 ## t value Pr(&gt;|t|) ## (Intercept) 14.462 &lt; 2e-16 *** ## fixedSample cutoff -37.347 &lt; 2e-16 *** ## rho -13.544 &lt; 2e-16 *** ## I(rho^2) 10.172 &lt; 2e-16 *** ## p1.L 42.426 &lt; 2e-16 *** ## p1.Q -14.753 &lt; 2e-16 *** ## p1.C 7.486 8.41e-14 *** ## p1^4 -1.028 0.3039 ## n.L 33.352 &lt; 2e-16 *** ## n.Q -9.555 &lt; 2e-16 *** ## n.C 2.568 0.0103 * ## n^4 0.182 0.8559 ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.003372 on 4788 degrees of freedom ## Multiple R-squared: 0.5107, Adjusted R-squared: 0.5096 ## F-statistic: 454.4 on 11 and 4788 DF, p-value: &lt; 2.2e-16 The above printout gives main effects for each factor, averaged across other factors. It is automatically generating linear, quadradic, cubic and fourth order contrasts for the ordered factors of p1 and n. We see that, across other contexts, the sample cutoff is around 0.004 lower than population. We next discuss two additional tools: ANOVA can be useful for understanding major sources of variation in simulation results (e.g., identifying which factors have negligible/minor influence on the bias of an estimator). Smoothing (e.g., local linear regression) over continuous factors anova_table &lt;- aov(bias ~ rho * p1 * fixed * n, data = r_F) summary(anova_table) ## Df Sum Sq Mean Sq F value ## rho 1 0.002444 0.002444 1673.25 ## p1 4 0.023588 0.005897 4036.41 ## fixed 1 0.015858 0.015858 10854.52 ## n 4 0.013760 0.003440 2354.60 ## rho:p1 4 0.001722 0.000431 294.71 ## rho:fixed 1 0.003440 0.003440 2354.69 ## p1:fixed 4 0.001683 0.000421 287.98 ## rho:n 4 0.002000 0.000500 342.31 ## p1:n 16 0.019810 0.001238 847.51 ## fixed:n 4 0.013359 0.003340 2285.97 ## rho:p1:fixed 4 0.000473 0.000118 80.87 ## rho:p1:n 16 0.001470 0.000092 62.91 ## rho:fixed:n 4 0.002929 0.000732 501.23 ## p1:fixed:n 16 0.001429 0.000089 61.12 ## rho:p1:fixed:n 16 0.000429 0.000027 18.36 ## Residuals 4700 0.006866 0.000001 ## Pr(&gt;F) ## rho &lt;2e-16 *** ## p1 &lt;2e-16 *** ## fixed &lt;2e-16 *** ## n &lt;2e-16 *** ## rho:p1 &lt;2e-16 *** ## rho:fixed &lt;2e-16 *** ## p1:fixed &lt;2e-16 *** ## rho:n &lt;2e-16 *** ## p1:n &lt;2e-16 *** ## fixed:n &lt;2e-16 *** ## rho:p1:fixed &lt;2e-16 *** ## rho:p1:n &lt;2e-16 *** ## rho:fixed:n &lt;2e-16 *** ## p1:fixed:n &lt;2e-16 *** ## rho:p1:fixed:n &lt;2e-16 *** ## Residuals ## --- ## Signif. codes: ## 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 library(lsr) etaSquared(anova_table) ## eta.sq eta.sq.part ## rho 0.021971037 0.26254289 ## p1 0.212004203 0.77453319 ## fixed 0.142527898 0.69783705 ## n 0.123670355 0.66710072 ## rho:p1 0.015479114 0.20052330 ## rho:fixed 0.030918819 0.33377652 ## p1:fixed 0.015125570 0.19684488 ## rho:n 0.017979185 0.22560369 ## p1:n 0.178055588 0.74260975 ## fixed:n 0.120065971 0.66049991 ## rho:p1:fixed 0.004247472 0.06439275 ## rho:p1:n 0.013216569 0.17638308 ## rho:fixed:n 0.026326074 0.29902214 ## p1:fixed:n 0.012839790 0.17222072 ## rho:p1:fixed:n 0.003857877 0.05883389 "],["sec-reproducability.html", "Chapter 16 Ensuring reproducibility 16.1 Seeds and pseudo-random number generators 16.2 Including seed in our simulation driver 16.3 Reasons for setting the seed", " Chapter 16 Ensuring reproducibility In the prior section we built a simulation driver. Because this function involves generating random numbers, re-running it with the exact same input parameters will still produce different results: run_alpha_sim(iterations = 10, n = 50, p = 6, alpha = 0.73, df = 5) ## criterion est MCSE ## 1 alpha bias -0.03322927 0.031758861 ## 2 alpha RMSE 0.10090497 0.008743501 ## 3 V relative bias 0.48077615 0.114109836 ## 4 coverage 0.80000000 0.068920244 run_alpha_sim(iterations = 10, n = 50, p = 6, alpha = 0.73, df = 5) ## criterion est MCSE ## 1 alpha bias 0.004056121 0.015203417 ## 2 alpha RMSE 0.045790250 0.002703622 ## 3 V relative bias 1.511919446 0.207758767 ## 4 coverage 1.000000000 0.068920244 Of course, using a larger number of iterations will give us more precise estimates of the performance criteria. If we want to get the exact same results, however, we have to control the random process. This is more possible than it sounds: Monte Carlo simulations are random, but computers are not. When we generate “random numbers” they actually come from a chain of mathematical equations that, given a number, will generate the next number in a deterministic sequence. Given that number, it will generate the next, and so on. The numbers we get back are a part of this chain of (very large) numbers that, ideally, cycles through an extremely long list of numbers in a haphazard and random looking fashion. This is what the seed argument that we have glossed over before is all about. If we set the same seed, we get the same results: run_alpha_sim(iterations = 10, n = 50, p = 6, alpha = 0.73, df = 5, seed = 6) ## criterion est MCSE ## 1 alpha bias -0.02053560 0.02585963 ## 2 alpha RMSE 0.08025083 0.01344827 ## 3 V relative bias 0.64909209 1.43035647 ## 4 coverage 0.90000000 0.06892024 run_alpha_sim(iterations = 10, n = 50, p = 6, alpha = 0.73, df = 5, seed = 6) ## criterion est MCSE ## 1 alpha bias -0.02053560 0.02585963 ## 2 alpha RMSE 0.08025083 0.01344827 ## 3 V relative bias 0.64909209 1.43035647 ## 4 coverage 0.90000000 0.06892024 This is useful because it ensure the full reproducibility of the results. In practice, it is a good idea to always set seed values for your simulations, so that you (or someone else!) can exactly reproduce the results. Let’s look more at how this works. 16.1 Seeds and pseudo-random number generators In R, we can start a sequence of deterministic but random-seeming numbers by setting a “seed”. This means all the random numbers that come after it will be the same. Compare this: rchisq(3, df = 5) ## [1] 1.193539 5.338936 6.294274 rchisq(3, df = 5) ## [1] 0.7189536 6.3697718 8.2913988 To this: set.seed(20210527) rchisq(3, df = 5) ## [1] 1.643698 6.229613 3.249164 set.seed(20210527) rchisq(3, df = 5) ## [1] 1.643698 6.229613 3.249164 By setting the seed the second time we reset our sequence of random numbers. Similarly, to ensure reproducibility in our simulation, we will add an option to set the seed value of the random number generator. This seed is low-level, meaning if we are generating numbers via rnorm or rexp or rchisq, it doesn’t matter. Each time we ask for a random number from the low-level pseudo-random number generator, it gives us the next number back. These other functions, like rnorm(), etc., all call this low-level generator and than transform the number to be of the correct distribution. 16.2 Including seed in our simulation driver The easy way to ensure reproducability is to pass a seed as a parameter. If we leave it NULL, we ignore it and just continue generating random numbers from wherever we are in the system. If we specify a seed, however, we set it at the beginning of the scenario, and then all the numbers that follow will be in sequence. Our code will typically look like this: run_alpha_sim &lt;- function(iterations, n, p, alpha, df, coverage = 0.95, seed = NULL) { if (!is.null(seed)) set.seed(seed) results &lt;- replicate(n = iterations, { dat &lt;- r_mvt_items(n = n, p = p, alpha = alpha, df = df) estimate_alpha(dat, coverage = coverage) }, simplify = FALSE) %&gt;% bind_rows() alpha_performance(results, alpha = alpha, coverage = coverage) } Using our seed, we get identical results, as we saw in the intro, above. 16.3 Reasons for setting the seed Reproducibility allows us to easily check if we are running the same code that generate the results in some report. It also helps with debugging. For example, say we had an error that showed up one in a thousand, causing our simulation to crash sometimes. If we set a seed, and see that it crashes, we can then go try and catch the error and repair our code, and then rerun the simulation. If it runs clean, we know we got the error. If we had not set the seed, we would not know if we were just getting (un) lucky, and avoiding the error by chance. "],["optimize-code.html", "Chapter 17 Optimizing code (and why you often shouldn’t) 17.1 Hand-building functions 17.2 Computational efficiency versus simplicity 17.3 Reusing code to speed up computation", " Chapter 17 Optimizing code (and why you often shouldn’t) Optimizing code is when you spend a bit more human effort to write code that will run faster on your computer. In some cases, this can be a critical boost to running a simulation, where you inherently will be doing things a lot of times. Cutting runtime down will always be tempting, as it allows you to run more replicates and get more precisely estimated performance measures for your simulation. That being said, beyond a few obvious coding tricks we will discuss, one should optimize code only after you discover you need to. Optimizing as you go usually means you will spend a lot of time wrestling with code far more complicated than it needs to be. For example, often it is the estimation method that will take a lot of computational time, so having very fast data generation code won’t help overall simulation runtimes much, as you are tweaking something that is only a small part of the overall pie, in terms of time. Keep things simple; in general your time is more important than the computer’s time. In the next sections we will look at a few optimization efforts applied to the ANOVA example in the prior chapters. 17.1 Hand-building functions In the Welch example above, we used the system-implemented ANOVA. An alternative approach would be to “hand roll” the ANOVA F statistic and test directly. Doing so by hand can set you up to implement modified versions of these tests later on. Also, although hand-building a method does take more work to program, it can result in a faster piece of code (this actually is the case here) which in turn can make the overall simulation faster. Following the formulas on p. 129 of Brown and Forsythe (1974) we have (using data as generated in Chapter 6: ANOVA_F &lt;- function(sim_data) { x_bar &lt;- with(sim_data, tapply(x, group, mean)) s_sq &lt;- with(sim_data, tapply(x, group, var)) n &lt;- table(sim_data$group) g &lt;- length(x_bar) df1 &lt;- g - 1 df2 &lt;- sum(n) - g msbtw &lt;- sum(n * (x_bar - mean(sim_data$x))^2) / df1 mswn &lt;- sum((n - 1) * s_sq) / df2 fstat &lt;- msbtw / mswn pval &lt;- pf(fstat, df1, df2, lower.tail = FALSE) return(pval) } ANOVA_F(sim_data) ## [1] 0.009208908 To see the difference between our version and R’s version, we can use an R package called microbenchmark to test how long the computations take for each version of the function. The microbenchmark function runs each expression 100 times (by default) and tracks how long the computations take. It then summarizes the distribution of timings: library(microbenchmark) timings &lt;- microbenchmark(Rfunction = ANOVA_F_aov(sim_data), direct = ANOVA_F(sim_data)) timings ## Unit: microseconds ## expr min lq mean median ## Rfunction 292.100 471.2020 918.1801 715.4015 ## direct 122.101 192.7515 468.6470 295.1010 ## uq max neval ## 865.1515 6635.002 100 ## 401.1015 6360.001 100 The direct function is 2 times faster than the built-in R function. This result is not unusual. Built-in R functions usually include lots of checks and error-handling, which take time to compute. These checks are crucial for messy, real-world data analysis but unnecessary with our pristine, simulated data. Here we can skip them by doing the calculations directly. In general, however, this is a trade-off: writing something yourself gives you a lot of chance to do something wrong, throwing off all your simulations. It might be faster, but you may pay dearly for it in terms of extra hours coding and debugging. Optimize only if you need to! 17.2 Computational efficiency versus simplicity An alternative approach to having a function that, for each call, generates a single set of data, would be to write a function that generates multiple sets of simulated data all at once. For example, for our ANOVA example we could specify that we want R replications of the study and have the function spit out a matrix with R columns, one for each simulated dataset: generate_data_matrix &lt;- function(mu, sigma_sq, sample_size, R) { N &lt;- sum(sample_size) g &lt;- length(sample_size) group &lt;- rep(1:g, times = sample_size) mu_long &lt;- rep(mu, times = sample_size) sigma_long &lt;- rep(sqrt(sigma_sq), times = sample_size) x_mat &lt;- matrix(rnorm(N * R, mean = mu_long, sd = sigma_long), nrow = N, ncol = R) sim_data &lt;- list(group = group, x_mat = x_mat) return(sim_data) } generate_data_matrix(mu = mu, sigma_sq = sigma_sq, sample_size = sample_size, R = 4) ## $group ## [1] 1 1 1 2 2 2 2 2 2 3 3 4 4 4 4 ## ## $x_mat ## [,1] [,2] [,3] [,4] ## [1,] 2.1639323 1.646791 -0.9445957 1.2050393 ## [2,] -2.8225439 3.289125 0.8863700 3.7816431 ## [3,] 1.3419979 -3.020363 1.6196826 0.6425271 ## [4,] -0.5939495 1.184961 1.0200117 2.8301117 ## [5,] 0.1054279 3.499446 1.0267897 2.3166570 ## [6,] 4.0618127 4.340879 4.1291935 -1.0532910 ## [7,] 2.0611736 2.544518 1.3772973 -0.3861088 ## [8,] 2.2921786 2.299136 0.1706634 2.0329848 ## [9,] 2.5000308 3.686171 1.8712605 2.8557713 ## [10,] 4.0966732 5.824634 6.6448117 2.6354699 ## [11,] 5.9111997 3.480771 2.9453236 4.1680932 ## [12,] 6.2201594 6.116809 5.8446326 6.2140816 ## [13,] 5.9843999 6.488239 7.1954303 6.6280499 ## [14,] 6.3928820 4.699057 5.9033074 8.8796297 ## [15,] 7.9611464 7.282270 5.9095360 5.9131754 This approach is a bit more computationally efficient because the setup calculations (getting N, g, group, mu_full, and sigma_full) only have to be done once instead of once per replication. It also makes clever use of vector recycling in the call to rnorm(). However, the structure of the resulting data is more complicated, which will make it more difficult to do the later estimation steps. Furthermore, if the number of replicates R is large and each replication produces a large dataset, this “all-at-once” approach will entail generating and holding very large amounts of data in memory, which can create other performance issues. On balance, we recommend the simpler approach of writing a function that generates a single simulated dataset per call (unless and until you have a principled reason to do otherwise). 17.3 Reusing code to speed up computation Computational and programming efficiency should usually be a secondary consideration when you are starting to design a simulation study. It is better to produce accurate code, even if it is a bit slow, than to write code that is speedy but hard to follow (or even worse, that produces incorrect results). All that said, there is some glaring redundancy in the two functions used for the ANOVA simulation. Both ANOVA_F and Welch_F start by taking the simulated data and calculating summary statistics for each group, using the following code: x_bar &lt;- with(sim_data, tapply(x, group, mean)) s_sq &lt;- with(sim_data, tapply(x, group, var)) n &lt;- table(sim_data$group) g &lt;- length(x_bar) In the interest of not repeating ourselves, it would better to pull this code out as a separate function and then re-write the ANOVA_F and Welch_F functions to take the summary statistics as input. Here is a function that takes simulated data and returns a list of summary statistics: summarize_data &lt;- function(sim_data) { res &lt;- sim_data %&gt;% group_by( group ) %&gt;% summarise( x_bar = mean( x ), s_sq = var( x ), n = n() ) res } We just packaged the code from above, and puts our results in a nice table (and thus pivoted to using tidyverse to calculate these things): sim_data = generate_data(mu=mu, sigma_sq=sigma_sq, sample_size=sample_size) summarize_data(sim_data) ## # A tibble: 4 × 4 ## group x_bar s_sq n ## &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 1 1.90 1.42 3 ## 2 2 1.82 2.10 6 ## 3 3 4.40 0.626 2 ## 4 4 6.58 0.485 4 Now we can re-write both \\(F\\)-test functions to use the output of this function: ANOVA_F_agg &lt;- function(x_bar, s_sq, n) { g = length(x_bar) df1 &lt;- g - 1 df2 &lt;- sum(n) - g msbtw &lt;- sum(n * (x_bar - weighted.mean(x_bar, w = n))^2) / df1 mswn &lt;- sum((n - 1) * s_sq) / df2 fstat &lt;- msbtw / mswn pval &lt;- pf(fstat, df1, df2, lower.tail = FALSE) return(pval) } summary_stats &lt;- summarize_data(sim_data) with(summary_stats, ANOVA_F_agg(x_bar = x_bar, s_sq = s_sq, n = n)) ## [1] 0.0003129849 Welch_F_agg &lt;- function(x_bar, s_sq, n) { g = length(x_bar) w &lt;- n / s_sq u &lt;- sum(w) x_tilde &lt;- sum(w * x_bar) / u msbtw &lt;- sum(w * (x_bar - x_tilde)^2) / (g - 1) G &lt;- sum((1 - w / u)^2 / (n - 1)) denom &lt;- 1 + G * 2 * (g - 2) / (g^2 - 1) W &lt;- msbtw / denom f &lt;- (g^2 - 1) / (3 * G) pval &lt;- pf(W, df1 = g - 1, df2 = f, lower.tail = FALSE) return(pval) } with(summary_stats, ANOVA_F_agg(x_bar = x_bar, s_sq = s_sq, n = n)) ## [1] 0.0003129849 The results are the same as before. We should always test any optimized code against something we know is stable, since optimization is an easy way to get bad bugs. Here we check against R’s implementation: summary_stats &lt;- summarize_data(sim_data) F_results &lt;- with(summary_stats, ANOVA_F_agg(x_bar = x_bar, s_sq = s_sq, n = n)) aov_results &lt;- oneway.test(x ~ factor(group), data = sim_data, var.equal = TRUE) all.equal(aov_results$p.value, F_results) ## [1] TRUE W_results &lt;- with(summary_stats, Welch_F_agg( x_bar = x_bar, s_sq = s_sq, n = n)) aov_results &lt;- oneway.test(x ~ factor(group), data = sim_data, var.equal = FALSE) all.equal(aov_results$p.value, W_results) ## [1] TRUE Here we are able to check against a known baseline. Checking estimation functions can be a bit more difficult for procedures that are not already implemented in R. For example, the two other procedures examined by Brown and Forsythe, the James’ test and Brown and Forsythe’s \\(F*\\) test, are not available in base R. They are, however, available in the user-contributed package onewaytests, found by searching for “Brown-Forsythe” at http://rseek.org/. We could benchmark our calculations against this package, but of course there is some risk that the package might not be correct. Another route is to verify your results on numerical examples reported in authoritative papers, on the assumption that there’s less risk of an error there. In the original paper that proposed the test, Welch (1951) provides a worked numerical example of the procedure. He reports the following summary statistics: g &lt;- 3 x_bar &lt;- c(27.8, 24.1, 22.2) s_sq &lt;- c(60.1, 6.3, 15.4) n &lt;- c(20, 20, 10) He also reports \\(W = 3.35\\) and \\(f = 22.6\\). Replicating the calculations with our Welch_F_agg function: Welch_F_agg(x_bar = x_bar, s_sq = s_sq, n = n) ## [1] 0.05479049 We get slightly different results! But we know that our function is correct—or at least consistent with oneway.test—so what’s going on? It turns out that there was an error in some of Welch’s intermediate calculations, which can only be spotted because he reported all of his work in the paper. We then put all these pieces in our revised one_run() method as so: one_run_fast &lt;- function( mu, sigma_sq, sample_size ) { sim_data &lt;- generate_data(mu = mu, sigma_sq = sigma_sq, sample_size = sample_size) summary_stats &lt;- summarize_data(sim_data) anova_p &lt;- with(summary_stats, ANOVA_F_agg(x_bar = x_bar,s_sq = s_sq, n = n)) Welch_p &lt;- with(summary_stats, Welch_F_agg(x_bar = x_bar, s_sq = s_sq, n = n)) tibble(ANOVA = anova_p, Welch = Welch_p) } one_run_fast( mu = mu, sigma_sq = sigma_sq, sample_size = sample_size ) ## # A tibble: 1 × 2 ## ANOVA Welch ## &lt;dbl&gt; &lt;dbl&gt; ## 1 0.000982 0.0209 The reason this is important is we are now doing our group aggregation only once, rather than once per method. We can use our microbenchmark to see our speedup: library(microbenchmark) timings &lt;- microbenchmark(noagg = one_run(mu = mu, sigma_sq = sigma_sq, sample_size = sample_size), agg = one_run_fast(mu = mu, sigma_sq = sigma_sq, sample_size = sample_size) ) timings ## Unit: microseconds ## expr min lq mean median ## noagg 874.601 963.401 1923.618 1701.700 ## agg 2023.901 2314.051 3711.301 2983.901 ## uq max neval ## 1967.401 26421.7 100 ## 4724.651 11729.4 100 And our relative speedup is: with(summary(timings), round(mean[1] / mean[2], 1)) ## [1] 0.5 To recap, there are two advantages of this kind of coding: Code reuse is generally good because when you have the same code in multiple places it can make it harder to read and understand your code. If you see two blocks of code you might worry they are only mostly similar, not exactly similar, and waste time trying to differentiate. If you have a single, well-named function, you immediately know what a block of code is doing. Saving the results of calculations can speed up your computation since you are saving your partial work. This can be useful to reduce calculations that are particularly time intensive. "],["error-trapping-and-other-headaches.html", "Chapter 18 Error trapping and other headaches 18.1 Safe code 18.2 Protecting your functions with “stop”", " Chapter 18 Error trapping and other headaches If you have an advanced estimator, or are relying on some package, it is quite possible that every so often your estimate will trigger an error, or give you a NA result, or something similarly bad. More innocuous, you might have estimators that can generate warnings; if you run 10,000 trials, that can add up to a lot of warnings, which can be overwhelming to sort through. In some cases, these warnings might be coupled with the estimator returning a very off result; it is unclear, in this case, whether we should include that result in our overall performance measures for that estimator. After all, it tried to warn us! In this section, we talk about some ways to make your simulations safe and robust, and also discuss some ways to track warnings and include them in performance measures. 18.1 Safe code Sometimes if you write a function that does a lot of complex things with uncertain objects – i.e. consider a complex estimator using an unstable package not of your own creation – you can run into trouble where you have a intermittent error. This can really be annoying; consider the case where your simulation crashes on 1 out of 500 chance: if you run 1000 simulation trials, your program will likely not make it to the end, thus wasting all of your time. To protect yourself, you can write code that can, instead of stopping when it reaches an error, trap the error and move on with the next simulation trial. To illustrate, consider the following broken function that sometimes gives us what we want, sometimes gives us a NaN due to taking the square root of a negative number, and sometimes crashes completely due to broken_code() not existing: my_complex_function = function( param ) { vals = rnorm( param, mean = 0.5 ) if ( sum( vals ) &gt; 5 ) { broken_code( 4 ) } else { sqrt( sum( vals ) * sign( vals )[[1]] ) } } We run it like so: my_complex_function( 2 ) ## [1] 0.9437257 my_complex_function( 2 ) ## Warning in sqrt(sum(vals) * sign(vals)[[1]]): ## NaNs produced ## [1] NaN my_complex_function( 7 ) ## [1] 1.419031 So far so good, other than a NaN warning. Now let’s run it a bunch of times: resu = map( 1:20, ~ my_complex_function( 7 ) ) ## Warning in sqrt(sum(vals) * sign(vals)[[1]]): ## NaNs produced ## Error in `map()`: ## ℹ In index: 2. ## Caused by error in `broken_code()`: ## ! could not find function &quot;broken_code&quot; Oh no! Our function crashes sometimes. To trap the errors we use the purrr package to make a “safe” function as so: my_safe_function = safely( my_complex_function, otherwise = NA ) my_safe_function( 7 ) ## $result ## [1] NA ## ## $error ## &lt;simpleError in broken_code(4): could not find function &quot;broken_code&quot;&gt; Our safe version of the function gives us back a list of things: the result (or NULL if there was an error), and the error message (or NULL if there was no error). safely() is an example of a function wrapper, which takes a function and gives you back a new function that does something slightly different. We include otherwise = NA so we always get a result, even if it is a NA result. Otherwise we would get a NULL when there is an error, which might be harder to track. For example, we can use the above repeatedly, and then do a nice trick to get a list of error message separate from our list of results: resu = map( 1:20, ~ my_safe_function( 7 ) ) ## Warning in sqrt(sum(vals) * sign(vals)[[1]]): ## NaNs produced ## Warning in sqrt(sum(vals) * sign(vals)[[1]]): ## NaNs produced ## Warning in sqrt(sum(vals) * sign(vals)[[1]]): ## NaNs produced ## Warning in sqrt(sum(vals) * sign(vals)[[1]]): ## NaNs produced resu &lt;- transpose( resu ) unlist( resu$result ) ## [1] NaN NA NaN 0.4354079 ## [5] 1.0734109 NA 1.5196734 NA ## [9] NaN 0.6382972 1.0836506 NA ## [13] NA 1.6244187 1.1915743 NaN ## [17] 2.1165066 2.0638450 1.6465782 NA The transpose() method takes a list of lists, and reorganizes them to give you a list of all the first elements, a list of all the second elements, etc. This is very powerful for wrangling data, because then we can make a tibble with list columns as so: tb &lt;- tibble( result = unlist( resu$result ), error = resu$error ) print( tb, n = 4 ) ## # A tibble: 20 × 2 ## result error ## &lt;dbl&gt; &lt;list&gt; ## 1 NaN &lt;NULL&gt; ## 2 NA &lt;smplErrr&gt; ## 3 NaN &lt;NULL&gt; ## 4 0.435 &lt;NULL&gt; ## # ℹ 16 more rows There are other function wrappers in this “safe computing” family, such as “possibly,” which will try to run something and give you a default value if it fails: my_possible_function = possibly( my_complex_function, otherwise = NA ) my_possible_function( 7 ) ## [1] 1.960578 rs &lt;- map_dbl( 1:10, ~ my_possible_function(7) ) ## Warning in sqrt(sum(vals) * sign(vals)[[1]]): ## NaNs produced ## Warning in sqrt(sum(vals) * sign(vals)[[1]]): ## NaNs produced rs ## [1] 1.197171 NA 1.533298 NaN NA ## [6] NA NA NA NaN 2.149232 There is also “quietly,” which makes warnings and messages get bundled, rather than printed to the console: my_quiet_function = quietly( my_complex_function ) my_quiet_function( 1 ) ## $result ## [1] 0.3686244 ## ## $output ## [1] &quot;&quot; ## ## $warnings ## character(0) ## ## $messages ## character(0) This can be especially valuable to control massive amounts of printout in a simulation. If you have lots of extraneous printout, it can slow down the execution of your code far more than you might think. Note that quietly() does not trap errors, just warnings: rs &lt;- map( 1:20, ~ my_quiet_function(7) ) ## Error in `map()`: ## ℹ In index: 3. ## Caused by error in `broken_code()`: ## ! could not find function &quot;broken_code&quot; You can “double wrap” your function, if you want, but what you get back is a bit of a mess: my_safe_quiet_function = quietly( safely( my_complex_function, otherwise = NA ) ) my_safe_quiet_function(7) ## $result ## $result$result ## [1] NA ## ## $result$error ## &lt;simpleError in broken_code(4): could not find function &quot;broken_code&quot;&gt; ## ## ## $output ## [1] &quot;&quot; ## ## $warnings ## character(0) ## ## $messages ## character(0) 18.1.1 Making a safe function call You can do some magical massaging to make things work better upfront so you can capture both errors and warnings and get the results in a nice tidy tibble. For example, say our my_complex_function() is a method designed to analyze our data. We might then write a wrapper that cleans up our safe and quiet version unpack_mess &lt;- function( mess ) { rs = tibble( result = NA, error = NA, warnings = &quot;&quot; ) rs$result = mess$result$result rs$error = list( mess$result$error ) if ( length( mess$warnings ) &gt; 0 ) { rs$warnings = paste( mess$warnings, collapse=&quot;; &quot; ) } rs } unpack_mess( my_safe_quiet_function( 7 ) ) ## # A tibble: 1 × 3 ## result error warnings ## &lt;dbl&gt; &lt;list&gt; &lt;chr&gt; ## 1 1.56 &lt;NULL&gt; &quot;&quot; my_safe_quiet_function &lt;- compose( unpack_mess, my_safe_quiet_function ) my_safe_quiet_function(7) ## # A tibble: 1 × 3 ## result error warnings ## &lt;dbl&gt; &lt;list&gt; &lt;chr&gt; ## 1 2.05 &lt;NULL&gt; &quot;&quot; The compose() method makes a new function that will call unpack_mess() automatically. We have now wrapped our original function, in effect, three times. The result is a new function that takes the same parameters as our original my_complex_function() method, and returns some results, including information about errors and warnings, in a nicely organized way. We could use such a modified function in a loop, and stack our results: rs &lt;- map_df( 1:20, ~ my_safe_quiet_function(6) ) rs ## # A tibble: 20 × 3 ## result error warnings ## &lt;dbl&gt; &lt;list&gt; &lt;chr&gt; ## 1 1.76 &lt;NULL&gt; &quot;&quot; ## 2 2.11 &lt;NULL&gt; &quot;&quot; ## 3 1.68 &lt;NULL&gt; &quot;&quot; ## 4 NaN &lt;NULL&gt; &quot;NaNs produced&quot; ## 5 NA &lt;smplErrr&gt; &quot;&quot; ## 6 1.66 &lt;NULL&gt; &quot;&quot; ## 7 NA &lt;smplErrr&gt; &quot;&quot; ## 8 1.34 &lt;NULL&gt; &quot;&quot; ## 9 1.35 &lt;NULL&gt; &quot;&quot; ## 10 1.94 &lt;NULL&gt; &quot;&quot; ## 11 2.15 &lt;NULL&gt; &quot;&quot; ## 12 1.79 &lt;NULL&gt; &quot;&quot; ## 13 NA &lt;smplErrr&gt; &quot;&quot; ## 14 NaN &lt;NULL&gt; &quot;NaNs produced&quot; ## 15 1.91 &lt;NULL&gt; &quot;&quot; ## 16 1.67 &lt;NULL&gt; &quot;&quot; ## 17 NaN &lt;NULL&gt; &quot;NaNs produced&quot; ## 18 2.13 &lt;NULL&gt; &quot;&quot; ## 19 2.10 &lt;NULL&gt; &quot;&quot; ## 20 NaN &lt;NULL&gt; &quot;NaNs produced&quot; These tools allow us to take existing analytic code and make it safe and quiet, so we can keep things organized in our simulation. 18.1.2 What to do with warnings in simulations Sometimes our analytic strategy might give some sort of warning (or fail altogether). For example, from the cluster randomized experiment case study we have: set.seed(101012) # (I picked this to show a warning.) dat = gen_dat_model( J = 50, n_bar = 100, sigma2_u = 0 ) mod &lt;- lmer( Yobs ~ 1 + Z + (1|sid), data=dat ) ## boundary (singular) fit: see help(&#39;isSingular&#39;) We have to make a deliberate decision as to what to do about this: Keep these “weird” trials? Drop them? If you decide to drop them, you should drop the entire simulation iteration including the other estimators, even if they worked fine! If there is something particularly unusual about the dataset, then dropping for one estimator, and keeping for the others that maybe didn’t give a warning, but did struggle to estimate the estimand, would be unfair: in the final performance measures the estimators that did not give a warning could be being held to a higher standard, making the comparisons between estimators biased. If your estimators generate warnings, you should calculate the rate of errors or warning messages as a performance measure. Especially if you drop some trials, it is important to see how often things are acting pecularly. The main tool for doing this is the quietly() function: quiet_lmer = quietly( lmer ) qmod &lt;- quiet_lmer( Yobs ~ 1 + Z + (1|sid), data=dat ) qmod ## $result ## Linear mixed model fit by REML [&#39;lmerModLmerTest&#39;] ## Formula: ..1 ## Data: ..2 ## REML criterion at convergence: 6485.293 ## Random effects: ## Groups Name Std.Dev. ## sid (Intercept) 0.0000 ## Residual 0.9879 ## Number of obs: 2302, groups: sid, 50 ## Fixed Effects: ## (Intercept) Z ## -0.03143 0.03433 ## optimizer (nloptwrap) convergence code: 0 (OK) ; 0 optimizer warnings; 1 lme4 warnings ## ## $output ## [1] &quot;&quot; ## ## $warnings ## character(0) ## ## $messages ## [1] &quot;boundary (singular) fit: see help(&#39;isSingular&#39;)\\n&quot; You then might have, in your analyzing code: analyze_data &lt;- function( dat ) { M1 &lt;- quiet_lmer( Yobs ~ 1 + Z + (1|sid), data=dat ) message1 = ifelse( length( M1$message ) &gt; 0, 1, 0 ) warning1 = ifelse( length( M1$warning ) &gt; 0, 1, 0 ) # Compile our results tibble( ATE_hat = coef(M1)[&quot;Z&quot;], SE_hat = se.coef(M1)[&quot;Z&quot;], message = message1, warning = warning1 ) } Now you have your primary estimates, and also flags for whether there was a convergence issue. In the analysis section you can then evaluate what proportion of the time there was a warning or message, and then do subset analyses to those simulation trials where there was no such warning. 18.2 Protecting your functions with “stop” When writing functions, especially those that take a lot of parameters, it is often wise to include stopifnot() statements at the top to verify the function is getting what it expects. These are sometimes called “assert statements” and are a tool for making errors show up as early as possible. For example, look at this (fake) example of generating data with different means and variances make_groups &lt;- function( means, sds ) { Y = rnorm( length(means), mean=means, sd = sds ) round( Y ) } If we call it, but provide different lengths for our means and variances, nothing happens, because R simply recycles the standard deviation parameter: make_groups( c(100,200,300,400), c(1,100,10000) ) ## [1] 100 133 1675 402 If this function was used in our data generating code, we would see the warnings but might not know exactly what they were. We can instead protect our function by putting an assert statements in our function like this: make_groups &lt;- function( means, sds ) { stopifnot( length(means) == length(sds) ) Y = rnorm( length(means), mean=means, sd = sds ) round( Y ) } This ensures your code is getting called as you intended. What is nasty about this possible error is nothing is telling you something is wrong! You could build an entire simulation on this, not realizing that your fourth group has the variance of your first, and get results that make no sense to you. You could even publish something based on a finding that depends on this error, which would eventually be quite embarrasing. These statements can also serve as a sort of documentation as to what you expect. Consider, for example: make_xy &lt;- function( N, mu_x, mu_y, rho ) { stopifnot( -1 &lt;= rho &amp;&amp; rho &lt;= 1 ) X = mu_x + rnorm( N ) Y = mu_y + rho * X + sqrt(1-rho^2)*rnorm(N) tibble(X = X, Y=Y) } Here we see that rho should be between -1 and 1 quite clearly. A good reminder of what the parameter is for. This also protects you from inadvetently misremembering the order of your parameters when you call the function (although it is good practice to name your parameters as you pass). Consider: a &lt;- make_xy( 10, 2, 3, 0.75 ) b &lt;- make_xy( 10, 0.75, 2, 3 ) ## Error in make_xy(10, 0.75, 2, 3): -1 &lt;= rho &amp;&amp; rho &lt;= 1 is not TRUE c &lt;- make_xy( 10, rho = 0.75, mu_x = 2, mu_y = 3 ) "],["saving-files.html", "Chapter 19 Saving files and results 19.1 Saving simulations in general 19.2 Saving simulations as you go 19.3 Dynamically making directories 19.4 Loading and combining files of simulation results", " Chapter 19 Saving files and results Always save your simulation results to a file. Simulations are painful and time consuming to run, and you will invariably want to analyze the results of them in a variety of different ways, once you have looked at your preliminary analysis. We advocate saving your simulation as soon as it is complete. But there are some ways to do better than that, such as saving as you go. This can protect you if your simulation occasionally crashes, or if you want to rerun only parts of your simulation for some reason. 19.1 Saving simulations in general Once your simulation has completed, you can save it like so: dir.create(&quot;results&quot;, showWarnings = FALSE ) write_csv( res, &quot;results/simulation_CRT.csv&quot; ) write_csv() is a tidyverse file-writing command; see “R for Data Science” textbook, 11.5. You can then load it, just before analysis, as so: res = read_csv( &quot;results/simulation_CRT.csv&quot; ) There are two general tools for saving. The read/write_csv methods save your file in a way where you can open it with a spreadsheet program and look at it. But your results should be in a vanilla format (non-fancy data frame without list columns). Alternatively, you can use the saveRDS() and readRDS() methods; these save objects to a file such that when you load them, they are as you left them. (The simpler format of a csv file means your factors, if you have them, may not preseve as factors, and so forth.) 19.2 Saving simulations as you go If you are not sure you have time to run your entire simulation, or you think your computer might crash half way through, or something similar, you can save each chunk you run as you go, in its own file. You then stack those files at the end to get your final results. With clever design, you can even then selectively delete files to rerun only parts of your larger simulation—but be sure to rerun everything from scratch before you run off and publish your results, to avoid embarrassing errors. Here, for example, is a script from a research project examining how one might use post-stratification to improve the precision of an IV estimate. This is the script that runs the simulation. Note the sourcing of other scripts that have all the relevant functions; these are not important here. Due to modular programming, we can see what this script does, even without those detail. source( &quot;pack_simulation_functions.R&quot; ) if ( !file.exists(&quot;results/frags&quot; ) ) { dir.create(&quot;results/frags&quot;) } # Number of simulation replicates per scenario R = 1000 # Do simulation breaking up R into this many chunks M_CHUNK = 10 ###### Set up the multifactor simulation ####### # chunkNo is a hack to make a bunch of smaller chunks for doing parallel more # efficiently. factors = expand_grid( chunkNo = 1:M_CHUNK, N = c( 500, 1000, 2000 ), pi_c = c( 0.05, 0.075, 0.10 ), nt_shift = c( -1, 0, 1 ), pred_comp = c( &quot;yes&quot;, &quot;no&quot; ), pred_Y = c( &quot;yes&quot;, &quot;no&quot; ), het_tx = c( &quot;yes&quot;, &quot;no&quot; ), sd0 = 1 ) factors &lt;- factors %&gt;% mutate( reps = R / M_CHUNK, seed = 16200320 + 1:n() ) This generates a data frame of all our factor combinations. This is our list of “tasks” (each row of factors). These tasks have repeats: the “chunks” means we do a portion of each scenario, as specified by our simulation factors, as a process. This would allow for greater parallelization (e.g., if we had more cores), and also lets us save our work without finishing an entire scenario of, in this case, 1000 iterations. To set up our simulation we make a little helper method to do one row. With each row, once we have run it, we save it to disk. This means if we kill our simulation half-way through, most of the work would be saved. Our function is then going to either do the simulation (and save the result to disk immediately), or, if it can find the file with the results from a previous run, load those results from disk: safe_run_sim = safely( run_sim ) file_saving_sim = function( chunkNo, seed, ... ) { fname = paste0( &quot;results/frags/fragment_&quot;, chunkNo, &quot;_&quot;, seed, &quot;.rds&quot; ) res = NA if ( !file.exists(fname) ) { res = safe_run_sim( chunkNo=chunkNo, seed=seed, ... ) saveRDS(res, file = fname ) } else { res = readRDS( file=fname ) } return( res ) } Note how we wrap our core run_sim method in safely; it was crashing very occasionally, and so to make the code more robust, we wrapped it so we could see any error messages. We next run the simulation. We shuffle the rows of our task list so that which process gets what task is randomized. If some tasks are much longer (e.g., due to larger sample size) then this will get balanced out across our processes. We have an if-then structure to easily switch between parallel and nonparallel code. This makes debugging easier: when running in parallel, stuff printed to the console does not show until the simulation is over. Plus it would be all mixed up since multiple processes are working simultaneously. This overall structure allows the researcher to delete one of the “fragment” files from the disk, run the simulation code, and have it just do one tiny piece of the simulation. This means the researcher can insert a browser() command somewhere inside the code, and debug the code, in the natural context of how the simulation is being run. # Shuffle the rows so we run in random order to load balance. factors = sample_n(factors, nrow(factors) ) if ( TRUE ) { # Run in parallel parallel::detectCores() library(future) library(furrr) #plan(multiprocess) # choose an appropriate plan from future package #plan(multicore) plan(multisession, workers = parallel::detectCores() - 2 ) factors$res &lt;- future_pmap(factors, .f = file_saving_sim, .options = furrr_options(seed = NULL), .progress = TRUE ) } else { # Run not in parallel, used for debugging factors$res &lt;- pmap(factors, .f = file_saving_sim ) } tictoc::toc() Our method cleverly loads files in, or generates them, for each chunk. The seed setting ensures reproducibility. Once we are done, we need to clean up our results: sim_results &lt;- factors %&gt;% unnest(cols = res) # Cut apart the results and error messages sim_results$sr = rep( c(&quot;res&quot;,&quot;err&quot;), nrow(sim_results)/2) sim_results = pivot_wider( sim_results, names_from = sr, values_from = res ) saveRDS( sim_results, file=&quot;results/simulation_results.rds&quot; ) 19.3 Dynamically making directories If you are generating a lot of files, then you should put them somewhere. But where? It is nice to dynamically generate a directory for your files on fly. One way to do this is to write a function that will make any needed directory, if it doesn’t exist, and then put your file in that spot. For example, you might have your own version of write_csv as: my_write_csv &lt;- function( data, path, file ) { if ( !dir.exists( here::here( path ) ) ) { dir.create( here::here( path ), recursive=TRUE ) } write_csv( data, paste0( path, file ) ) } This will look for a path (starting from your R Project, by taking advantage of the here package), and put your data file in that spot. If the spot doesn’t exist, it will make it for you. 19.4 Loading and combining files of simulation results Once your simulation files are all generated, the following code will stack them all into a giant set of results, assuming all the files are themselves data frames stored in RDS objects. This function will try and stack all files found in a given directory; for it to work, you should ensure there are no other files stored there. load.all.sims = function( filehead=&quot;results/&quot; ) { files = list.files( filehead, full.names=TRUE) res = map_df( files, function( fname ) { cat( &quot;Reading results from &quot;, fname, &quot;\\n&quot; ) rs = readRDS( file = fname ) rs$filename = fname rs }) res } You would use as so: results = load.all.sims( filehead=&quot;raw_results/&quot; ) "],["parallel-processing.html", "Chapter 20 Parallel Processing 20.1 Parallel on your computer 20.2 Parallel off your computer", " Chapter 20 Parallel Processing Especially if you take our advice of “when in doubt, go more general” and if you calculate monte carlo standard errors, you will quickly come up against the limits of your computer. Simultions can be incredibly computationally intensive, and there are a few means for dealing with that. The first, touched on at times throughout the book, is to optimize ones code by looking for ways to remove extraneous calculation (e.g., by writing ones own methods rather than using the safety-checking and thus sometimes slower methods in R, or by saving calculations that are shared across different estimation approaches). The second is to use more computing power. This latter approach is the topic of this chapter. There are two general ways to do parallel calculation. The first is to take advantage of the fact that most modern computers have multiple cores (i.e., computers) built in. With this approach, we tell R to use more of the processing power of your desktop or laptop. If your computer has eight cores, you can easily get a near eight-fold increase in the speed of your simulation. The second is to use cloud computing, or compute on a cluster. A computing cluster is a network of hundreds or thousands of computers, coupled with commands where you break apart a simulation into pieces and send the pieces to your army of computers. Conceptually, this is the same as when you do baby parallel on your desktop: more cores equals more simulations per minute and thus faster simulation overall. But the interface to a cluster can be a bit tricky, and very cluster-dependent. But once you get it up and running, it can be a very powerful tool. First, it takes the computing off your computer entirely, making it easier to set up a job to run for days or weeks without making your day to day life any more difficult. Second, it gives you hundreds of cores, potentially, which means a speed-up of hundreds rather than four or eight. Simulations are a very natural choice for parallel computation. With a multifactor experiment it is very easy to break apart the overall into pieces. For example, you might send each factor combination to a single machine. Even without multi factor experiments, due to the cycle of “generate data, then analyze,” it is easy to have a bunch of computers doing the same thing, with a final collection step where all the individual iterations are combined into one at the end. 20.1 Parallel on your computer Most modern computers have multiple cores, so you can run a parallel simulation right in the privacy of your own home! To assess how many cores you have on your computer, you can use the detectCores() method in the parallel package: parallel::detectCores() ## [1] 12 Normally, unless you tell it to do otherwise, R only uses one core. This is obviously a bit lazy on R’s part. But it is easy to take advantage of multiple cores using the future and furrr packages. library(future) library(furrr) In particular, the furrr package replicates our map functions, but in parallel. We first tell our R session what kind of parallel processing we want using the future package. In general, using plan(multisession) is the cleanest: it will start one entire R session per core, and have each session do work for you. The alternative, multicore does not seem to work well with Windows machines, nor with RStudio in general. The call is simple: plan(multisession, workers = parallel::detectCores() - 1 ) The workers parameter specifies how many of your cores you want to use. Using all but one will let your computer still operate mostly normally for checking email and so forth. You are carving out a bit of space for your own adventures. Once you set up your plan, you use future_pmap(); it works just like pmap() but evaluates across all available workers specified in the plan call. Here we are running a parallel version of the multifactor experiment discussed in Chapter @ref(exp_design) (see chapter @ref(case_Cronback) for the simulation itself). tictoc::tic() params$res = future_pmap(params, .f = run_alpha_sim, .options = furrr_options(seed = NULL)) tictoc::tic() Note the .options = furrr_options(seed = NULL) part of the argument. This is to silence some warnings. Given how tasks are handed out, R will get upset if you don’t do some handholding regarding how it should set seeds for pseudoranom number generation. In particular, if you don’t set the seed, the multiple sessions could end up having the same starting seed and thus run the exact same simulations (in principle). We have seen before how to set specific seed for each simulation scenario, but furrr doesn’t know we have done this. This is why the extra argument about seeds: it is being explicit that we are handling seed setting on our own. We can compare the running time to running in serial (i.e. using only one worker): tictoc::tic() params$res2 = dplyr::select(params, n:seed) %&gt;% pmap(.f = run_alpha_sim) tictoc::tic() (The select command is to drop the res column from the parallel run; it would otherwise be passed as as parameter to run_alpha_sim which would in turn cause an error due to the unrecognized parameter.) 20.2 Parallel off your computer In general, a “cluster” is a system of computers that are connected up to form a large distributed network that many different people can use to do large computational tasks (e.g., simulations!). These clusters will have some overlaying coordinating programs that you, the user, will interact with to set up a “job,” or set of jobs, which is a set of tasks you want some number of the computers on the cluster to do for you in tandum. These coordinating programs will differ, depending on what cluster you are using, but have some similarities that bear mention. For running simulations, you only need the smallest amount of knowledge about how to engage with these systems because you don’t need all the individual computers working on your project communicating with each other (which is the hard part of distributed computing, in general). 20.2.1 What is a command-line interface? In the good ol’ days, when things were simpler, yet more difficult, you would interact with your computer via a “command-line interface.” The easiest way to think about this is as an R console, but in a different language that the entire computer speaks. A command line interface is designed to do things like find files with a specific name, or copy entire directories, or, importantly, start different programs. Another place you may have used a command line inteface is when working with Git: anything fancy with Git is often done via command-line. People will talk about a “shell” (a generic term for this computer interface) or “bash” or “csh.” You can get access to a shell from within RStudio by clicking on the “Terminal” tab. Try it, if you’ve never done anything like this before, and type ls It should list some file names. Note this command does not have the parenthesis after the command, like in R or most other programming languages. The syntax of a shell is usually mystifying and brutal: it is best to just steal scripts from the internet and try not to think about it too much, unless you want to think about it a lot. Importantly for us, from the command line interface you can start an R program, telling it to start up and run a script for you. This way of running R is noninteractive: you say “go do this thing,” and R starts up, goes and does it, and then quits. Any output R generates on the way will be saved in a file, and any files you save along the way will also be at your disposal once R has completed. To see this in action make the following script in a file called “dumb_job.R”: library( tidyverse ) cat( &quot;Making numbers\\n&quot; ) Sys.sleep(30) cat( &quot;Now I&#39;m ready\\n&quot; ) dat = tibble( A = rnorm( 1000 ), B = runif( 1000 ) * A ) write_csv( dat, file=&quot;sim_results.csv&quot; ) Sys.sleep(30) cat( &quot;Finished\\n&quot; ) Then open the terminal and type (the “&gt;” is not part of what you type): &gt; ls Do you see your dumb_job.R file? If not, your terminal session is in the wrong directory. In your computer system, files are stored in a directory structure, and when you open a terminal, you are somewhere in that structure. To find out where, you can type &gt; pwd for “Print Working Directory”. Save your dumb job file to wherever the above says. You can also change directories using cd, e.g., cd ~/Desktop/temp means “change directory to the temp folder inside Desktop inside my home directory” (the ~ is shorthand for home directory). One more useful commands is cd .. (go up to the parent directory). Once you are in the directory with your file, type: &gt; R CMD BATCH dumb_job.R R_output.txt --no-save The above command says “Run R” (the first part) in batch mode (the “CMD BATCH” part), meaning source the dumb_job.R script as soon as R starts, saving all console output in the file R_output.txt (it will be saved in the current directory where you run the program), and where you don’t save the workspace when finished. This command should take about a minute to complete, because our script sleeps a lot (the sleep represents your script doing a lot of work, like a real simulation would do). Once the command completes (you will see your “&gt;” prompt come back), verify that you have the R_output.txt and the data file sim_results.csv by typing ls. If you open up your Finder or Microsoft equivilent, you can actually see the R_output.txt file appear half-way through, while your job is running. If you open it, you will see the usual header of R telling you what it loading, the “Making numbers” comment, and so forth. R is saving everything as it works through your script. Running R in this fashion is the key element to a basic way of setting up a massive job on the cluster: you will have a bunch of R programs all “going and doing something” on different computers in the cluster. They will all save their results to files (they will have files of different names, or you will not be happy with the end result) and then you will gather these files together to get your final set of results. Small Exercise: Try putting an error in your dumb_job.R script. What happens when you run it in batch mode? 20.2.2 Running a job on a cluster In the above, you can run a command on the command-line, and the command line interfact will pause while it runs. As you saw, when you hit return with the above R command, the program just sat there for a minute before you got your command-line prompt back, due to the sleep. When you properlly run a big job (program) on a cluster, it doesn’t quite work that way. You will instead set a program to run, but tell the cluster to run it somewhere else (people might say “run in the background”). This is good because you get your command-line prompt back, and can do other things, while the program runs in the background. There are various methods for doing this, but they usually boil down to a request from you to some sort of managerial process that takes requests and assigns some computer, somewhere, to do them. (Imagine a dispatcher at a taxi company. You call up, ask for a ride, and it sends you a taxi to do it. The dispatcher is just fielding requests, assinging them to taxis.) For example, one dispatcher is the slurm (which may or may not be on the cluster you are attempting to use; this is where a lot of this information gets very cluster-specific). You first set up a script that describes the job to be run. It is like a work request. This would be a plain text file, such as this example (sbatch_runScript.txt): #!/bin/bash #SBATCH -n 32 # Number of cores requested #SBATCH -N 1 # Ensure that all cores are on one machine #SBATCH -t 480 # Runtime in minutes #SBATCH -p stats # Partition to submit to #SBATCH --mem-per-cpu=1000 # Memory per cpu in MB #SBATCH --open-mode=append # Append to output file, don&#39;t truncate #SBATCH -o /output/directory/out/%j.out # Standard out goes to this file #SBATCH -e /output/directory/out/%j.err # Standard err goes to this file #SBATCH --mail-type=ALL # Type of email notification- BEGIN,END,FAIL,ALL #SBATCH --mail-user=email@gmail.com # Email address # You might have some special loading of modules in the computing environment source new-modules.sh module load gcc/7.1.0-fasrc01 module load R export R_LIBS_USER=$HOME/apps/R:$R_LIBS_USER #R file to run, and txt files to produce for output and errors R CMD BATCH estimator_performance_simulation.R logs/R_output_${INDEX_VAR}.txt --no-save --no-restore This file starts with a bunch of variables that describe how sbatch should handle the request. It then has a series of commands that get the computer environment ready. Finally, it has the R CMD BATCH command that does the work you want. These scripts can be quite confusing to understand. There are so many options! What do these things even do? The answer is, for researchers early on their journey to do this kind of work, “Who knows?” The general rule is to find an example file for the system you are working on that works, and then modify it for your own purposes. Once you have such a file, you could run it on the command line, like this: sbatch -o stdout.txt \\ --job-name=my_script \\ sbatch_runScript.txt You do this, and it will not sit there and wait for the job to be done. The sbatch command will instead send the job off to some computer which will do the work in parallel. Interestingly, your R script could, at this point, do the “one computer” parallel type code listed above. Note the script above has 32 cores; your single job could then have 32 cores all working away on their individual pieces of the simulation, as before (e.g., with future_pmap). You would have a 32-fold speedup, in this case. This is the core element to having your simulation run on a cluster. The next step is to do this a lot, sending off a bunch of these jobs to different computers. Some final tips Remember to save a workspace or RDS!! Once you tell Odyssey to run an R file, it, well, runs the R file. But, you probably want information after it’s done - like an R object or even an R workspace. For any R file you want to run on Odyssey, remember at the end of the R file to put a command to save something after everything else is done. If you want to save a bunch of R objects, an R workspace might be a good way to go, but those files can be huge. A lot of times I find myself wanting only one or two R objects, and RDS files are a lot smaller. Moving files from a cluster to your computer. You will need to first upload your files and code to the cluster, and then, once you’ve saved your workspace/RDS, you need those back on your computer. Using a scp client such as FileZilla is an easy way to do this file-transfer stuff. You can also use a Git repo for the code, but checking in the simulation results is not generally advisable: they are big, and not really in the spirit of a verson control system. Download your simulation results outside of Git, and keep your code in Git, is a good rule of thumb. 20.2.3 Checking on a job Once your job is working on the cluster, it will keep at it until it finishes (or crashes, or is terminated for taking up too much memory or time). As it chugs away, there will be different ways to check on it. For example, you can, from the console, list the jobs you have running to see what is happening: sacct -u lmiratrix except, of course, “lmiratrix” would be changed to whatever your username is. This will list if your file is running, pending, timed out, etc. If it’s pending, that usually means that someone else is hogging up space on the cluster and your job request is in a queue waiting to be assigned. The sacct command is customizable, e.g., sacct -u lmiratrix --format=JobID,JobName%30,State will not truncate your job names, so you can find them more easily. You can check on a specific job, if you know the ID: squeue -j JOBID Something that’s fun is you can check who’s running files on the stats server by typing: showq-slurm -p stats -o You can also look at the log files tail my_log_file.log to see if it is logging information as it is working. The email arguments, above, cause the system to email you before and after the job is complete. The email notifications you can choose are BEGIN, END, FAIL, and ALL; ALL is generally good. What is a few more emails? 20.2.4 Running lots of jobs on a cluster We have seen how to fire off a job (possibly a big job) that can run over days or weeks to give you your results. There is one more piece that can allow you to use even more computing resources to do things even faster, which is to do a whole bunch of job requests like the above, all at once. This multiple dispatching of sbatch commands is the final component for large simulations on a cluster: you are setting in motion a bunch of processes, each set to a specific task. Asking for multiple, smaller, jobs is also nicer for the cluster than having one giant job that goes on for a long time. By dividing a job into smaller pieces, and asking the scheduler to schedule those pieces, you can let the scheduler share and allocate resources between you and others more fairly. It can make a list of your jobs, and farm them out as it has space. This might go faster for you; with a really big job, the scheduler can’t even allocate it until the needed number of workers is available. With smaller jobs, you can take a lot of little spaces to get your work done. Especially since simulation is so independent (just doing the same thing over and over) there is rarely any need for one giant process that has to do everything. To make multiple, related, requests, we create a for-loop in the Terminal to make a whole series sbatch requests. Then, each sbatch request will do one part of the overall simulation. We can write this program in the shell, just like you can write R scripts in R. A shell scripts does a bunch of shell commands for you, and can even have variables and loops and all of that fun stuff. For example, the following run_full_simulation.sh is a script that fires off a bunch of jobs for a simulation. Note that it makes a variable INDEX_VAR, and sets up a loop so it can run 500 tasks indexed 1 through 500. The first export line adds a collection of R libraries to the path stored in R_LIBS_USER (a “path” is a list of places where R will look for libraries). The next line sets up a for loop: it will run the indented code once for each number from 1 to 500. The script also specifies where to put log files and names each job with the index so you can know who is generating what file. export R_LIBS_USER=$HOME/apps/R:$R_LIBS_USER for INDEX_VAR in $(seq 1 500); do #print out indexes echo &quot;${INDEX_VAR}&quot; #give indexes to R so it can find them. export INDEX_VAR #Run R script, and produce output files sbatch -o logs/sbout_p${INDEX_VAR}.stdout.txt \\ --job-name=runScr_p${INDEX_VAR} \\ sbatch_runScript.txt sleep 1 # pause to be kind to the scheduler done One question is then how do the different processes know what part of the simulation they should be working on? E.g., each worker needs to have its own seed so it don’t do exactly the same simulation as a different worker! The workers also need their own filenames so they save things in their own files. The key is the export INDEX_VAR line: this puts a variable in the environment that will be set to a specific number. Inside your R script, you can get that index like so: index &lt;- as.numeric(as.character(Sys.getenv(&quot;INDEX_VAR&quot;))) You can then use the index to make unique filenames when you save your results, so each process has its own filename: filename = paste0( &quot;raw_results/simulation_results_&quot;, index, _&quot;.rds&quot; ) You can also modify your seed such as with: factors = mutate( factors, seed = set.seed( 1000 * seed + index ) ) Now even if you have a series of seeds within the simulation script (as we have seen before), each script will have unique seeds not shared by any other script (assuming you have fewer than 1000 separate job requests). This still doesn’t exactly answer how to have each worker know what to work on. Conider the case of our multifactor experiment, where we have a large combination of simulation trials we want to run. There are two approaches one might use here. One simple approach is the following: we first generate all the factors with expand_grid() as usual, and then we take the row of this grid that corresponds to our index. sim_factors = expand_grid( ... ) index &lt;- as.numeric(as.character(Sys.getenv(&quot;INDEX_VAR&quot;))) filename = paste0( &quot;raw_results/simulation_results_&quot;, index, _&quot;.rds&quot; ) stopifnot( index &gt;= 1 &amp;&amp; index &lt;= nrow(sim_factors ) ) do.call( my_sim_function, sim_factors[ index, ] ) The do.call() command runs the simulation function, passing all the arguments listed in the targeted row. You then need to make sure you have your shell call the right number of workers to run your entire simulation. One problem with this approach is some simulations might be a lot more work than others: consider your simulation with a huge sample size vs. one with a small sample size. Instead, you can have each worker run a small number of simulations of each scenario, and then stack your results later. E.g., sim_factors = expand_grid( ... ) index &lt;- as.numeric(as.character(Sys.getenv(&quot;INDEX_VAR&quot;))) sim_factors$seed = 1000000 * index + 17 * 1:nrow(sim_factors) and then do your usual pmap call with R = 10 (or some other small number of replicates.) For saving files and then loading and combining them for analysis, see Section 19. 20.2.5 Resources for Harvard’s Odyssey The above guidiance is tailored for Harvard’ computing environment, primarily. For that environment in particular, there are many additional resources such as: Odyssey Guide: https://rc.fas.harvard.edu/resources/odyssey-quickstart-guide/ R on Odyssey: https://rc.fas.harvard.edu/resources/documentation/software/r/ For installing R packages so they are seen by the scripts run by sbatch, see (https://www.rc.fas.harvard.edu/resources/documentation/software-on-odyssey/r/) Other clusters should have similar documents giving needed guidance for their specific contexts. 20.2.6 Acknowledgements Some of the above material is based on tutorials built by Kristen Hunter and Zach Branson, past doctoral students of Harvard’s statistics department. "],["using-simulation-as-a-power-calculator.html", "Chapter 21 Using simulation as a power calculator 21.1 Getting design parameters from pilot data 21.2 The data generating process 21.3 Running the simulation 21.4 Evaluating power", " Chapter 21 Using simulation as a power calculator We can use simulation as a power calculator. In particular, to estimate power, we generate data according to our best guess as to what we might find in a planned evaluation, and then analyze these synthetic data and see if we detect the effect we built into our DGP. We then do this repeatedly, and see how often we detect our effect. This is power. Now, if we are generally right about our guesses about our DGP and the associated parameters we plugged into it, in terms of some planned study, then our power will be right on. This is all a power analysis is, using simulation or otherwise. Simulation has benefits over using power calculators because we can take into account odd aspects of our modeling, and also do non-standard approaches to evaluation that we might not find in a normal power calculator. We illustrate this idea with a case study. In this example, we are planning a school-level intervention to reduce rates of discipline via a socio-emotional targeting intervention on both teachers and students, where we have strongly predictive historic data and a time-series component. This is a planned RCT, where we will treat entire schools (so a cluster-randomized study). We are struggling because treating each school is very expensive (we have to run a large training and coaching of the staff), so each unit is a major decision. We want something like 4, 5, or maybe 6 treated schools. Our diving question is: Can we get away with this? 21.1 Getting design parameters from pilot data We had pilot data from school administrative records (in particular discipline rates for each school and year for a series of five years), and we use those to estimate parameters to plug into our simulation. We assume our experimental sample will be on schools that have chronic issues with discipline, so we filtered our historic data to get schools we imagined to likely be in our study. We ended up with the following data, with log-transformed discipline rates for each year (we did this to put things on a multiplicative scale, and to make our data more normal given heavy skew in the original). Each row is a potential school in the district. datW = read_csv( &quot;data/discipline_data.csv&quot; ) ## Rows: 27 Columns: 6 ## ── Column specification ────────────────────────── ## Delimiter: &quot;,&quot; ## chr (1): Code ## dbl (5): 2015, 2016, 2017, 2018, 2019 ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. datW ## # A tibble: 27 × 6 ## Code `2015` `2016` `2017` `2018` `2019` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 S1 -2.87 -2.81 -2.93 -3.52 -4.90 ## 2 S2 -3.60 -2.83 -2.56 -2.76 -3.32 ## 3 S3 -3.00 -2.88 -2.81 -3.39 -4.91 ## 4 S4 -3.90 -3.20 -2.53 -3.67 -4.34 ## 5 S5 -2.46 -2.00 -3.34 -3.66 -4.71 ## 6 S6 -2.86 -2.74 -2.51 -3.21 -3.80 ## 7 S7 -2.47 -2.59 -2.69 -2.15 -2.43 ## 8 S8 -2.13 -1.93 -1.82 -2.21 -2.95 ## 9 S9 -3.36 -3.16 -3.06 -3.26 -3.10 ## 10 S10 -2.89 -2.54 -2.26 -2.89 -3.25 ## # ℹ 17 more rows We use these to calculate a mean and covariance structure for generating data: lpd_mns = apply( datW[,-1], 2, mean ) lpd_mns ## 2015 2016 2017 2018 2019 ## -3.076298 -2.868337 -2.931562 -3.337221 -4.011440 lpd_cov = cov( datW[,-1] ) lpd_cov ## 2015 2016 2017 2018 ## 2015 0.4191843 0.2996073 0.2282627 0.3691894 ## 2016 0.2996073 0.3656335 0.2014201 0.2511376 ## 2017 0.2282627 0.2014201 0.3084799 0.2927782 ## 2018 0.3691894 0.2511376 0.2927782 0.5767486 ## 2019 0.1921622 0.1623542 0.2541191 0.2927812 ## 2019 ## 2015 0.1921622 ## 2016 0.1623542 ## 2017 0.2541191 ## 2018 0.2927812 ## 2019 0.5425783 21.2 The data generating process We then write a data generator that, given a desired number of control and treatment schools, and a treatment effect, makes a dataset by sampling vectors of discipline rates, and then imposes a “treatment effect” of scaling the discipline rate by the treatment coefficient for the last two years. make_dat_param = function( n_c, n_t, tx=1 ) { n = n_c + n_t lpdisc = MASS::mvrnorm( n, mu = lpd_mns, Sigma = lpd_cov ) lpdisc = exp( lpdisc ) colnames( lpdisc ) = paste0( &quot;pdisc_&quot;, colnames( lpdisc ) ) lpdisc = as.data.frame( lpdisc ) %&gt;% mutate( ID = 1:n(), Z = 0 + ( sample( n ) &lt;= n_t ) ) # Add in treatment effect lpdisc = mutate( lpdisc, pdisc_2018 = pdisc_2018 * ifelse( Z == 1, tx, 1 ), pdisc_2019 = pdisc_2019 * ifelse( Z == 1, tx, 1 ) ) lpdisc %&gt;% relocate( ID, Z ) } Our function generates schools with discipline given by the provided mean and covariance structure; we have calibrated our data generating process to give us data that looks very similar to the data we would see in the field. For our impact model, the treatment kicks in for the final two years, multiplying discipline rate by tx (so tx = 1 means no treatment effect). Testing our function gives this: set.seed( 59585 ) a = make_dat_param( 100, 100, 0.5 ) head( a, n = 4 ) ## ID Z pdisc_2015 pdisc_2016 pdisc_2017 ## 1 1 1 0.03118036 0.05594299 0.03283595 ## 2 2 1 0.04209213 0.01716175 0.02388633 ## 3 3 1 0.18736890 0.26266248 0.14379326 ## 4 4 0 0.04389430 0.04571297 0.03378810 ## pdisc_2018 pdisc_2019 ## 1 0.01051475 0.005732411 ## 2 0.01155785 0.009120705 ## 3 0.04832345 0.027621311 ## 4 0.01101846 0.007154335 We can group each treatment arm and look at discipline over the years: aL = a %&gt;% pivot_longer( pdisc_2015:pdisc_2019, names_to = c( &quot;.value&quot;, &quot;year&quot; ), names_pattern = &quot;(.*)_(.*)&quot; ) %&gt;% mutate( year = as.numeric( year ) ) aLg = aL %&gt;% group_by( year, Z ) %&gt;% summarise( pdisc = mean( pdisc ) ) ggplot( aLg, aes( year, pdisc, col=as.factor(Z) ) ) + geom_line() + labs( color = &quot;Tx?&quot; ) Our treatment group drops faster than the control. We see the nonlinear structure actually observed in our original data in terms of discipline over time has been replicated. We next write some functions to analyze our data. This should feel very familiar: we are just doing our simulation framework, as usual. eval_dat = function( sdat ) { # No covariate adjustment, average change model (on log outcome) M_raw = lm( log( pdisc_2018 ) ~ 1 + Z, data=sdat ) # Simple average change model using 2018 as outcome. M_simple = lm( pdisc_2018 ~ 1 + Z + pdisc_2017 + pdisc_2016 + pdisc_2015, data=sdat ) # Simple model on logged outcome M_log = lm( log( pdisc_2018 ) ~ 1 + Z + log( pdisc_2017) + log( pdisc_2016) + log( pdisc_2015 ), data=sdat ) # Ratio of average disc to average prior disc as outcome sdat = mutate( sdat, avg_disc = (pdisc_2018 + pdisc_2019)/2, prior_disc = (pdisc_2017 + pdisc_2016 + pdisc_2015 )/3, disc = pdisc_2018 / prior_disc, disc_two = avg_disc / prior_disc ) M_ratio = lm( disc ~ 1 + Z, data = sdat ) M_ratio_twopost = lm( disc_two ~ 1 + Z, data = sdat ) # Use average of two post-tx time periods, averaged to reduce noise M_twopost = lm( log( avg_disc ) ~ 1 + Z + log( pdisc_2017 ) + log( pdisc_2016 ) + log( pdisc_2015 ), data=sdat ) # Time and unit fixed effects sdatL = pivot_longer( sdat, cols = pdisc_2015:pdisc_2019, names_to = &quot;year&quot;, values_to = &quot;pdisc&quot; ) %&gt;% mutate( Z = Z * (year %in% c( &quot;pdisc_2018&quot;, &quot;pdisc_2019&quot; ) ), ID = paste0( &quot;S&quot;, ID ) ) M_2wfe = lm( log( pdisc ) ~ 0 + ID + year + Z, data=sdatL ) # Bundle all our models by getting the estimated treatment impact # from each. models &lt;- list( raw=M_raw, simple=M_simple, log=M_log, ratio = M_ratio, ratio_twopost = M_ratio_twopost, log_twopost = M_twopost, FE = M_2wfe ) rs &lt;- map_df( models, broom::tidy, .id=&quot;model&quot; ) %&gt;% filter( term==&quot;Z&quot; ) %&gt;% dplyr::select( -term ) %&gt;% arrange( model ) rs } Our method marches through a host of models; we weren’t sure what the gains would be from one model to another, so we decided to conduct power analyses on all of them. Again, we look at what our evaluation function does: dat = make_dat_param( n_c = 4, n_t = 4, tx = 0.5 ) eval_dat( dat ) ## # A tibble: 7 × 5 ## model estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 FE -0.644 0.325 -1.98 0.0576 ## 2 log -0.841 0.478 -1.76 0.176 ## 3 log_twopost -1.22 0.437 -2.80 0.0680 ## 4 ratio -0.126 0.136 -0.923 0.392 ## 5 ratio_twop… -0.269 0.139 -1.93 0.102 ## 6 raw -0.650 0.300 -2.17 0.0733 ## 7 simple -0.00983 0.0133 -0.742 0.512 We have a nice set of estimates, one for each model. 21.3 Running the simulation Now we put it all together in our classic simulator: sim_run = function( n_c, n_t, tx, R, seed = NULL ) { if ( !is.null( seed ) ) { set.seed(seed) } cat( &quot;Running n_c, n_t =&quot;, n_c, n_t, &quot;tx =&quot;, tx, &quot;\\n&quot; ) rps = rerun( R, { sdat = make_dat_param(n_c = n_c, n_t = n_t, tx = tx) eval_dat( sdat ) }) bind_rows( rps ) } We then do the usual to run across a set of scenarios, running sim_run on each row of the following: res = expand_grid( tx = c( 1, 0.75, 0.5 ), n_c = c( 4, 5, 6, 8, 12, 20 ), n_t = c( 4, 5, 6 ) ) res$R = 1000 res$seed = 1010203 + 1:nrow(res) For evaluation, we load our saved results and calculate rejection rates (we use an alpha of 0.10 since we are doing one-sided testing): res = readRDS( file=&quot;data/discipline_simulation.rds&quot; ) sres &lt;- res %&gt;% group_by( n_c, n_t, tx, model ) %&gt;% summarise( E_est = mean( estimate ), SE = sd( estimate ), E_SE_hat = mean( std.error ), pow = mean( p.value &lt;= 0.10 ) ) # one-sided testing sres ## # A tibble: 378 × 8 ## # Groups: n_c, n_t, tx [54] ## n_c n_t tx model E_est SE E_SE_hat ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 4 4 0.5 FE -0.693 0.313 0.277 ## 2 4 4 0.5 log -0.694 0.476 0.430 ## 3 4 4 0.5 log_… -0.692 0.431 0.383 ## 4 4 4 0.5 ratio -0.374 0.219 0.203 ## 5 4 4 0.5 rati… -0.291 0.151 0.139 ## 6 4 4 0.5 raw -0.719 0.535 0.515 ## 7 4 4 0.5 simp… -0.0195 0.0194 0.0157 ## 8 4 4 0.75 FE -0.292 0.310 0.274 ## 9 4 4 0.75 log -0.295 0.488 0.435 ## 10 4 4 0.75 log_… -0.305 0.424 0.373 ## # ℹ 368 more rows ## # ℹ 1 more variable: pow &lt;dbl&gt; 21.4 Evaluating power Once our simulation is run, we can explore power as a function of the design characteristics. In particular, we eventually want to calculate the chance of noticing effects of different sizes, given various sample sizes we might employ. Our driving question is how few schools on the treated side can we get away with? Also, we want to know how much having more schools on the control side allows us to get away with fewer schools on the treated side. 21.4.1 Checking validity of our models Before we look at power, we need to check on whether our different models are valid. This is especiallt important as we are in a small \\(n\\) context, so we know asymptotics may not hold as they should. To check our models for validity we subset our trials to where tx = 1, and look at the rejection rates. We first run a regression to see if rejection is a function of sample size (are smaller samples more invalid) and treatment-control imbalance. We center both variables so our intercepts are overall average rejection rates for each model considered: sres = mutate( sres, n = n_c + n_t, imbalance = pmax( n_t / n_c, n_c / n_t ) - 1 ) sres$n = (sres$n - mean(sres$n)) / sd(sres$n) mod = lm( pow ~ 0 + (n + imbalance) * model - n - imbalance, data = filter( sres, tx == 1 ) ) broom::tidy(mod) %&gt;% knitr::kable( digits = 3) term estimate std.error statistic p.value modelFE 0.143 0.006 24.593 0.000 modellog 0.099 0.006 16.999 0.000 modellog_twopost 0.093 0.006 15.939 0.000 modelratio 0.090 0.006 15.437 0.000 modelratio_twopost 0.093 0.006 15.967 0.000 modelraw 0.092 0.006 15.751 0.000 modelsimple 0.091 0.006 15.571 0.000 n:modelFE -0.003 0.006 -0.459 0.647 n:modellog 0.001 0.006 0.141 0.888 n:modellog_twopost -0.005 0.006 -0.919 0.360 n:modelratio 0.000 0.006 0.071 0.944 n:modelratio_twopost 0.002 0.006 0.414 0.680 n:modelraw -0.006 0.006 -1.008 0.316 n:modelsimple 0.001 0.006 0.191 0.849 imbalance:modelFE 0.005 0.005 0.857 0.394 imbalance:modellog -0.003 0.005 -0.587 0.558 imbalance:modellog_twopost 0.004 0.005 0.708 0.480 imbalance:modelratio 0.000 0.005 -0.001 0.999 imbalance:modelratio_twopost 0.001 0.005 0.249 0.804 imbalance:modelraw 0.006 0.005 1.154 0.251 imbalance:modelsimple 0.001 0.005 0.180 0.858 We can also plot the nominal rejection rates under the null: sres %&gt;% filter( tx == 1 ) %&gt;% ggplot( aes( n_c, pow, col=model ) ) + facet_wrap( ~ n_t, nrow=1 ) + geom_line() + geom_hline( yintercept = 0.10 ) + scale_x_log10(breaks=unique(sres$n_c) ) We see the fixed effect models have elevated rates of rejection. Interestingly, these rates do not seem particularly dependent on sample size or treatment-control imbalance (note lack of significant coefficeints on our regression model). The other models all appear valid. We can also check for bias of our methods: sres %&gt;% group_by( model, tx ) %&gt;% summarise( E_est = mean( E_est ) ) %&gt;% pivot_wider( names_from=&quot;tx&quot;, values_from=&quot;E_est&quot; ) ## # A tibble: 7 × 4 ## # Groups: model [7] ## model `0.5` `0.75` `1` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 FE -0.692 -0.290 -0.000703 ## 2 log -0.692 -0.288 0.00120 ## 3 log_twopost -0.692 -0.291 0.00241 ## 4 ratio -0.372 -0.187 -0.000937 ## 5 ratio_twopost -0.289 -0.145 -0.00108 ## 6 raw -0.694 -0.290 0.00327 ## 7 simple -0.0206 -0.0104 0.0000998 We see our models are estimating different things, none of which are the treatment effect as we parameterized it. In particular, “FE,” “log,” “raw,” and “log_twopost” are all estimating the impact on the log scale. Note that \\(log( 0.5 ) \\approx -0.69\\) and \\(log( 0.75 ) \\approx -0.29\\). Our “simple” estimator is estimating the impact on the absolute scale; reducing discipline rates by 50% corresponds to about a 2% reduction in actual cases. Finally, “ratio” and “ratio_twopost” are estimating the change in the average ratio of post-policy discipline to pre; they are akin to a gain score as compared to the log regressions. 21.4.2 Assessing Precision (SE) Now, which methods are the most precise? We look at the true standard errors across our methods (we drop “simple” and the “ratio” estimators since they are not on the ratio scale): sres %&gt;% group_by( model, n_c, n_t ) %&gt;% summarise( SE = mean(SE ) ) %&gt;% filter( !(model %in% c( &quot;simple&quot;, &quot;ratio&quot;, &quot;ratio_twopost&quot; ) ) ) %&gt;% ggplot( aes( n_c, SE, col=model )) + facet_grid( . ~ n_t ) + geom_line() + geom_point() + geom_hline( yintercept = 0 ) + labs( colour = &quot;Model&quot; ) It looks like averaging two years for the outcome is helpful, and bumps up precision. The two way fixed effects model seems to react to the number of control units differently than the other estimators; it is way more precise when the number of controls is few, but the other estimators catch up. The “raw” estimator gives a baseline of no covariate adjustment; everything is substantially more precise than it. The covariates matter a lot. 21.4.3 Assessing power We next look at power over our explored contexts, for the models that we find to be valid (i.e., not FE). sres %&gt;% filter( model != &quot;FE&quot;,tx != 1 ) %&gt;% ggplot( aes( n_c, pow, col=model )) + facet_grid( . ~ tx + n_t, labeller = label_both ) + geom_line() + geom_point() + geom_hline( yintercept = 0, col=&quot;grey&quot; ) + geom_hline( yintercept = c( 0.10, 0.80 ), lty=2 ) + theme_minimal()+ theme( legend.position=&quot;bottom&quot;, legend.direction=&quot;horizontal&quot;, legend.key.width=unit(1,&quot;cm&quot;), panel.border = element_blank() ) + labs( title=&quot;Power for various methods vs number of controls.&quot;, y = &quot;Power&quot; ) We mark 80% power with a dashed line. For a 25% reduction in discipline, nothing reaches desired levels of power. For 50% reduction, some designs do, but we need substantial numbers of control schools. Averaging two years of outcomes post-treatment seems important: the “twopost” methods have a distinct power bump. For a single year of outcome data, the log model seems our best bet. 21.4.4 Assessing Minimum Detectable Effects Sometimes we want to know, given a design, what size effect we might be able to detect. The usual measure for this is the Minimum Detectable Effect (MDE), which is usually the size of the smallest effect we could detect with power 80%. To calculate Minimal Detectable Effects (MDEs) for the log-scale estimators, we first average our SEs over our different designs, grouped by sample size, and then convert the SEs to MDEs by multiplying by 2.8. We then have to convert to our treatment scale by flipping the sign and exponentiating, to get out of the log scale. sres2 = sres %&gt;% group_by( model, n_c, n_t ) %&gt;% summarise( SE = mean( SE ), E_SE_hat = mean( E_SE_hat ) ) %&gt;% mutate( MDE = exp( - (1.64 + 0.8) * SE ) ) sres2 %&gt;% filter( !(model %in% c( &quot;simple&quot;, &quot;ratio&quot;, &quot;ratio_twopost&quot; ) ) ) %&gt;% ggplot( aes( n_c, MDE, col=model ) ) + facet_wrap( ~ n_t, labeller = label_both ) + geom_point() + geom_line() + geom_hline( yintercept = 0.5 ) + theme_minimal() + scale_x_log10( breaks = unique( sres$n_c ) ) + theme( legend.position=&quot;bottom&quot;, legend.direction=&quot;horizontal&quot;, legend.key.width=unit(1,&quot;cm&quot;), panel.border = element_blank() ) + labs( x = &quot;Number of control units&quot;, y = &quot;MDE (proportion reduction of rate)&quot;, caption = &quot;A MDE of 0.6 means a 60% reduction (more than half) in discipline rates&quot;, title = &quot;MDE vs number of control units for various methods&quot; ) Corresponding with our findings regarding precision, above, the twopost estimator is the most sensitive, finding the smallest effects. "],["chap-potential-outcomes.html", "Chapter 22 Simulation under the Potential Outcomes Framework 22.1 Finite vs. Superpopulation inference 22.2 Data generation processes for potential outcomes 22.3 Finite sample performance measures 22.4 Nested finite simulation procedure", " Chapter 22 Simulation under the Potential Outcomes Framework If we are in the business of evaluating how various methods such as matching or propensity score weighting work in practice, we would probably turn to the potential outcomes framework for our simulations. The potential outcomes framework is a framework typically used in the causal inference literature to make very explicit statements regarding the mechanics of causality and the associated estimands one might target when estimating causal effects. While we recommend reading, for a more thourough overview, either [CITE Raudenbush or Field Experiments textbook], we briefly outline this framework here to set out our notation. Take a sample of experimental units, indexed by \\(i\\). For each unit, we can treat it or not. Denote treatment as \\(Z_i = 1\\) for treated or \\(Z_i = 0\\) for not treated. Now we imagine each unit has two potential outcomes being the outcome we would see if we treated it (\\(Y_i(1)\\)) or if we did not (\\(Y_i(0)\\)). Finally, our observed outcome is then \\[ Y_i^{obs} = Z_i Y_i(1) + (1-Z_i)Y_i(0) .\\] For a unit, the treatment effect is \\(\\tau_i = Y_i(1) - Y_i(0)\\); it is how much our outcome changes if we treat vs. not treat. Frustratingly, for each unit we can only see one of its two potential outcomes, so we can never get an estimate of these individual \\(\\tau_i\\). Under this view, causality is a missing data problem: if we only were able to impute the missing potential outcomes, we could have a dataset where we could calculate any estimands we wanted. E.g., the true average treatment effect for the sample \\(\\mathcal{S}\\) would be: \\[ ATE_{\\mathcal{S}} = \\frac{1}{N} \\sum_{i} Y_i(1) - Y_i( 0 ) . \\] The average proportion increase, by contrast, would be \\[ API_{\\mathcal{S}} = \\frac{1}{N} \\sum_{i} \\frac{Y_i(1)}{Y_i(0)} \\] 22.1 Finite vs. Superpopulation inference Consider a sample of \\(n\\) units, \\(\\mathcal{S}\\), along with their set of potential outcomes. We can talk about the true ATE of the sample, or, if we thought of the sample as being drawn from some larger population, we could talk about the true ATE of that larger population. This is a tension that often arises in potential outcomes based simulations: if we are focused on \\(ATE_{\\mathcal{S}}\\) then for each sample we generate, our estimand could be (maybe only slightly) different, depending on whether our sample has more or fewer units with high \\(\\tau_i\\). If, on the other hand, we are focused on where the units came from (which is our data generating model), our estimand is a property of the DGP, and would be the same for each sample generated. The catch is when we calculate our performance metrics, we now have two possible targets to pick from. Furthermore, if we are targeting the superpopulation ATE, then our error in estimation may be due in part to the representativeness of the sample, not the estimation or uncertainty due to the random assignment. We will follow this theme throughout this chapter. 22.2 Data generation processes for potential outcomes If we want to write a simulation using the potential outcomes framework, it is clear and transparent to first generate a complete set of potential outcomes, then generate a random assignment based on some assignment mechanism, and finally generate the observed outcomes as a function of assignment and original potential outcomes. For example, we might say that our data generation process is as follows: First generate each unit \\(i = 1, \\ldots, n\\), as \\[ \\begin{aligned} X_i &amp;\\sim exp( 1 ) - 1 \\\\ Y_i(0) &amp;= \\beta_0 + \\beta_1 X_i + \\epsilon_i \\mbox{ with } \\epsilon_i \\sim N( 0, \\sigma^2 ) \\\\ \\tau_i &amp;= \\tau_0 + \\tau_1 X_i + \\alpha u_i \\mbox{ with } u_i \\sim t_{df} \\\\ Y_i(1) &amp;= Y_i(0) + \\tau_i \\end{aligned} \\] with \\(exp(1)\\) being the standard exponential distribution and \\(t_{df}\\) being a \\(t\\) distribution with \\(df\\) degrees of freedom. We subtract 1 from \\(X_i\\) to zero-center it (it is often convenient to have zero-centered covariates so we can then, e.g., interpret \\(\\tau_0\\) as the true superpopulation ATE of our experiment). The above model is saying that we first, for each unit, generate a covariate. We then generate our two potential outcomes. I.e., we are generating what the outcome would be for each unit if it were treated and if it were not treated. We are driving both the level and the treatment effect with \\(X_i\\), assuming \\(\\beta_1\\) and \\(\\tau_1\\) are non-zero. One advantage of generating all the potential outcomes is we can then calculate the finite-sample estimands such as the true average treatment effect for the generated sample: we just take the average of \\(Y_i(1) - Y_i(0)\\) for our sample. Here is some code to illustrate the first part of the data generating process (we leave treatment assignment to later): gen_data &lt;- function( n = 100, R2 = 0.5, beta_0 = 0, beta_1 = 1, tau_0 = 1, tau_1 = 1, alpha = 1, df = 3 ) { stopifnot( R2 &gt;= 0 &amp;&amp; R2 &lt; 1 ) X_i = rexp( n, rate = 1 ) - 1 beta_1 = sqrt( 1 - R2 ) sigma_e = sqrt( R2 ) Y0_i = beta_0 + beta_1 * X_i + rnorm( n, sd=sigma_e ) tau_i = tau_0 + tau_1 * X_i + alpha * rt( n, df = df ) Y1_i = Y0_i + tau_i tibble( X = X_i, Y0 = Y0_i, Y1 = Y1_i ) } And now we see our estimand can change: set.seed( 40454 ) d1 &lt;- gen_data( 50 ) mean( d1$Y1 - d1$Y0 ) ## [1] 0.6374925 d2 &lt;- gen_data( 50 ) mean( d2$Y1 - d2$Y0 ) ## [1] 0.5479788 In reviewing our code, we know our superpopulation ATE should be tau, or 1 exactly. If our estimate for d1 is 0.6 do we say that is close or far from the target? From a finite sample performance approach, we nailed it. From superpopulation, less so. Also in looking at the above, there are a few details to call out: We can store the latent, intermediate quantities (both potential outcomes, in particular) so we can calculate the estimands of interest or learn about our data generating process. When we hand the data to an estimator, we would not provide this “secret” information. We are using a trick to index our DGP by an R2 value rather than coefficients on X so we can have a standardized control-side outcome (the expected variation of \\(Y_i(0)\\) will be 1). The treatment outcomes will have more variation due to the heterogeniety of the treatment impacts. If we were generating data with a constant treatment impact, then \\(ATE_{\\mathcal{S}} = ATE\\) always; this is typical for many similations in the literature. That being said, treatment variation is what causes a lot of methods to fail and so having simulations that have this variation is usually important. Once we have our schedule of potential outcomes, we would then generate the observed outcomes by assigning our (synthetic, randomly generated) \\(n\\) units to treatment or control. For example, say we wanted to simulate an observational context where treatment was a function of our covariate. We could model each unit as flipping a weighted coin with some probability that was a function of \\(X_i\\) as so: \\[ \\begin{aligned} p_i &amp;= logit^{-1}( \\xi_0 + \\xi_1 X_i ) \\\\ Z_i &amp;= Bern( p_i ) \\\\ Y_i &amp;= Z_i Y_i(1) + (1-Z_i) Y_i(0) \\end{aligned} \\] Here is code for assigning our data to treatment and control: assign_data &lt;- function( dat, xi_0 = -1, xi_1 = 1 ) { n = nrow(dat) dat = mutate( dat, p = arm::invlogit( xi_0 + xi_1 * X ), Z = rbinom( n, 1, prob=p ), Yobs = ifelse( Z == 1, Y1, Y0 ) ) dat } We can then add our assignment variable to our given data as so: assign_data( d2 ) ## # A tibble: 50 × 6 ## X Y0 Y1 p Z Yobs ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 0.670 0.667 2.58 0.418 1 2.58 ## 2 0.371 0.314 4.57 0.348 1 4.57 ## 3 1.94 1.29 3.03 0.719 0 1.29 ## 4 -0.244 0.119 -10.0 0.224 1 -10.0 ## 5 0.00850 1.44 2.88 0.271 0 1.44 ## 6 1.41 1.14 5.02 0.600 1 5.02 ## 7 -0.864 0.461 0.802 0.134 1 0.802 ## 8 -0.00533 -0.914 -1.17 0.268 0 -0.914 ## 9 -0.907 -0.202 0.555 0.129 1 0.555 ## 10 -0.363 -0.141 1.16 0.204 1 1.16 ## # ℹ 40 more rows Note how Yobs is, depending on Z, either Y0 or Y1. Separating our our DGP and our random assignment underscores the potential outcomes framework adage of the data are what they are, and we the experimenters (or nature) is randomly assigning these whole units to various conditions and observing the consequences. In general, we might instead put the p_i part of the model in our code generating the outcomes, if we wanted to view the chance of treatment assignment as inherent to the unit (which is what we usually expect in an observational context). 22.3 Finite sample performance measures Let’s generate a single dataset with our DGP from above, and run a small experiment where we actually randomize units to treatment and control: n = 100 set.seed(442423) dat = gen_data(n, tau_1 = -1) dat = mutate( dat, Z = 0 + (sample( n ) &lt;= n/2), Yobs = ifelse( Z == 1, Y1, Y0 ) ) mod = lm( Yobs ~ Z, data=dat ) coef(mod)[[&quot;Z&quot;]] ## [1] 0.8914992 We can compare this to the true finite-sample ATE: mean( dat$Y1 - dat$Y0 ) ## [1] 1.154018 Our finite-population simulation would be: rps &lt;- rerun( 1000, { dat = mutate( dat, Z = 0 + (sample( n ) &lt;= n/2), Yobs = ifelse( Z == 1, Y1, Y0 ) ) mod = lm( Yobs ~ Z, data=dat ) tibble( ATE_hat = coef(mod)[[&quot;Z&quot;]], SE_hat = arm::se.coef(mod)[[&quot;Z&quot;]] ) }) %&gt;% bind_rows() ## Warning: `rerun()` was deprecated in purrr 1.0.0. ## ℹ Please use `map()` instead. ## # Previously ## rerun(1000, { ## dat = mutate(dat, Z = 0 + (sample(n) &lt;= n / 2), ## Yobs = ifelse(Z == 1, Y1, Y0)) ## mod = lm(Yobs ~ Z, data = dat) ## tibble(ATE_hat = coef(mod)[[&quot;Z&quot;]], SE_hat = ## arm::se.coef( ## mod)[[&quot;Z&quot;]]) ## }) ## ## # Now ## map(1:1000, ~ { ## dat = mutate(dat, Z = 0 + (sample(n) &lt;= n / 2), ## Yobs = ifelse(Z == 1, Y1, Y0)) ## mod = lm(Yobs ~ Z, data = dat) ## tibble(ATE_hat = coef(mod)[[&quot;Z&quot;]], SE_hat = ## arm::se.coef( ## mod)[[&quot;Z&quot;]]) ## }) ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to ## see where this warning was generated. rps %&gt;% summarise( EATE_hat = mean( ATE_hat ), SE = sd( ATE_hat ), ESE_hat = mean( SE_hat ) ) ## # A tibble: 1 × 3 ## EATE_hat SE ESE_hat ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1.16 0.248 0.307 We are simulating on a single dataset. In particular, our set of potential outcomes is entirely fixed; the only source of randomness (and thus the randomness behind our SE) is the random assignment. Now this opens up some room for critique: what if our single dataset is non-standard? Our super-population simulation would be, by contrast: rps_sup &lt;- rerun( 1000, { dat = gen_data(n) dat = mutate( dat, Z = 0 + (sample( n ) &lt;= n/2), Yobs = ifelse( Z == 1, Y1, Y0 ) ) mod = lm( Yobs ~ Z, data=dat ) tibble( ATE_hat = coef(mod)[[&quot;Z&quot;]], SE_hat = arm::se.coef(mod)[[&quot;Z&quot;]] ) }) %&gt;% bind_rows() ## Warning: `rerun()` was deprecated in purrr 1.0.0. ## ℹ Please use `map()` instead. ## # Previously ## rerun(1000, { ## dat = gen_data(n) ## dat = mutate(dat, Z = 0 + (sample(n) &lt;= n / 2), ## Yobs = ifelse(Z == 1, Y1, Y0)) ## mod = lm(Yobs ~ Z, data = dat) ## tibble(ATE_hat = coef(mod)[[&quot;Z&quot;]], SE_hat = ## arm::se.coef( ## mod)[[&quot;Z&quot;]]) ## }) ## ## # Now ## map(1:1000, ~ { ## dat = gen_data(n) ## dat = mutate(dat, Z = 0 + (sample(n) &lt;= n / 2), ## Yobs = ifelse(Z == 1, Y1, Y0)) ## mod = lm(Yobs ~ Z, data = dat) ## tibble(ATE_hat = coef(mod)[[&quot;Z&quot;]], SE_hat = ## arm::se.coef( ## mod)[[&quot;Z&quot;]]) ## }) ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to ## see where this warning was generated. rps_sup %&gt;% summarise( EATE_hat = mean( ATE_hat ), SE = sd( ATE_hat ), ESE_hat = mean( SE_hat )) ## # A tibble: 1 × 3 ## EATE_hat SE ESE_hat ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1.00 0.381 0.378 First, note our superpopulation simulation is not biased for the superpopulation ATE. Also note the true SE is larger than our finite-sample simulation; this is because part of the uncertainty in our estimator is the uncertainty of whether our sample is representative of the superpopulation. Finally, this clarifies that our linear regression estimator is estimating standard errors assuming a superpopulation model. The true finite sample standard error is less than the expected estimated error: from a finite sample perspective, our estimator is giving overly conservative uncertainty estimates. (This discrepancy is often called the correlation of potential outcomes problem.) 22.4 Nested finite simulation procedure We just saw a difference between a specific, single, finite-sample dataset and a superpopulation. What if we wanted to know if this phenomenon was more general across a set of datasets? This question can be levied more broadly: if we run a simulation on a single dataset, this is even more narrow than running on a single scenario: if we compare methods and find one is superior to another for our single dataset, how do we know this is not an artifact of some specific characteristic of that data and not a general phenomonen at all? One way forward is to run a nested simulation, where we generate a series of finite sample datasets, and then for each dataset run a small simulation. We then calculate the expected finite sample performance across the datasets. One could almost think of the datasets themselves as a “factor” in our multifactor experiment. This is what we did in [CITE estimands paper] Borrowing from the simulation appendix of [CITE estimands paper], repeat \\(R\\) times: Generate a dataset using a particular DGP. This data generation is the “sampling step” for a superpopulation (SP) framework. The DGP represents an inﬁnite superpopulation. Each dataset includes, for each observation, the potential outcome under treatment or control. Record the true finite-sample ATE, both person and site weighted. Then, three times, do a finite simulation as follows: Randomize units to treatment and control. Calculate the corresponding observed outcomes. Analyze the results using the methods of interest, recording both the point estimate and estimated standard error for each. Having only three trials will give a poor estimate of within-dataset variability for each dataset, but the average across the \\(R\\) datasets in a given scenario gives a reasonable estimate of expected variability across datasets of the type we would see given the scenario parameters. To demonstrate we first make a mini-finite sample driver: one_finite_run &lt;- function( R0 = 3, n = 100, ... ) { dat = gen_data( n = n, ... ) rps &lt;- rerun( R0, { dat = mutate( dat, Z = 0 + (sample( n ) &lt;= n/2), Yobs = ifelse( Z == 1, Y1, Y0 ) ) mod = lm( Yobs ~ Z, data=dat ) tibble( ATE_hat = coef(mod)[[&quot;Z&quot;]], SE_hat = arm::se.coef(mod)[[&quot;Z&quot;]] ) }) %&gt;% bind_rows() rps$ATE = mean( dat$Y1 - dat$Y0 ) rps } This driver also stores the finite sample ATE for future reference: one_finite_run() ## Warning: `rerun()` was deprecated in purrr 1.0.0. ## ℹ Please use `map()` instead. ## # Previously ## rerun(3, { ## dat = mutate(dat, Z = 0 + (sample(n) &lt;= n / 2), ## Yobs = ifelse(Z == 1, Y1, Y0)) ## mod = lm(Yobs ~ Z, data = dat) ## tibble(ATE_hat = coef(mod)[[&quot;Z&quot;]], SE_hat = ## arm::se.coef( ## mod)[[&quot;Z&quot;]]) ## }) ## ## # Now ## map(1:3, ~ { ## dat = mutate(dat, Z = 0 + (sample(n) &lt;= n / 2), ## Yobs = ifelse(Z == 1, Y1, Y0)) ## mod = lm(Yobs ~ Z, data = dat) ## tibble(ATE_hat = coef(mod)[[&quot;Z&quot;]], SE_hat = ## arm::se.coef( ## mod)[[&quot;Z&quot;]]) ## }) ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to ## see where this warning was generated. ## # A tibble: 3 × 3 ## ATE_hat SE_hat ATE ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.348 0.421 0.768 ## 2 1.32 0.472 0.768 ## 3 1.17 0.549 0.768 We then run a bunch of finite runs. runs &lt;- rerun( 500, one_finite_run() ) %&gt;% bind_rows( .id = &quot;runID&quot; ) ## Warning: `rerun()` was deprecated in purrr 1.0.0. ## ℹ Please use `map()` instead. ## # Previously ## rerun(500, one_finite_run()) ## ## # Now ## map(1:500, ~ one_finite_run()) ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to ## see where this warning was generated. We use .id because we will need to separate out each finite run and analyze separately, and then aggregate. Each finite run is a very noisy simulation for a fixed dataset. This means when we calculate performance measures we have to be careful to avoid bias in the calculations; in particular, we need to focus on estimating \\(SE^2\\) across the finite runs, not \\(SE\\), to avoid the bias caused by having a few observations with every estimate. fruns &lt;- runs %&gt;% group_by( runID ) %&gt;% summarise( EATE_hat = mean( ATE_hat ), SE2 = var( ATE_hat ), ESE_hat = mean( SE_hat ), .groups = &quot;drop&quot; ) And then we aggregate our finite sample runs: res &lt;- fruns %&gt;% summarise( EEATE_hat = mean( EATE_hat ), EESE_hat = sqrt( mean( ESE_hat^2 ) ), ESE = sqrt( mean( SE2 ) ) ) %&gt;% mutate( calib = 100 * EESE_hat / ESE ) res ## # A tibble: 1 × 4 ## EEATE_hat EESE_hat ESE calib ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.996 0.380 0.331 115. We see our expected standard error estimate is, across the collection of finite sample scenarios all sharing a similar parent superpopulation DGP, 15% too large for the true expected finite-sample standard error. We need to keep the squaring. If we look at the SEs themselves, we have further apparent bias due to our estimated ESE_hat being so unstable due to too few observations: mean( sqrt( fruns$SE2 ) ) ## [1] 0.2944556 We can use our collection of mini-finite-sample runs to estimate superpopulation quantities as well. Given that the simulation datasets are i.i.d. draws, we can simply take expectations across all our simulations. The only concern is our estimates of MCSE will be off due to the clustering in our simulation runs. Here we calculate superpopulation performance measures (both with the squared SE and without; we prefer the squared version): runs %&gt;% summarise( EATE_hat = mean( ATE_hat ), SE_true = sd( ATE_hat ), SE_hat = mean( SE_hat ), SE2_true = var( ATE_hat ), SE2_hat = mean( SE_hat^2 ) ) %&gt;% pivot_longer( cols = c(SE_true:SE2_hat ), names_to = c( &quot;estimand&quot;, &quot;.value&quot; ), names_sep =&quot;_&quot; ) %&gt;% mutate( inflate = 100 * hat / true ) ## # A tibble: 2 × 5 ## EATE_hat estimand true hat inflate ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.996 SE 0.389 0.377 96.9 ## 2 0.996 SE2 0.151 0.142 93.9 "],["simulations-as-evidence.html", "Chapter 23 Simulations as evidence 23.1 Use extensive multi-factor simulations 23.2 Beat them at their own game 23.3 Calibrated simulations", " Chapter 23 Simulations as evidence We began this book with an acknowledgement that simulation is fraught with the potential for misuse: simulations are doomed to succeed. We close by reiterating this point, and also disussing several ways researchers might argue for their simulations being more useful than typical. In particular a researcher might do any of the following Use extensive multi-factor simulations Beat them at their own game. Generate simulations based on prior literature. Build calibrated simulations 23.1 Use extensive multi-factor simulations “If a single simulation is not convincing, use more of them,” is one principle a reseacher might take. By conducting extensive multifactor simulations, once can explore a large space of possible data generating scenarios. If, across the full range of scenarios, a general story bears out, then perhaps that will be more convincing than a narrower range. Of course, the critic will claim that some aspect that is not varying is the real culprit. If this is unrealistic, then the findings, across the board, may be less relevant. Thus, pick the factors one varies with care. 23.2 Beat them at their own game If a prior paper uses a simulation to make a case, one approach is to replicate that simulation, adding in the new estimator one wants to evaluate. This makes it (more) clear that you are not fishing: you are using something established in the literature as a published benchmark. By constraining oneself to published simulations, one has less wiggle room to cherry pick a data generating process that works the way you want. 23.3 Calibrated simulations A practice in increasing vogue is to generate calibrated simulations. These are simulations tailored to a specific applied contexts, with the results of the simulation studies designed to more narrowly inform what assumptions and structures are necessary in order to make progress in that context. Often these simulations are built out of existing data. For example, one might sample, with replacement, from the covariate distribution of an actual dataset so that the distribution of covariates is authentic in how the covariates are distributed and, more importantly, how they co-relate. The problem with this approach is one still needs to generate a ground truth to assess how well the estimators work in practice. It is very easy to accidently put a very simple model in place for this component, thus making a calibrated simulation quite naive in the very way that counts. The potential outcomes framework provides a natural way of generating calibrated simulations (Kern et al. 2014). Calbirated simulations are simulations tailored to specific real-world scenarios, to maximize their face validity as being representative of something we would see in practice. One way to generate a calibrated simulation is to use an existing datasets to generate plausible scenarios. One way to do this with potential outcomes is to take an existing randomized experiment or observational study and impute all the missing potential outcomes under some specific scheme. This fully defines the sample of interest and thus any target parameters, such as a measure of heterogeneity, are then known. We will then synthetically, and repeatedly, randomize and ``observe’’ outcomes to be analyzed with the methods we are testing. We could also resample from our dataset to generate datasets of different size, or to have a superpopulation target as our estimand. The key feature is the imputation step. One baseline method one can use is to generate a matched-pairs dataset by, for each unit, finding a close match given all the demographic and other covariate information of the sample. We then use the matched unit as the imputed potential outcome. By doing this (with replacement) for all units we can generate a fully imputed dataset which we then use as our population. This can preserve complex relationships in the data that are not model dependent. In particular, if outcomes tend to be coarsely defined (e.g., on an integer scale) or have specific clumps (such as zero-inflation or rounding), this structure will be preserved. One concern with this approach is the noise in the matching will in general dilute the structure of the treatment effect. This is akin to measurement error diluting found relationships in linear models. We can then sharpen these relationships towards a given model by first imputing missing outcomes using a specified model, and then matching on all units including the imputed potential outcome. This is not a data analysis strategy, but instead a method of generating synthetic data that both has a given structure of interest and also remains faithful to the idiosyncrasies of an actual dataset. A second approach that allows for varying the level of a systematic effect is to specify the treatment effect model and impute treatment outcomes for all control units. Then the complex structure between covariates and \\(Y(0)\\) would be perfectly preserved. Unfortunately, this would give 0 idiosyncratic treatment variation (unit-to-unit variation in the \\(\\tau_i\\) that is not explained by a model). To add in idiosyncratic variation we would then need to generate a distribution of perturbations and add these to the imputed outcomes just as an error term in a regression model. Regardless, once a fully observed sample has been obtained we can investigate several aspects of our estimators as above. References Kern, Holger L., Elizabeth A. Stuart, Jennifer Hill, and Donald P. Green. 2014. “Assessing Methods for Generalizing Experimental Impact Estimates to Target Populations.” Journal of Research on Educational Effectiveness 9 (1): 103–27. https://doi.org/10.1080/19345747.2015.1060282. "],["the-parametric-bootstrap.html", "Chapter 24 The Parametric bootstrap 24.1 Air conditioners: a stolen case study", " Chapter 24 The Parametric bootstrap An inference procedure very much connected to simulation studies is the parametric bootstrap. The parametric bootstrap is a bootstrap technique designed to obtain standard error estimates for an estimated parametric model. It can do better than the case-wise bootstrap in some circumstances, usually when there is need to avoid the discrete, chunky nature of a casewise bootstrap (which will only give values that exist in the original dataset). For a parametric bootstrap, the core idea is to fit a given model to actual data, and then take the parameters we estimate from that model as the DGP parameters in a simulation study. The parametric bootstrap is a simulation study for a specific scenario, and our goal is to assess how variable (and, possibly, biased) our estimator is for this specific scenario. If the behavior of our estimator in our simulated scenario is similar to what it would be under repeated trials in the real world, then our bootstrap answers will be informative as to how well our original estimator performs in practice. This is the bootstrap principle, or analogy with an additional assumption that the real-world is effectively well specified as the parameteric model we are fitting. In particular we do the following: generate data from a model with coefficients as estimated on the original data. repeatedly estimate our target quantity on a series of synthetic data sets, all generated from this model. examine this collection of estimates to assess the character of the estimates themselves, i.e. how much they vary, whether we are systematically estimating too high or too low, and so forth. The variance and bias of our estimates in our simulation is probably like the actual variance and bias of our original estimate (this is precisely the bootstrap analogy). A key feature of the parametric bootstrap is it is not, generally, a multifactor simulation experiment. We fit our model to the data, and use our best estimate of the world, as given by the fit model, to generate our data. This means we generally want to simulate in contexts that are (mostly) pivotal, meaning the distribution of our test statistic or point estimate is relatively stable across different scenarios. In other words, we want the uncertainty of our estimator to not heavily depend on the exact parameter values we use in our simulation, so that if we are simulating with incorrect parameters our bootstrap analogy will still hold. Often, to achieve a reasonable claim of being pivotal, we will focus on standardized statistics, such as the \\(t\\)-statistic of \\[ t = \\frac{est}{\\widehat{SE}} \\] It is more common for the distribution of a standardized test statistic to have a canonical distribution across scenarios than an absolute estimate. 24.1 Air conditioners: a stolen case study Following the case study presented in [CITE bootstrap book], consider some failure times of air conditioning units: dat = c( 3, 5, 7, 18, 43, 85, 91, 98, 100, 130, 230, 487 ) We are interested in the log of the average failure time: n = length(dat) y.bar = mean(dat) theta.hat = log( y.bar ) c( n = n, y.bar = y.bar, theta.hat = theta.hat ) ## n y.bar theta.hat ## 12.000000 108.083333 4.682903 We are interested in this because we are modeling the failure time of the air conditioners with an exponential distribution. This means we will generate new failure times with an exponential distribution: reps = replicate( 10000, { smp = rexp(n, 1/y.bar) log( mean( smp ) ) }) res_par = tibble( bias.hat = mean( reps ) - theta.hat, var.hat = var( reps ), CIlog_low = theta.hat + bias.hat - sqrt(var.hat) * qnorm(0.975), CIlog_high = theta.hat + bias.hat - sqrt(var.hat) * qnorm(0.025), CI_low = exp( CIlog_low ), CI_high = exp( CIlog_high ) ) res_par ## # A tibble: 1 × 6 ## bias.hat var.hat CIlog_low CIlog_high CI_low ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 -0.0420 0.0856 4.07 5.21 58.4 ## # ℹ 1 more variable: CI_high &lt;dbl&gt; Note how we are, as usual, in our standard simulation framework of repeatidly (1) generating data and (2) analyzing the simulated data. Nothing is changed. The nonparametric, or case-wise, bootstrap (this is what people normally mean when they say bootstrap) would look like this: reps = replicate( 10000, { smp = sample( dat, replace=TRUE ) log( mean( smp ) ) }) res_np = tibble( bias.hat = mean( reps ) - theta.hat, var.hat = var( reps ), CIlog_low = theta.hat + bias.hat - sqrt(var.hat) * qnorm(0.975), CIlog_high = theta.hat + bias.hat - sqrt(var.hat) * qnorm(0.025), CI_low = exp( CIlog_low ), CI_high = exp( CIlog_high ) ) bind_rows( parametric = res_par, casewise = res_np, .id = &quot;method&quot;) %&gt;% mutate( length = CI_high - CI_low ) ## # A tibble: 2 × 8 ## method bias.hat var.hat CIlog_low CIlog_high ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 parametric -0.0420 0.0856 4.07 5.21 ## 2 casewise -0.0651 0.132 3.90 5.33 ## # ℹ 3 more variables: CI_low &lt;dbl&gt;, ## # CI_high &lt;dbl&gt;, length &lt;dbl&gt; This is also a simulation: our data generating process is a bit more vague, however, as we are just resampling the data. This means our estimands are not as clearly specified. For example, in our parameteric approach, our target parameter is known to be true. In the case-wise, the connection between our DGP and the parameter theta.hat is less explicit. Overall, in this case, our parametric bootstrap can model the tail behavior of an exponential better than case-wise. Especially considering the small number of observations, it is going to be a more faithful representation of what we are doing–provided our model is well specified for the real world distribution. "],["on_functions.html", "Chapter 25 Appendix: Coding tidbits 25.1 Other ways of repeating yourself 25.2 Default arguments for functions 25.3 Testing and debugging code in your scripts 25.4 Keep multiple files of code 25.5 The source command and keeping things organized 25.6 Debugging with browser", " Chapter 25 Appendix: Coding tidbits This chapter is not about simulation, but does have a few tips and tricks regarding coding that are worth attending to. 25.1 Other ways of repeating yourself There are several ways to call a bit of code (e.g., one_run() over and over). We have seen map() in the main part of the textbook. In the past, there was a tidyverse method called rerun(), but it is currently out of favor. Originally, rerun() did exactly that: you gave it a number and a block of code, and it would rerun the block of code that many times, giving you the results as a list. Another, more classic, way to repeat oneself is to use an R function called replicate; rerun() and replicate() are near equivalents. replicate() does what its name suggests—it replicates the result of an expression a specified number of times. The first argument is the number of times to replicate and the next argument is an expression (a short piece of code to run). A further argument, simplify allows you to control how the results are structured. Setting simplify = FALSE returns the output as a list (just like rerun(). 25.2 Default arguments for functions To generate code both easy to use and configure, use default arguments. For example, my_function = function( a = 10, b = 20 ) { 100 * a + b } my_function() ## [1] 1020 my_function( 5 ) ## [1] 520 my_function( b = 5 ) ## [1] 1005 my_function( b = 5, a = 1 ) ## [1] 105 We can still call my_function() when we don’t know what the arguments are, but then when we know more about the function, we can specify things of interest. Lots of R commands work exactly this way, and for good reason. Especially for code to generate random datasets, default arguments can be a lifesaver as you can then call the method before you know exactly what everything means. For example, consider the blkvar package that has some code to generate blocked randomized datasets. We might locate a promising method, and type it in: library( blkvar ) generate_blocked_data() ## Error in generate_blocked_data(): argument &quot;n_k&quot; is missing, with no default That didn’t work, but let’s provide some block sizes and see what happens: generate_blocked_data( n_k = c( 3, 2 ) ) ## B Y0 Y1 ## 1 B1 1.7317207 5.110982 ## 2 B1 -0.1608224 5.174334 ## 3 B1 1.7023413 5.233891 ## 4 B2 0.2529889 5.939471 ## 5 B2 -2.0312750 3.780810 Nice! We see that we have a block ID and the control and treatment potential outcomes. We also don’t see a random assignment variable, so that tells us we probably need some other methods as well. But we can play with this as it stands right away. Next we can see that there are many things we might tune: args( generate_blocked_data ) ## function (n_k, sigma_alpha = 1, sigma_beta = 0, beta = 5, sigma_0 = 1, ## sigma_1 = 1, corr = 0.5, exact = FALSE) ## NULL The documentation will tell us more, but if we just need some sample data, we can quickly assess our method before having to do much reading and understanding. Only once we have identified what we need do we have to turn to the documentation itself. 25.3 Testing and debugging code in your scripts If you have an extended script with a list of functions, you might have a lot of code that runs each function in turn, so you can easily remind yourself of what it does, or what the output looks like. One way to keep this code around, but not have it run all the time when you run your script, is to put the code inside a “FALSE block,” that might look like so: if ( FALSE ) { res &lt;- my_function( 10, 20, 30 ) res # Some notes as to what I want to see. sd( res ) # This should be around 20 } You can then, when looking at the script, paste the code inside the block into the console when you want to run it. If you source the script, however, it will not run at all, and thus your code will source faster and not print out any extraneous output. 25.4 Keep multiple files of code Simulations have two general phases: generate your results and analyze your results. The ending of the first phase should be to save the generated results. The beginning of the second phase should then be to load the results from a file and analyze them. These phases can be in a seperate ‘.R’ files This allows for easily changing how one analyzes an experiment without re-running the entire thing. 25.5 The source command and keeping things organized Once you have your multifactor simulation, if it is a particularly complex one, you will likely have three general collections of code: Code for generating data Code for analyzing data Code for running a single simulation scenario If each of these pieces is large and complex, you might consider putting them in three different .R files. Then, in your primary simulation, you would source these files. E.g., source( &quot;pack_data_generators.R&quot; ) source( &quot;pack_estimators.R&quot; ) source( &quot;pack_simulation_support.R&quot; ) You might also have pack_simulation_support.R source the other two files, and then source the single simulation support file in your primay file. One reason for putting code in individual files is you can then have testing code in each of your files (in False blocks, like described above), testing each of your components. Then, when you are not focused on that component, you don’t have to look at that testing code. Another good reason for this type of modular organizing is you can then have a variety of data generators, forming a library of options. You can then easily create different simulations that use different pieces, in a larger project. For example, in one recent simulation project on estimators for an Instrumental Variable analysis, we had several different data generators for generating different types of compliance patterns (IVs are often used to handle noncompliance in randomized experiments). Our data generation code file then had several methods: &gt; ls() [1] &quot;describe_sim_data&quot; &quot;make_dat&quot; &quot;make.dat.1side&quot; [4] &quot;make.dat.1side.old&quot; &quot;make.dat.orig&quot; &quot;make.dat.simple&quot; [7] &quot;make.dat.tuned&quot; &quot;rand.exp&quot; &quot;summarize_sim_data&quot; The describe and summarize methods printed various statistics about a sample dataset; these are used to debug and understand how the generated data looks. We also had a variety of different DGP methods because we had different versions that came up as we were trying to chase down errors in our estimators and understand strange behavior. Putting the estimators in a different file also had a nice additional purpose: we also had an applied data example in our work, and we could simply source that file and use those estimators on our actual data. This ensured our simulation and applied analysis were perfectly aligned in terms of the estimators we were using. Also, as we debugged our estimators and tweaked them, we immediately could re-run our applied analysis to update those results with minimal effort. Modular programming is key. 25.6 Debugging with browser Consider the code taken from a simulation: if ( any( is.na( rs$estimate ) ) ) { browser() } The browser() command stops your code and puts you in an interactive console where you can look at different objects and see what is happening. Having it triggered when something bad happens (in this case when a set of estimates has an unexpected NA) can help untangle what is driving a rare event. "],["further-readings-and-resources.html", "Chapter 26 Further readings and resources", " Chapter 26 Further readings and resources We close with a list of things of interest we have discovered while writing this text. Morris, White, &amp; Crowther (2019). Using simulation studies to evaluate statistical methods. High-level simulation design considerations. Details about performance criteria calculations. Stata-centric. SimDesign R package (Chalmers, 2019) Tools for building generic simulation workflows. Chalmers &amp; Adkin (2019). Writing effective and reliable Monte Carlo simulations with the SimDesign package. DeclareDesign (Blair, Cooper, Coppock, &amp; Humphreys) Specialized suite of R packages for simulating research designs. Design philosophy is very similar to “tidy” simulation approach. SimHelpers R package (Joshi &amp; Pustejovsky, 2020) Helper functions for calculating performance criteria. Includes Monte Carlo standard errors. Abdulkadiroğlu, Atila, Joshua D Angrist, Yusuke Narita, and Parag A Pathak. 2017. “Research Design Meets Market Design: Using Centralized Assignment for Impact Evaluation.” Econometrica 85 (5): 1373–1432. Bloom, Howard S., Stephen W. Raudenbush, Michael J. Weiss, and Kristin Porter. 2016. “Using Multisite Experiments to Study Cross-Site Variation in Treatment Effects: A Hybrid Approach With Fixed Intercepts and a Random Treatment Coefficient.” Journal of Research on Educational Effectiveness 10 (4): 0–0. https://doi.org/10.1080/19345747.2016.1264518. Brown, Morton B., and Alan B. Forsythe. 1974. “The Small Sample Behavior of Some Statistics Which Test the Equality of Several Means.” Technometrics 16 (1): 129–32. https://doi.org/10.1080/00401706.1974.10489158. Davison, A. C., and D. V. Hinkley. 1997. Bootstrap Methods and Their Applications. Cambridge: Cambridge University Press. Dong, Nianbo, and Rebecca Maynard. 2013. “PowerUp! : A Tool for Calculating Minimum Detectable Effect Sizes and Minimum Required Sample Sizes for Experimental and Quasi-Experimental Design Studies.” Journal of Research on Educational Effectiveness 6 (1): 24–67. https://doi.org/10.1080/19345747.2012.673143. Faul, Franz, Edgar Erdfelder, Axel Buchner, and Albert-Georg Lang. 2009. “Statistical Power Analyses Using G*Power 3.1: Tests for Correlation and Regression Analyses.” Behavior Research Methods 41 (4): 1149–60. https://doi.org/10.3758/BRM.41.4.1149. Fryda, Tomas, Erin LeDell, Navdeep Gill, Spencer Aiello, Anqi Fu, Arno Candel, Cliff Click, et al. 2014. “H2o: R Interface for the ’H2O’ Scalable Machine Learning Platform.” Comprehensive R Archive Network. https://doi.org/10.32614/CRAN.package.h2o. Gelman, Andrew, John B. Carlin, Hal S. Stern, David B. Dunson, Aki Vehtari, and Donald B. Rubin. 2013. Bayesian Data Analysis. 0th ed. Chapman and Hall/CRC. https://doi.org/10.1201/b16018. Jones, Owen, Robert Maillardet, and Andrew Robinson. 2012. Introduction to Scientific Programming and Simulation Using R. New York: Chapman and Hall/CRC. https://doi.org/10.1201/9781420068740. Kern, Holger L., Elizabeth A. Stuart, Jennifer Hill, and Donald P. Green. 2014. “Assessing Methods for Generalizing Experimental Impact Estimates to Target Populations.” Journal of Research on Educational Effectiveness 9 (1): 103–27. https://doi.org/10.1080/19345747.2015.1060282. Long, J. Scott, and Laurie H. Ervin. 2000. “Using Heteroscedasticity Consistent Standard Errors in the Linear Regression Model.” The American Statistician 54 (3): 217–24. https://doi.org/10.1080/00031305.2000.10474549. Mehrotra, Devan V. 1997. “Improving the Brown-Forsythe Solution to the Generalized Behrens-Fisher Problem.” Communications in Statistics - Simulation and Computation 26 (3): 1139–45. https://doi.org/10.1080/03610919708813431. Miratrix, Luke W, Michael J Weiss, and Brit Henderson. 2021. “An Applied Researcher’s Guide to Estimating Effects from Multisite Individually Randomized Trials: Estimands, Estimators, and Estimates.” Journal of Research on Educational Effectiveness 14 (1): 270–308. Robert, Christian, and George Casella. 2010. Introducing Monte Carlo Methods with R. New York, NY: Springer. https://doi.org/10.1007/978-1-4419-1576-4. Staiger, Douglas O, and Jonah E Rockoff. 2010. “Searching for Effective Teachers with Imperfect Information.” Journal of Economic Perspectives 24 (3): 97–118. Sundberg, Rolf. 2003. “Conditional statistical inference and quantification of relevance.” Journal of the Royal Statistical Society: Series B (Statistical Methodology) 65 (1): 299–315. Tipton, Elizabeth. 2013. “Stratified Sampling Using Cluster Analysis: A Sample Selection Strategy for Improved Generalizations from Experiments.” Evaluation Review 37 (2): 109–39. https://doi.org/10.1177/0193841X13516324. Westfall, Peter H, and Kevin SS Henning. 2013. Understanding Advanced Statistical Methods. Vol. 543. CRC Press Boca Raton, FL. White, Halbert. 1980. “A Heteroskedasticity-Consistent Covariance Matrix Estimator and a Direct Test for Heteroskedasticity.” Econometrica 48 (4): 817–38. "]]
